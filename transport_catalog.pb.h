// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalog.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[35]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalog_2eproto;
namespace serialization {
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class AddressComponent;
class AddressComponentDefaultTypeInternal;
extern AddressComponentDefaultTypeInternal _AddressComponent_default_instance_;
class Bus;
class BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class BusInfo;
class BusInfoDefaultTypeInternal;
extern BusInfoDefaultTypeInternal _BusInfo_default_instance_;
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Company;
class CompanyDefaultTypeInternal;
extern CompanyDefaultTypeInternal _Company_default_instance_;
class Coords;
class CoordsDefaultTypeInternal;
extern CoordsDefaultTypeInternal _Coords_default_instance_;
class Database;
class DatabaseDefaultTypeInternal;
extern DatabaseDefaultTypeInternal _Database_default_instance_;
class Database_RubricsEntry_DoNotUse;
class Database_RubricsEntry_DoNotUseDefaultTypeInternal;
extern Database_RubricsEntry_DoNotUseDefaultTypeInternal _Database_RubricsEntry_DoNotUse_default_instance_;
class Edge;
class EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class EdgeInfo;
class EdgeInfoDefaultTypeInternal;
extern EdgeInfoDefaultTypeInternal _EdgeInfo_default_instance_;
class Graph;
class GraphDefaultTypeInternal;
extern GraphDefaultTypeInternal _Graph_default_instance_;
class Name;
class NameDefaultTypeInternal;
extern NameDefaultTypeInternal _Name_default_instance_;
class NearbyStop;
class NearbyStopDefaultTypeInternal;
extern NearbyStopDefaultTypeInternal _NearbyStop_default_instance_;
class Phone;
class PhoneDefaultTypeInternal;
extern PhoneDefaultTypeInternal _Phone_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class RenderSettings;
class RenderSettingsDefaultTypeInternal;
extern RenderSettingsDefaultTypeInternal _RenderSettings_default_instance_;
class Renderer;
class RendererDefaultTypeInternal;
extern RendererDefaultTypeInternal _Renderer_default_instance_;
class Renderer_BusColorsEntry_DoNotUse;
class Renderer_BusColorsEntry_DoNotUseDefaultTypeInternal;
extern Renderer_BusColorsEntry_DoNotUseDefaultTypeInternal _Renderer_BusColorsEntry_DoNotUse_default_instance_;
class Renderer_BusesEntry_DoNotUse;
class Renderer_BusesEntry_DoNotUseDefaultTypeInternal;
extern Renderer_BusesEntry_DoNotUseDefaultTypeInternal _Renderer_BusesEntry_DoNotUse_default_instance_;
class Renderer_CompanyCoordsEntry_DoNotUse;
class Renderer_CompanyCoordsEntry_DoNotUseDefaultTypeInternal;
extern Renderer_CompanyCoordsEntry_DoNotUseDefaultTypeInternal _Renderer_CompanyCoordsEntry_DoNotUse_default_instance_;
class Renderer_StopsCoordsEntry_DoNotUse;
class Renderer_StopsCoordsEntry_DoNotUseDefaultTypeInternal;
extern Renderer_StopsCoordsEntry_DoNotUseDefaultTypeInternal _Renderer_StopsCoordsEntry_DoNotUse_default_instance_;
class RouteInternalData;
class RouteInternalDataDefaultTypeInternal;
extern RouteInternalDataDefaultTypeInternal _RouteInternalData_default_instance_;
class RouteInternalDataVector;
class RouteInternalDataVectorDefaultTypeInternal;
extern RouteInternalDataVectorDefaultTypeInternal _RouteInternalDataVector_default_instance_;
class Router;
class RouterDefaultTypeInternal;
extern RouterDefaultTypeInternal _Router_default_instance_;
class RouterImpl;
class RouterImplDefaultTypeInternal;
extern RouterImplDefaultTypeInternal _RouterImpl_default_instance_;
class Router_CompaniesVerticiesEntry_DoNotUse;
class Router_CompaniesVerticiesEntry_DoNotUseDefaultTypeInternal;
extern Router_CompaniesVerticiesEntry_DoNotUseDefaultTypeInternal _Router_CompaniesVerticiesEntry_DoNotUse_default_instance_;
class Rubric;
class RubricDefaultTypeInternal;
extern RubricDefaultTypeInternal _Rubric_default_instance_;
class StopInfo;
class StopInfoDefaultTypeInternal;
extern StopInfoDefaultTypeInternal _StopInfo_default_instance_;
class StopVertexIds;
class StopVertexIdsDefaultTypeInternal;
extern StopVertexIdsDefaultTypeInternal _StopVertexIds_default_instance_;
class TransportCatalog;
class TransportCatalogDefaultTypeInternal;
extern TransportCatalogDefaultTypeInternal _TransportCatalog_default_instance_;
class Url;
class UrlDefaultTypeInternal;
extern UrlDefaultTypeInternal _Url_default_instance_;
class VertexInfo;
class VertexInfoDefaultTypeInternal;
extern VertexInfoDefaultTypeInternal _VertexInfo_default_instance_;
class WorkingTime;
class WorkingTimeDefaultTypeInternal;
extern WorkingTimeDefaultTypeInternal _WorkingTime_default_instance_;
class WorkingTimeInterval;
class WorkingTimeIntervalDefaultTypeInternal;
extern WorkingTimeIntervalDefaultTypeInternal _WorkingTimeInterval_default_instance_;
}  // namespace serialization
PROTOBUF_NAMESPACE_OPEN
template<> ::serialization::Address* Arena::CreateMaybeMessage<::serialization::Address>(Arena*);
template<> ::serialization::AddressComponent* Arena::CreateMaybeMessage<::serialization::AddressComponent>(Arena*);
template<> ::serialization::Bus* Arena::CreateMaybeMessage<::serialization::Bus>(Arena*);
template<> ::serialization::BusInfo* Arena::CreateMaybeMessage<::serialization::BusInfo>(Arena*);
template<> ::serialization::Color* Arena::CreateMaybeMessage<::serialization::Color>(Arena*);
template<> ::serialization::Company* Arena::CreateMaybeMessage<::serialization::Company>(Arena*);
template<> ::serialization::Coords* Arena::CreateMaybeMessage<::serialization::Coords>(Arena*);
template<> ::serialization::Database* Arena::CreateMaybeMessage<::serialization::Database>(Arena*);
template<> ::serialization::Database_RubricsEntry_DoNotUse* Arena::CreateMaybeMessage<::serialization::Database_RubricsEntry_DoNotUse>(Arena*);
template<> ::serialization::Edge* Arena::CreateMaybeMessage<::serialization::Edge>(Arena*);
template<> ::serialization::EdgeInfo* Arena::CreateMaybeMessage<::serialization::EdgeInfo>(Arena*);
template<> ::serialization::Graph* Arena::CreateMaybeMessage<::serialization::Graph>(Arena*);
template<> ::serialization::Name* Arena::CreateMaybeMessage<::serialization::Name>(Arena*);
template<> ::serialization::NearbyStop* Arena::CreateMaybeMessage<::serialization::NearbyStop>(Arena*);
template<> ::serialization::Phone* Arena::CreateMaybeMessage<::serialization::Phone>(Arena*);
template<> ::serialization::Point* Arena::CreateMaybeMessage<::serialization::Point>(Arena*);
template<> ::serialization::RenderSettings* Arena::CreateMaybeMessage<::serialization::RenderSettings>(Arena*);
template<> ::serialization::Renderer* Arena::CreateMaybeMessage<::serialization::Renderer>(Arena*);
template<> ::serialization::Renderer_BusColorsEntry_DoNotUse* Arena::CreateMaybeMessage<::serialization::Renderer_BusColorsEntry_DoNotUse>(Arena*);
template<> ::serialization::Renderer_BusesEntry_DoNotUse* Arena::CreateMaybeMessage<::serialization::Renderer_BusesEntry_DoNotUse>(Arena*);
template<> ::serialization::Renderer_CompanyCoordsEntry_DoNotUse* Arena::CreateMaybeMessage<::serialization::Renderer_CompanyCoordsEntry_DoNotUse>(Arena*);
template<> ::serialization::Renderer_StopsCoordsEntry_DoNotUse* Arena::CreateMaybeMessage<::serialization::Renderer_StopsCoordsEntry_DoNotUse>(Arena*);
template<> ::serialization::RouteInternalData* Arena::CreateMaybeMessage<::serialization::RouteInternalData>(Arena*);
template<> ::serialization::RouteInternalDataVector* Arena::CreateMaybeMessage<::serialization::RouteInternalDataVector>(Arena*);
template<> ::serialization::Router* Arena::CreateMaybeMessage<::serialization::Router>(Arena*);
template<> ::serialization::RouterImpl* Arena::CreateMaybeMessage<::serialization::RouterImpl>(Arena*);
template<> ::serialization::Router_CompaniesVerticiesEntry_DoNotUse* Arena::CreateMaybeMessage<::serialization::Router_CompaniesVerticiesEntry_DoNotUse>(Arena*);
template<> ::serialization::Rubric* Arena::CreateMaybeMessage<::serialization::Rubric>(Arena*);
template<> ::serialization::StopInfo* Arena::CreateMaybeMessage<::serialization::StopInfo>(Arena*);
template<> ::serialization::StopVertexIds* Arena::CreateMaybeMessage<::serialization::StopVertexIds>(Arena*);
template<> ::serialization::TransportCatalog* Arena::CreateMaybeMessage<::serialization::TransportCatalog>(Arena*);
template<> ::serialization::Url* Arena::CreateMaybeMessage<::serialization::Url>(Arena*);
template<> ::serialization::VertexInfo* Arena::CreateMaybeMessage<::serialization::VertexInfo>(Arena*);
template<> ::serialization::WorkingTime* Arena::CreateMaybeMessage<::serialization::WorkingTime>(Arena*);
template<> ::serialization::WorkingTimeInterval* Arena::CreateMaybeMessage<::serialization::WorkingTimeInterval>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace serialization {

enum AddressComponent_Type : int {
  AddressComponent_Type_COUNTRY = 0,
  AddressComponent_Type_REGION = 1,
  AddressComponent_Type_CITY = 2,
  AddressComponent_Type_STREET = 3,
  AddressComponent_Type_HOUSE = 4,
  AddressComponent_Type_AddressComponent_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AddressComponent_Type_AddressComponent_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AddressComponent_Type_IsValid(int value);
constexpr AddressComponent_Type AddressComponent_Type_Type_MIN = AddressComponent_Type_COUNTRY;
constexpr AddressComponent_Type AddressComponent_Type_Type_MAX = AddressComponent_Type_HOUSE;
constexpr int AddressComponent_Type_Type_ARRAYSIZE = AddressComponent_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddressComponent_Type_descriptor();
template<typename T>
inline const std::string& AddressComponent_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AddressComponent_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AddressComponent_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AddressComponent_Type_descriptor(), enum_t_value);
}
inline bool AddressComponent_Type_Parse(
    const std::string& name, AddressComponent_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AddressComponent_Type>(
    AddressComponent_Type_descriptor(), name, value);
}
enum Name_Type : int {
  Name_Type_MAIN = 0,
  Name_Type_SYNONYM = 1,
  Name_Type_SHORT = 2,
  Name_Type_Name_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Name_Type_Name_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Name_Type_IsValid(int value);
constexpr Name_Type Name_Type_Type_MIN = Name_Type_MAIN;
constexpr Name_Type Name_Type_Type_MAX = Name_Type_SHORT;
constexpr int Name_Type_Type_ARRAYSIZE = Name_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Name_Type_descriptor();
template<typename T>
inline const std::string& Name_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Name_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Name_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Name_Type_descriptor(), enum_t_value);
}
inline bool Name_Type_Parse(
    const std::string& name, Name_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Name_Type>(
    Name_Type_descriptor(), name, value);
}
enum Phone_Type : int {
  Phone_Type_PHONE = 0,
  Phone_Type_FAX = 1,
  Phone_Type_Phone_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Phone_Type_Phone_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Phone_Type_IsValid(int value);
constexpr Phone_Type Phone_Type_Type_MIN = Phone_Type_PHONE;
constexpr Phone_Type Phone_Type_Type_MAX = Phone_Type_FAX;
constexpr int Phone_Type_Type_ARRAYSIZE = Phone_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Phone_Type_descriptor();
template<typename T>
inline const std::string& Phone_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Phone_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Phone_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Phone_Type_descriptor(), enum_t_value);
}
inline bool Phone_Type_Parse(
    const std::string& name, Phone_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Phone_Type>(
    Phone_Type_descriptor(), name, value);
}
enum WorkingTimeInterval_Day : int {
  WorkingTimeInterval_Day_EVERYDAY = 0,
  WorkingTimeInterval_Day_MONDAY = 1,
  WorkingTimeInterval_Day_TUESDAY = 2,
  WorkingTimeInterval_Day_WEDNESDAY = 3,
  WorkingTimeInterval_Day_THURSDAY = 4,
  WorkingTimeInterval_Day_FRIDAY = 5,
  WorkingTimeInterval_Day_SATURDAY = 6,
  WorkingTimeInterval_Day_SUNDAY = 7,
  WorkingTimeInterval_Day_WorkingTimeInterval_Day_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WorkingTimeInterval_Day_WorkingTimeInterval_Day_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WorkingTimeInterval_Day_IsValid(int value);
constexpr WorkingTimeInterval_Day WorkingTimeInterval_Day_Day_MIN = WorkingTimeInterval_Day_EVERYDAY;
constexpr WorkingTimeInterval_Day WorkingTimeInterval_Day_Day_MAX = WorkingTimeInterval_Day_SUNDAY;
constexpr int WorkingTimeInterval_Day_Day_ARRAYSIZE = WorkingTimeInterval_Day_Day_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkingTimeInterval_Day_descriptor();
template<typename T>
inline const std::string& WorkingTimeInterval_Day_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WorkingTimeInterval_Day>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WorkingTimeInterval_Day_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WorkingTimeInterval_Day_descriptor(), enum_t_value);
}
inline bool WorkingTimeInterval_Day_Parse(
    const std::string& name, WorkingTimeInterval_Day* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WorkingTimeInterval_Day>(
    WorkingTimeInterval_Day_descriptor(), name, value);
}
enum EdgeInfoType : int {
  WAIT = 0,
  BUS = 1,
  WALK = 2,
  EdgeInfoType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EdgeInfoType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EdgeInfoType_IsValid(int value);
constexpr EdgeInfoType EdgeInfoType_MIN = WAIT;
constexpr EdgeInfoType EdgeInfoType_MAX = WALK;
constexpr int EdgeInfoType_ARRAYSIZE = EdgeInfoType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdgeInfoType_descriptor();
template<typename T>
inline const std::string& EdgeInfoType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EdgeInfoType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EdgeInfoType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EdgeInfoType_descriptor(), enum_t_value);
}
inline bool EdgeInfoType_Parse(
    const std::string& name, EdgeInfoType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EdgeInfoType>(
    EdgeInfoType_descriptor(), name, value);
}
enum ColorType : int {
  NOT_DEFINED = 0,
  STRING = 1,
  RGB = 2,
  RGBA = 3,
  ColorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ColorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ColorType_IsValid(int value);
constexpr ColorType ColorType_MIN = NOT_DEFINED;
constexpr ColorType ColorType_MAX = RGBA;
constexpr int ColorType_ARRAYSIZE = ColorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColorType_descriptor();
template<typename T>
inline const std::string& ColorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ColorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ColorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ColorType_descriptor(), enum_t_value);
}
inline bool ColorType_Parse(
    const std::string& name, ColorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ColorType>(
    ColorType_descriptor(), name, value);
}
// ===================================================================

class StopInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.StopInfo) */ {
 public:
  StopInfo();
  virtual ~StopInfo();

  StopInfo(const StopInfo& from);
  StopInfo(StopInfo&& from) noexcept
    : StopInfo() {
    *this = ::std::move(from);
  }

  inline StopInfo& operator=(const StopInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopInfo& operator=(StopInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopInfo* internal_default_instance() {
    return reinterpret_cast<const StopInfo*>(
               &_StopInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StopInfo& a, StopInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StopInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopInfo* New() const final {
    return CreateMaybeMessage<StopInfo>(nullptr);
  }

  StopInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopInfo& from);
  void MergeFrom(const StopInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.StopInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusesFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string buses = 2;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  const std::string& buses(int index) const;
  std::string* mutable_buses(int index);
  void set_buses(int index, const std::string& value);
  void set_buses(int index, std::string&& value);
  void set_buses(int index, const char* value);
  void set_buses(int index, const char* value, size_t size);
  std::string* add_buses();
  void add_buses(const std::string& value);
  void add_buses(std::string&& value);
  void add_buses(const char* value);
  void add_buses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& buses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_buses();
  private:
  const std::string& _internal_buses(int index) const;
  std::string* _internal_add_buses();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:serialization.StopInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> buses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class BusInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.BusInfo) */ {
 public:
  BusInfo();
  virtual ~BusInfo();

  BusInfo(const BusInfo& from);
  BusInfo(BusInfo&& from) noexcept
    : BusInfo() {
    *this = ::std::move(from);
  }

  inline BusInfo& operator=(const BusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusInfo& operator=(BusInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BusInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BusInfo* internal_default_instance() {
    return reinterpret_cast<const BusInfo*>(
               &_BusInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BusInfo& a, BusInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BusInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusInfo* New() const final {
    return CreateMaybeMessage<BusInfo>(nullptr);
  }

  BusInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BusInfo& from);
  void MergeFrom(const BusInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.BusInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStopCountFieldNumber = 2,
    kUniqueStopCountFieldNumber = 3,
    kGeoRouteLengthFieldNumber = 5,
    kRoadRouteLengthFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 stop_count = 2;
  void clear_stop_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 stop_count() const;
  void set_stop_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stop_count() const;
  void _internal_set_stop_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 unique_stop_count = 3;
  void clear_unique_stop_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 unique_stop_count() const;
  void set_unique_stop_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_unique_stop_count() const;
  void _internal_set_unique_stop_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double geo_route_length = 5;
  void clear_geo_route_length();
  double geo_route_length() const;
  void set_geo_route_length(double value);
  private:
  double _internal_geo_route_length() const;
  void _internal_set_geo_route_length(double value);
  public:

  // int32 road_route_length = 4;
  void clear_road_route_length();
  ::PROTOBUF_NAMESPACE_ID::int32 road_route_length() const;
  void set_road_route_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_road_route_length() const;
  void _internal_set_road_route_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:serialization.BusInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stop_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 unique_stop_count_;
  double geo_route_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 road_route_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class Edge :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Edge) */ {
 public:
  Edge();
  virtual ~Edge();

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Edge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Edge* New() const final {
    return CreateMaybeMessage<Edge>(nullptr);
  }

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Edge";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kWeightFieldNumber = 3,
  };
  // uint64 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint64 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::uint64 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double weight = 3;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:serialization.Edge)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_;
  ::PROTOBUF_NAMESPACE_ID::uint64 to_;
  double weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class Graph :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Graph) */ {
 public:
  Graph();
  virtual ~Graph();

  Graph(const Graph& from);
  Graph(Graph&& from) noexcept
    : Graph() {
    *this = ::std::move(from);
  }

  inline Graph& operator=(const Graph& from) {
    CopyFrom(from);
    return *this;
  }
  inline Graph& operator=(Graph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Graph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Graph* internal_default_instance() {
    return reinterpret_cast<const Graph*>(
               &_Graph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Graph& a, Graph& b) {
    a.Swap(&b);
  }
  inline void Swap(Graph* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Graph* New() const final {
    return CreateMaybeMessage<Graph>(nullptr);
  }

  Graph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Graph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Graph& from);
  void MergeFrom(const Graph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Graph";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesFieldNumber = 1,
    kVertexCountFieldNumber = 2,
  };
  // repeated .serialization.Edge edges = 1;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::serialization::Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Edge >*
      mutable_edges();
  private:
  const ::serialization::Edge& _internal_edges(int index) const;
  ::serialization::Edge* _internal_add_edges();
  public:
  const ::serialization::Edge& edges(int index) const;
  ::serialization::Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Edge >&
      edges() const;

  // uint64 vertex_count = 2;
  void clear_vertex_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 vertex_count() const;
  void set_vertex_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_vertex_count() const;
  void _internal_set_vertex_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:serialization.Graph)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Edge > edges_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vertex_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class StopVertexIds :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.StopVertexIds) */ {
 public:
  StopVertexIds();
  virtual ~StopVertexIds();

  StopVertexIds(const StopVertexIds& from);
  StopVertexIds(StopVertexIds&& from) noexcept
    : StopVertexIds() {
    *this = ::std::move(from);
  }

  inline StopVertexIds& operator=(const StopVertexIds& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVertexIds& operator=(StopVertexIds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopVertexIds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopVertexIds* internal_default_instance() {
    return reinterpret_cast<const StopVertexIds*>(
               &_StopVertexIds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StopVertexIds& a, StopVertexIds& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVertexIds* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopVertexIds* New() const final {
    return CreateMaybeMessage<StopVertexIds>(nullptr);
  }

  StopVertexIds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopVertexIds>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopVertexIds& from);
  void MergeFrom(const StopVertexIds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVertexIds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.StopVertexIds";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kInFieldNumber = 2,
    kOutFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 in = 2;
  void clear_in();
  ::PROTOBUF_NAMESPACE_ID::uint64 in() const;
  void set_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_in() const;
  void _internal_set_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 out = 3;
  void clear_out();
  ::PROTOBUF_NAMESPACE_ID::uint64 out() const;
  void set_out(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_out() const;
  void _internal_set_out(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:serialization.StopVertexIds)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 in_;
  ::PROTOBUF_NAMESPACE_ID::uint64 out_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class VertexInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.VertexInfo) */ {
 public:
  VertexInfo();
  virtual ~VertexInfo();

  VertexInfo(const VertexInfo& from);
  VertexInfo(VertexInfo&& from) noexcept
    : VertexInfo() {
    *this = ::std::move(from);
  }

  inline VertexInfo& operator=(const VertexInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VertexInfo& operator=(VertexInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VertexInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VertexInfo* internal_default_instance() {
    return reinterpret_cast<const VertexInfo*>(
               &_VertexInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VertexInfo& a, VertexInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VertexInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VertexInfo* New() const final {
    return CreateMaybeMessage<VertexInfo>(nullptr);
  }

  VertexInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VertexInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VertexInfo& from);
  void MergeFrom(const VertexInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.VertexInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCompanyIdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 company_id = 2;
  void clear_company_id();
  ::PROTOBUF_NAMESPACE_ID::int32 company_id() const;
  void set_company_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_company_id() const;
  void _internal_set_company_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:serialization.VertexInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 company_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class EdgeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.EdgeInfo) */ {
 public:
  EdgeInfo();
  virtual ~EdgeInfo();

  EdgeInfo(const EdgeInfo& from);
  EdgeInfo(EdgeInfo&& from) noexcept
    : EdgeInfo() {
    *this = ::std::move(from);
  }

  inline EdgeInfo& operator=(const EdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeInfo& operator=(EdgeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EdgeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EdgeInfo* internal_default_instance() {
    return reinterpret_cast<const EdgeInfo*>(
               &_EdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EdgeInfo& a, EdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EdgeInfo* New() const final {
    return CreateMaybeMessage<EdgeInfo>(nullptr);
  }

  EdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EdgeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EdgeInfo& from);
  void MergeFrom(const EdgeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.EdgeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusNameFieldNumber = 2,
    kStopFromFieldNumber = 5,
    kCompanyNameFieldNumber = 7,
    kCompanyDisplayNameFieldNumber = 8,
    kBusStartStopIdxFieldNumber = 3,
    kTypeFieldNumber = 1,
    kCompanyIdFieldNumber = 6,
    kBusFinishStopIdxFieldNumber = 4,
  };
  // string bus_name = 2;
  void clear_bus_name();
  const std::string& bus_name() const;
  void set_bus_name(const std::string& value);
  void set_bus_name(std::string&& value);
  void set_bus_name(const char* value);
  void set_bus_name(const char* value, size_t size);
  std::string* mutable_bus_name();
  std::string* release_bus_name();
  void set_allocated_bus_name(std::string* bus_name);
  private:
  const std::string& _internal_bus_name() const;
  void _internal_set_bus_name(const std::string& value);
  std::string* _internal_mutable_bus_name();
  public:

  // string stop_from = 5;
  void clear_stop_from();
  const std::string& stop_from() const;
  void set_stop_from(const std::string& value);
  void set_stop_from(std::string&& value);
  void set_stop_from(const char* value);
  void set_stop_from(const char* value, size_t size);
  std::string* mutable_stop_from();
  std::string* release_stop_from();
  void set_allocated_stop_from(std::string* stop_from);
  private:
  const std::string& _internal_stop_from() const;
  void _internal_set_stop_from(const std::string& value);
  std::string* _internal_mutable_stop_from();
  public:

  // string company_name = 7;
  void clear_company_name();
  const std::string& company_name() const;
  void set_company_name(const std::string& value);
  void set_company_name(std::string&& value);
  void set_company_name(const char* value);
  void set_company_name(const char* value, size_t size);
  std::string* mutable_company_name();
  std::string* release_company_name();
  void set_allocated_company_name(std::string* company_name);
  private:
  const std::string& _internal_company_name() const;
  void _internal_set_company_name(const std::string& value);
  std::string* _internal_mutable_company_name();
  public:

  // string company_display_name = 8;
  void clear_company_display_name();
  const std::string& company_display_name() const;
  void set_company_display_name(const std::string& value);
  void set_company_display_name(std::string&& value);
  void set_company_display_name(const char* value);
  void set_company_display_name(const char* value, size_t size);
  std::string* mutable_company_display_name();
  std::string* release_company_display_name();
  void set_allocated_company_display_name(std::string* company_display_name);
  private:
  const std::string& _internal_company_display_name() const;
  void _internal_set_company_display_name(const std::string& value);
  std::string* _internal_mutable_company_display_name();
  public:

  // uint64 bus_start_stop_idx = 3;
  void clear_bus_start_stop_idx();
  ::PROTOBUF_NAMESPACE_ID::uint64 bus_start_stop_idx() const;
  void set_bus_start_stop_idx(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bus_start_stop_idx() const;
  void _internal_set_bus_start_stop_idx(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .serialization.EdgeInfoType type = 1;
  void clear_type();
  ::serialization::EdgeInfoType type() const;
  void set_type(::serialization::EdgeInfoType value);
  private:
  ::serialization::EdgeInfoType _internal_type() const;
  void _internal_set_type(::serialization::EdgeInfoType value);
  public:

  // int32 company_id = 6;
  void clear_company_id();
  ::PROTOBUF_NAMESPACE_ID::int32 company_id() const;
  void set_company_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_company_id() const;
  void _internal_set_company_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 bus_finish_stop_idx = 4;
  void clear_bus_finish_stop_idx();
  ::PROTOBUF_NAMESPACE_ID::uint64 bus_finish_stop_idx() const;
  void set_bus_finish_stop_idx(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bus_finish_stop_idx() const;
  void _internal_set_bus_finish_stop_idx(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:serialization.EdgeInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bus_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_display_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bus_start_stop_idx_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 company_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bus_finish_stop_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class RouteInternalData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.RouteInternalData) */ {
 public:
  RouteInternalData();
  virtual ~RouteInternalData();

  RouteInternalData(const RouteInternalData& from);
  RouteInternalData(RouteInternalData&& from) noexcept
    : RouteInternalData() {
    *this = ::std::move(from);
  }

  inline RouteInternalData& operator=(const RouteInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteInternalData& operator=(RouteInternalData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteInternalData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteInternalData* internal_default_instance() {
    return reinterpret_cast<const RouteInternalData*>(
               &_RouteInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RouteInternalData& a, RouteInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteInternalData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteInternalData* New() const final {
    return CreateMaybeMessage<RouteInternalData>(nullptr);
  }

  RouteInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteInternalData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteInternalData& from);
  void MergeFrom(const RouteInternalData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteInternalData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.RouteInternalData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 2,
    kPrevEdgeIdFieldNumber = 4,
    kHasValueFieldNumber = 1,
    kHasPrevEdgeFieldNumber = 3,
  };
  // double weight = 2;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // uint64 prev_edge_id = 4;
  void clear_prev_edge_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 prev_edge_id() const;
  void set_prev_edge_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prev_edge_id() const;
  void _internal_set_prev_edge_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool has_value = 1;
  void clear_has_value();
  bool has_value() const;
  void set_has_value(bool value);
  private:
  bool _internal_has_value() const;
  void _internal_set_has_value(bool value);
  public:

  // bool has_prev_edge = 3;
  void clear_has_prev_edge();
  bool has_prev_edge() const;
  void set_has_prev_edge(bool value);
  private:
  bool _internal_has_prev_edge() const;
  void _internal_set_has_prev_edge(bool value);
  public:

  // @@protoc_insertion_point(class_scope:serialization.RouteInternalData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double weight_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prev_edge_id_;
  bool has_value_;
  bool has_prev_edge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class RouteInternalDataVector :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.RouteInternalDataVector) */ {
 public:
  RouteInternalDataVector();
  virtual ~RouteInternalDataVector();

  RouteInternalDataVector(const RouteInternalDataVector& from);
  RouteInternalDataVector(RouteInternalDataVector&& from) noexcept
    : RouteInternalDataVector() {
    *this = ::std::move(from);
  }

  inline RouteInternalDataVector& operator=(const RouteInternalDataVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteInternalDataVector& operator=(RouteInternalDataVector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteInternalDataVector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteInternalDataVector* internal_default_instance() {
    return reinterpret_cast<const RouteInternalDataVector*>(
               &_RouteInternalDataVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RouteInternalDataVector& a, RouteInternalDataVector& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteInternalDataVector* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteInternalDataVector* New() const final {
    return CreateMaybeMessage<RouteInternalDataVector>(nullptr);
  }

  RouteInternalDataVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteInternalDataVector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteInternalDataVector& from);
  void MergeFrom(const RouteInternalDataVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteInternalDataVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.RouteInternalDataVector";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorDataFieldNumber = 1,
  };
  // repeated .serialization.RouteInternalData vector_data = 1;
  int vector_data_size() const;
  private:
  int _internal_vector_data_size() const;
  public:
  void clear_vector_data();
  ::serialization::RouteInternalData* mutable_vector_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::RouteInternalData >*
      mutable_vector_data();
  private:
  const ::serialization::RouteInternalData& _internal_vector_data(int index) const;
  ::serialization::RouteInternalData* _internal_add_vector_data();
  public:
  const ::serialization::RouteInternalData& vector_data(int index) const;
  ::serialization::RouteInternalData* add_vector_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::RouteInternalData >&
      vector_data() const;

  // @@protoc_insertion_point(class_scope:serialization.RouteInternalDataVector)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::RouteInternalData > vector_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class RouterImpl :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.RouterImpl) */ {
 public:
  RouterImpl();
  virtual ~RouterImpl();

  RouterImpl(const RouterImpl& from);
  RouterImpl(RouterImpl&& from) noexcept
    : RouterImpl() {
    *this = ::std::move(from);
  }

  inline RouterImpl& operator=(const RouterImpl& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouterImpl& operator=(RouterImpl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouterImpl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouterImpl* internal_default_instance() {
    return reinterpret_cast<const RouterImpl*>(
               &_RouterImpl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RouterImpl& a, RouterImpl& b) {
    a.Swap(&b);
  }
  inline void Swap(RouterImpl* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouterImpl* New() const final {
    return CreateMaybeMessage<RouterImpl>(nullptr);
  }

  RouterImpl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouterImpl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouterImpl& from);
  void MergeFrom(const RouterImpl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouterImpl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.RouterImpl";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorsFieldNumber = 1,
  };
  // repeated .serialization.RouteInternalDataVector vectors = 1;
  int vectors_size() const;
  private:
  int _internal_vectors_size() const;
  public:
  void clear_vectors();
  ::serialization::RouteInternalDataVector* mutable_vectors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::RouteInternalDataVector >*
      mutable_vectors();
  private:
  const ::serialization::RouteInternalDataVector& _internal_vectors(int index) const;
  ::serialization::RouteInternalDataVector* _internal_add_vectors();
  public:
  const ::serialization::RouteInternalDataVector& vectors(int index) const;
  ::serialization::RouteInternalDataVector* add_vectors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::RouteInternalDataVector >&
      vectors() const;

  // @@protoc_insertion_point(class_scope:serialization.RouterImpl)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::RouteInternalDataVector > vectors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class Router_CompaniesVerticiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Router_CompaniesVerticiesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Router_CompaniesVerticiesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    0 > SuperType;
  Router_CompaniesVerticiesEntry_DoNotUse();
  Router_CompaniesVerticiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Router_CompaniesVerticiesEntry_DoNotUse& other);
  static const Router_CompaniesVerticiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Router_CompaniesVerticiesEntry_DoNotUse*>(&_Router_CompaniesVerticiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[10];
  }

  public:
};

// -------------------------------------------------------------------

class Router :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Router) */ {
 public:
  Router();
  virtual ~Router();

  Router(const Router& from);
  Router(Router&& from) noexcept
    : Router() {
    *this = ::std::move(from);
  }

  inline Router& operator=(const Router& from) {
    CopyFrom(from);
    return *this;
  }
  inline Router& operator=(Router&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Router& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Router* internal_default_instance() {
    return reinterpret_cast<const Router*>(
               &_Router_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Router& a, Router& b) {
    a.Swap(&b);
  }
  inline void Swap(Router* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Router* New() const final {
    return CreateMaybeMessage<Router>(nullptr);
  }

  Router* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Router>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Router& from);
  void MergeFrom(const Router& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Router* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Router";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStopVertexIdsFieldNumber = 5,
    kVertexInfosFieldNumber = 6,
    kEdgeInfosFieldNumber = 7,
    kCompaniesVerticiesFieldNumber = 9,
    kGraphFieldNumber = 3,
    kRouteImplFieldNumber = 4,
    kBusVelocityFieldNumber = 2,
    kPedestrianVelocityFieldNumber = 8,
    kBusWaitTimeFieldNumber = 1,
  };
  // repeated .serialization.StopVertexIds stop_vertex_ids = 5;
  int stop_vertex_ids_size() const;
  private:
  int _internal_stop_vertex_ids_size() const;
  public:
  void clear_stop_vertex_ids();
  ::serialization::StopVertexIds* mutable_stop_vertex_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::StopVertexIds >*
      mutable_stop_vertex_ids();
  private:
  const ::serialization::StopVertexIds& _internal_stop_vertex_ids(int index) const;
  ::serialization::StopVertexIds* _internal_add_stop_vertex_ids();
  public:
  const ::serialization::StopVertexIds& stop_vertex_ids(int index) const;
  ::serialization::StopVertexIds* add_stop_vertex_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::StopVertexIds >&
      stop_vertex_ids() const;

  // repeated .serialization.VertexInfo vertex_infos = 6;
  int vertex_infos_size() const;
  private:
  int _internal_vertex_infos_size() const;
  public:
  void clear_vertex_infos();
  ::serialization::VertexInfo* mutable_vertex_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::VertexInfo >*
      mutable_vertex_infos();
  private:
  const ::serialization::VertexInfo& _internal_vertex_infos(int index) const;
  ::serialization::VertexInfo* _internal_add_vertex_infos();
  public:
  const ::serialization::VertexInfo& vertex_infos(int index) const;
  ::serialization::VertexInfo* add_vertex_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::VertexInfo >&
      vertex_infos() const;

  // repeated .serialization.EdgeInfo edge_infos = 7;
  int edge_infos_size() const;
  private:
  int _internal_edge_infos_size() const;
  public:
  void clear_edge_infos();
  ::serialization::EdgeInfo* mutable_edge_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::EdgeInfo >*
      mutable_edge_infos();
  private:
  const ::serialization::EdgeInfo& _internal_edge_infos(int index) const;
  ::serialization::EdgeInfo* _internal_add_edge_infos();
  public:
  const ::serialization::EdgeInfo& edge_infos(int index) const;
  ::serialization::EdgeInfo* add_edge_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::EdgeInfo >&
      edge_infos() const;

  // map<int32, uint64> companies_verticies = 9;
  int companies_verticies_size() const;
  private:
  int _internal_companies_verticies_size() const;
  public:
  void clear_companies_verticies();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_companies_verticies() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_companies_verticies();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint64 >&
      companies_verticies() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_companies_verticies();

  // .serialization.Graph graph = 3;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::serialization::Graph& graph() const;
  ::serialization::Graph* release_graph();
  ::serialization::Graph* mutable_graph();
  void set_allocated_graph(::serialization::Graph* graph);
  private:
  const ::serialization::Graph& _internal_graph() const;
  ::serialization::Graph* _internal_mutable_graph();
  public:

  // .serialization.RouterImpl route_impl = 4;
  bool has_route_impl() const;
  private:
  bool _internal_has_route_impl() const;
  public:
  void clear_route_impl();
  const ::serialization::RouterImpl& route_impl() const;
  ::serialization::RouterImpl* release_route_impl();
  ::serialization::RouterImpl* mutable_route_impl();
  void set_allocated_route_impl(::serialization::RouterImpl* route_impl);
  private:
  const ::serialization::RouterImpl& _internal_route_impl() const;
  ::serialization::RouterImpl* _internal_mutable_route_impl();
  public:

  // double bus_velocity = 2;
  void clear_bus_velocity();
  double bus_velocity() const;
  void set_bus_velocity(double value);
  private:
  double _internal_bus_velocity() const;
  void _internal_set_bus_velocity(double value);
  public:

  // double pedestrian_velocity = 8;
  void clear_pedestrian_velocity();
  double pedestrian_velocity() const;
  void set_pedestrian_velocity(double value);
  private:
  double _internal_pedestrian_velocity() const;
  void _internal_set_pedestrian_velocity(double value);
  public:

  // int32 bus_wait_time = 1;
  void clear_bus_wait_time();
  ::PROTOBUF_NAMESPACE_ID::int32 bus_wait_time() const;
  void set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bus_wait_time() const;
  void _internal_set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:serialization.Router)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::StopVertexIds > stop_vertex_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::VertexInfo > vertex_infos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::EdgeInfo > edge_infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Router_CompaniesVerticiesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      0 > companies_verticies_;
  ::serialization::Graph* graph_;
  ::serialization::RouterImpl* route_impl_;
  double bus_velocity_;
  double pedestrian_velocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 bus_wait_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class Color :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Color) */ {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(nullptr);
  }

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Color";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorStringFieldNumber = 2,
    kTypeFieldNumber = 1,
    kRedFieldNumber = 3,
    kGreenFieldNumber = 4,
    kBlueFieldNumber = 5,
    kOpacityFieldNumber = 6,
  };
  // string color_string = 2;
  void clear_color_string();
  const std::string& color_string() const;
  void set_color_string(const std::string& value);
  void set_color_string(std::string&& value);
  void set_color_string(const char* value);
  void set_color_string(const char* value, size_t size);
  std::string* mutable_color_string();
  std::string* release_color_string();
  void set_allocated_color_string(std::string* color_string);
  private:
  const std::string& _internal_color_string() const;
  void _internal_set_color_string(const std::string& value);
  std::string* _internal_mutable_color_string();
  public:

  // .serialization.ColorType type = 1;
  void clear_type();
  ::serialization::ColorType type() const;
  void set_type(::serialization::ColorType value);
  private:
  ::serialization::ColorType _internal_type() const;
  void _internal_set_type(::serialization::ColorType value);
  public:

  // uint32 red = 3;
  void clear_red();
  ::PROTOBUF_NAMESPACE_ID::uint32 red() const;
  void set_red(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_red() const;
  void _internal_set_red(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 green = 4;
  void clear_green();
  ::PROTOBUF_NAMESPACE_ID::uint32 green() const;
  void set_green(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_green() const;
  void _internal_set_green(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 blue = 5;
  void clear_blue();
  ::PROTOBUF_NAMESPACE_ID::uint32 blue() const;
  void set_blue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blue() const;
  void _internal_set_blue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double opacity = 6;
  void clear_opacity();
  double opacity() const;
  void set_opacity(double value);
  private:
  double _internal_opacity() const;
  void _internal_set_opacity(double value);
  public:

  // @@protoc_insertion_point(class_scope:serialization.Color)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_string_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 red_;
  ::PROTOBUF_NAMESPACE_ID::uint32 green_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blue_;
  double opacity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class Point :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Point";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:serialization.Point)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class RenderSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.RenderSettings) */ {
 public:
  RenderSettings();
  virtual ~RenderSettings();

  RenderSettings(const RenderSettings& from);
  RenderSettings(RenderSettings&& from) noexcept
    : RenderSettings() {
    *this = ::std::move(from);
  }

  inline RenderSettings& operator=(const RenderSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderSettings& operator=(RenderSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenderSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenderSettings* internal_default_instance() {
    return reinterpret_cast<const RenderSettings*>(
               &_RenderSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RenderSettings& a, RenderSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RenderSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenderSettings* New() const final {
    return CreateMaybeMessage<RenderSettings>(nullptr);
  }

  RenderSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenderSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenderSettings& from);
  void MergeFrom(const RenderSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.RenderSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaletteFieldNumber = 5,
    kLayersFieldNumber = 14,
    kUnderlayerColorFieldNumber = 7,
    kBusLabelOffsetFieldNumber = 10,
    kStopLabelOffsetFieldNumber = 12,
    kMaxWidthFieldNumber = 1,
    kMaxHeightFieldNumber = 2,
    kPaddingFieldNumber = 3,
    kOuterMarginFieldNumber = 4,
    kLineWidthFieldNumber = 6,
    kUnderlayerWidthFieldNumber = 8,
    kStopRadiusFieldNumber = 9,
    kBusLabelFontSizeFieldNumber = 11,
    kStopLabelFontSizeFieldNumber = 13,
    kCompanyRadiusFieldNumber = 15,
    kCompanyLineWidthFieldNumber = 16,
  };
  // repeated .serialization.Color palette = 5;
  int palette_size() const;
  private:
  int _internal_palette_size() const;
  public:
  void clear_palette();
  ::serialization::Color* mutable_palette(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Color >*
      mutable_palette();
  private:
  const ::serialization::Color& _internal_palette(int index) const;
  ::serialization::Color* _internal_add_palette();
  public:
  const ::serialization::Color& palette(int index) const;
  ::serialization::Color* add_palette();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Color >&
      palette() const;

  // repeated string layers = 14;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  const std::string& layers(int index) const;
  std::string* mutable_layers(int index);
  void set_layers(int index, const std::string& value);
  void set_layers(int index, std::string&& value);
  void set_layers(int index, const char* value);
  void set_layers(int index, const char* value, size_t size);
  std::string* add_layers();
  void add_layers(const std::string& value);
  void add_layers(std::string&& value);
  void add_layers(const char* value);
  void add_layers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& layers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_layers();
  private:
  const std::string& _internal_layers(int index) const;
  std::string* _internal_add_layers();
  public:

  // .serialization.Color underlayer_color = 7;
  bool has_underlayer_color() const;
  private:
  bool _internal_has_underlayer_color() const;
  public:
  void clear_underlayer_color();
  const ::serialization::Color& underlayer_color() const;
  ::serialization::Color* release_underlayer_color();
  ::serialization::Color* mutable_underlayer_color();
  void set_allocated_underlayer_color(::serialization::Color* underlayer_color);
  private:
  const ::serialization::Color& _internal_underlayer_color() const;
  ::serialization::Color* _internal_mutable_underlayer_color();
  public:

  // .serialization.Point bus_label_offset = 10;
  bool has_bus_label_offset() const;
  private:
  bool _internal_has_bus_label_offset() const;
  public:
  void clear_bus_label_offset();
  const ::serialization::Point& bus_label_offset() const;
  ::serialization::Point* release_bus_label_offset();
  ::serialization::Point* mutable_bus_label_offset();
  void set_allocated_bus_label_offset(::serialization::Point* bus_label_offset);
  private:
  const ::serialization::Point& _internal_bus_label_offset() const;
  ::serialization::Point* _internal_mutable_bus_label_offset();
  public:

  // .serialization.Point stop_label_offset = 12;
  bool has_stop_label_offset() const;
  private:
  bool _internal_has_stop_label_offset() const;
  public:
  void clear_stop_label_offset();
  const ::serialization::Point& stop_label_offset() const;
  ::serialization::Point* release_stop_label_offset();
  ::serialization::Point* mutable_stop_label_offset();
  void set_allocated_stop_label_offset(::serialization::Point* stop_label_offset);
  private:
  const ::serialization::Point& _internal_stop_label_offset() const;
  ::serialization::Point* _internal_mutable_stop_label_offset();
  public:

  // double max_width = 1;
  void clear_max_width();
  double max_width() const;
  void set_max_width(double value);
  private:
  double _internal_max_width() const;
  void _internal_set_max_width(double value);
  public:

  // double max_height = 2;
  void clear_max_height();
  double max_height() const;
  void set_max_height(double value);
  private:
  double _internal_max_height() const;
  void _internal_set_max_height(double value);
  public:

  // double padding = 3;
  void clear_padding();
  double padding() const;
  void set_padding(double value);
  private:
  double _internal_padding() const;
  void _internal_set_padding(double value);
  public:

  // double outer_margin = 4;
  void clear_outer_margin();
  double outer_margin() const;
  void set_outer_margin(double value);
  private:
  double _internal_outer_margin() const;
  void _internal_set_outer_margin(double value);
  public:

  // double line_width = 6;
  void clear_line_width();
  double line_width() const;
  void set_line_width(double value);
  private:
  double _internal_line_width() const;
  void _internal_set_line_width(double value);
  public:

  // double underlayer_width = 8;
  void clear_underlayer_width();
  double underlayer_width() const;
  void set_underlayer_width(double value);
  private:
  double _internal_underlayer_width() const;
  void _internal_set_underlayer_width(double value);
  public:

  // double stop_radius = 9;
  void clear_stop_radius();
  double stop_radius() const;
  void set_stop_radius(double value);
  private:
  double _internal_stop_radius() const;
  void _internal_set_stop_radius(double value);
  public:

  // int32 bus_label_font_size = 11;
  void clear_bus_label_font_size();
  ::PROTOBUF_NAMESPACE_ID::int32 bus_label_font_size() const;
  void set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bus_label_font_size() const;
  void _internal_set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stop_label_font_size = 13;
  void clear_stop_label_font_size();
  ::PROTOBUF_NAMESPACE_ID::int32 stop_label_font_size() const;
  void set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stop_label_font_size() const;
  void _internal_set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double company_radius = 15;
  void clear_company_radius();
  double company_radius() const;
  void set_company_radius(double value);
  private:
  double _internal_company_radius() const;
  void _internal_set_company_radius(double value);
  public:

  // double company_line_width = 16;
  void clear_company_line_width();
  double company_line_width() const;
  void set_company_line_width(double value);
  private:
  double _internal_company_line_width() const;
  void _internal_set_company_line_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:serialization.RenderSettings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Color > palette_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> layers_;
  ::serialization::Color* underlayer_color_;
  ::serialization::Point* bus_label_offset_;
  ::serialization::Point* stop_label_offset_;
  double max_width_;
  double max_height_;
  double padding_;
  double outer_margin_;
  double line_width_;
  double underlayer_width_;
  double stop_radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 bus_label_font_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 stop_label_font_size_;
  double company_radius_;
  double company_line_width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class Bus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Bus) */ {
 public:
  Bus();
  virtual ~Bus();

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bus* New() const final {
    return CreateMaybeMessage<Bus>(nullptr);
  }

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bus& from);
  void MergeFrom(const Bus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Bus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kEndpointsFieldNumber = 2,
  };
  // repeated string stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  const std::string& stops(int index) const;
  std::string* mutable_stops(int index);
  void set_stops(int index, const std::string& value);
  void set_stops(int index, std::string&& value);
  void set_stops(int index, const char* value);
  void set_stops(int index, const char* value, size_t size);
  std::string* add_stops();
  void add_stops(const std::string& value);
  void add_stops(std::string&& value);
  void add_stops(const char* value);
  void add_stops(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stops();
  private:
  const std::string& _internal_stops(int index) const;
  std::string* _internal_add_stops();
  public:

  // repeated string endpoints = 2;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  const std::string& endpoints(int index) const;
  std::string* mutable_endpoints(int index);
  void set_endpoints(int index, const std::string& value);
  void set_endpoints(int index, std::string&& value);
  void set_endpoints(int index, const char* value);
  void set_endpoints(int index, const char* value, size_t size);
  std::string* add_endpoints();
  void add_endpoints(const std::string& value);
  void add_endpoints(std::string&& value);
  void add_endpoints(const char* value);
  void add_endpoints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& endpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_endpoints();
  private:
  const std::string& _internal_endpoints(int index) const;
  std::string* _internal_add_endpoints();
  public:

  // @@protoc_insertion_point(class_scope:serialization.Bus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> endpoints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class Renderer_StopsCoordsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Renderer_StopsCoordsEntry_DoNotUse, 
    std::string, ::serialization::Point,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Renderer_StopsCoordsEntry_DoNotUse, 
    std::string, ::serialization::Point,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Renderer_StopsCoordsEntry_DoNotUse();
  Renderer_StopsCoordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Renderer_StopsCoordsEntry_DoNotUse& other);
  static const Renderer_StopsCoordsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Renderer_StopsCoordsEntry_DoNotUse*>(&_Renderer_StopsCoordsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "serialization.Renderer.StopsCoordsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[16];
  }

  public:
};

// -------------------------------------------------------------------

class Renderer_BusColorsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Renderer_BusColorsEntry_DoNotUse, 
    std::string, ::serialization::Color,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Renderer_BusColorsEntry_DoNotUse, 
    std::string, ::serialization::Color,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Renderer_BusColorsEntry_DoNotUse();
  Renderer_BusColorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Renderer_BusColorsEntry_DoNotUse& other);
  static const Renderer_BusColorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Renderer_BusColorsEntry_DoNotUse*>(&_Renderer_BusColorsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "serialization.Renderer.BusColorsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[17];
  }

  public:
};

// -------------------------------------------------------------------

class Renderer_BusesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Renderer_BusesEntry_DoNotUse, 
    std::string, ::serialization::Bus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Renderer_BusesEntry_DoNotUse, 
    std::string, ::serialization::Bus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Renderer_BusesEntry_DoNotUse();
  Renderer_BusesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Renderer_BusesEntry_DoNotUse& other);
  static const Renderer_BusesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Renderer_BusesEntry_DoNotUse*>(&_Renderer_BusesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "serialization.Renderer.BusesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[18];
  }

  public:
};

// -------------------------------------------------------------------

class Renderer_CompanyCoordsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Renderer_CompanyCoordsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::serialization::Point,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Renderer_CompanyCoordsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::serialization::Point,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Renderer_CompanyCoordsEntry_DoNotUse();
  Renderer_CompanyCoordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Renderer_CompanyCoordsEntry_DoNotUse& other);
  static const Renderer_CompanyCoordsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Renderer_CompanyCoordsEntry_DoNotUse*>(&_Renderer_CompanyCoordsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[19];
  }

  public:
};

// -------------------------------------------------------------------

class Renderer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Renderer) */ {
 public:
  Renderer();
  virtual ~Renderer();

  Renderer(const Renderer& from);
  Renderer(Renderer&& from) noexcept
    : Renderer() {
    *this = ::std::move(from);
  }

  inline Renderer& operator=(const Renderer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Renderer& operator=(Renderer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Renderer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Renderer* internal_default_instance() {
    return reinterpret_cast<const Renderer*>(
               &_Renderer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Renderer& a, Renderer& b) {
    a.Swap(&b);
  }
  inline void Swap(Renderer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Renderer* New() const final {
    return CreateMaybeMessage<Renderer>(nullptr);
  }

  Renderer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Renderer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Renderer& from);
  void MergeFrom(const Renderer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Renderer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Renderer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStopsCoordsFieldNumber = 2,
    kBusColorsFieldNumber = 3,
    kBusesFieldNumber = 4,
    kCompanyCoordsFieldNumber = 5,
    kSettingsFieldNumber = 1,
  };
  // map<string, .serialization.Point> stops_coords = 2;
  int stops_coords_size() const;
  private:
  int _internal_stops_coords_size() const;
  public:
  void clear_stops_coords();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Point >&
      _internal_stops_coords() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Point >*
      _internal_mutable_stops_coords();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Point >&
      stops_coords() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Point >*
      mutable_stops_coords();

  // map<string, .serialization.Color> bus_colors = 3;
  int bus_colors_size() const;
  private:
  int _internal_bus_colors_size() const;
  public:
  void clear_bus_colors();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Color >&
      _internal_bus_colors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Color >*
      _internal_mutable_bus_colors();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Color >&
      bus_colors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Color >*
      mutable_bus_colors();

  // map<string, .serialization.Bus> buses = 4;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Bus >&
      _internal_buses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Bus >*
      _internal_mutable_buses();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Bus >&
      buses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Bus >*
      mutable_buses();

  // map<int32, .serialization.Point> company_coords = 5;
  int company_coords_size() const;
  private:
  int _internal_company_coords_size() const;
  public:
  void clear_company_coords();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::serialization::Point >&
      _internal_company_coords() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::serialization::Point >*
      _internal_mutable_company_coords();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::serialization::Point >&
      company_coords() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::serialization::Point >*
      mutable_company_coords();

  // .serialization.RenderSettings settings = 1;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::serialization::RenderSettings& settings() const;
  ::serialization::RenderSettings* release_settings();
  ::serialization::RenderSettings* mutable_settings();
  void set_allocated_settings(::serialization::RenderSettings* settings);
  private:
  const ::serialization::RenderSettings& _internal_settings() const;
  ::serialization::RenderSettings* _internal_mutable_settings();
  public:

  // @@protoc_insertion_point(class_scope:serialization.Renderer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Renderer_StopsCoordsEntry_DoNotUse,
      std::string, ::serialization::Point,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > stops_coords_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Renderer_BusColorsEntry_DoNotUse,
      std::string, ::serialization::Color,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > bus_colors_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Renderer_BusesEntry_DoNotUse,
      std::string, ::serialization::Bus,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > buses_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Renderer_CompanyCoordsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::serialization::Point,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > company_coords_;
  ::serialization::RenderSettings* settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class NearbyStop :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.NearbyStop) */ {
 public:
  NearbyStop();
  virtual ~NearbyStop();

  NearbyStop(const NearbyStop& from);
  NearbyStop(NearbyStop&& from) noexcept
    : NearbyStop() {
    *this = ::std::move(from);
  }

  inline NearbyStop& operator=(const NearbyStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline NearbyStop& operator=(NearbyStop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NearbyStop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NearbyStop* internal_default_instance() {
    return reinterpret_cast<const NearbyStop*>(
               &_NearbyStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(NearbyStop& a, NearbyStop& b) {
    a.Swap(&b);
  }
  inline void Swap(NearbyStop* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NearbyStop* New() const final {
    return CreateMaybeMessage<NearbyStop>(nullptr);
  }

  NearbyStop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NearbyStop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NearbyStop& from);
  void MergeFrom(const NearbyStop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NearbyStop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.NearbyStop";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMetersFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 meters = 2;
  void clear_meters();
  ::PROTOBUF_NAMESPACE_ID::uint32 meters() const;
  void set_meters(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_meters() const;
  void _internal_set_meters(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:serialization.NearbyStop)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 meters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class Coords :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Coords) */ {
 public:
  Coords();
  virtual ~Coords();

  Coords(const Coords& from);
  Coords(Coords&& from) noexcept
    : Coords() {
    *this = ::std::move(from);
  }

  inline Coords& operator=(const Coords& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coords& operator=(Coords&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Coords& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coords* internal_default_instance() {
    return reinterpret_cast<const Coords*>(
               &_Coords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Coords& a, Coords& b) {
    a.Swap(&b);
  }
  inline void Swap(Coords* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coords* New() const final {
    return CreateMaybeMessage<Coords>(nullptr);
  }

  Coords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Coords& from);
  void MergeFrom(const Coords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Coords";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLonFieldNumber = 2,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lon = 2;
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // @@protoc_insertion_point(class_scope:serialization.Coords)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double lat_;
  double lon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class AddressComponent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.AddressComponent) */ {
 public:
  AddressComponent();
  virtual ~AddressComponent();

  AddressComponent(const AddressComponent& from);
  AddressComponent(AddressComponent&& from) noexcept
    : AddressComponent() {
    *this = ::std::move(from);
  }

  inline AddressComponent& operator=(const AddressComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressComponent& operator=(AddressComponent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddressComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressComponent* internal_default_instance() {
    return reinterpret_cast<const AddressComponent*>(
               &_AddressComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(AddressComponent& a, AddressComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressComponent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddressComponent* New() const final {
    return CreateMaybeMessage<AddressComponent>(nullptr);
  }

  AddressComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddressComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddressComponent& from);
  void MergeFrom(const AddressComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.AddressComponent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AddressComponent_Type Type;
  static constexpr Type COUNTRY =
    AddressComponent_Type_COUNTRY;
  static constexpr Type REGION =
    AddressComponent_Type_REGION;
  static constexpr Type CITY =
    AddressComponent_Type_CITY;
  static constexpr Type STREET =
    AddressComponent_Type_STREET;
  static constexpr Type HOUSE =
    AddressComponent_Type_HOUSE;
  static inline bool Type_IsValid(int value) {
    return AddressComponent_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    AddressComponent_Type_Type_MIN;
  static constexpr Type Type_MAX =
    AddressComponent_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    AddressComponent_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return AddressComponent_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return AddressComponent_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return AddressComponent_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:serialization.AddressComponent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class Address :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Address* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(nullptr);
  }

  Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Address";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentsFieldNumber = 2,
    kFormattedFieldNumber = 1,
    kCommentFieldNumber = 4,
    kCoordsFieldNumber = 3,
  };
  // repeated .serialization.AddressComponent components = 2;
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  ::serialization::AddressComponent* mutable_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::AddressComponent >*
      mutable_components();
  private:
  const ::serialization::AddressComponent& _internal_components(int index) const;
  ::serialization::AddressComponent* _internal_add_components();
  public:
  const ::serialization::AddressComponent& components(int index) const;
  ::serialization::AddressComponent* add_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::AddressComponent >&
      components() const;

  // string formatted = 1;
  void clear_formatted();
  const std::string& formatted() const;
  void set_formatted(const std::string& value);
  void set_formatted(std::string&& value);
  void set_formatted(const char* value);
  void set_formatted(const char* value, size_t size);
  std::string* mutable_formatted();
  std::string* release_formatted();
  void set_allocated_formatted(std::string* formatted);
  private:
  const std::string& _internal_formatted() const;
  void _internal_set_formatted(const std::string& value);
  std::string* _internal_mutable_formatted();
  public:

  // string comment = 4;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // .serialization.Coords coords = 3;
  bool has_coords() const;
  private:
  bool _internal_has_coords() const;
  public:
  void clear_coords();
  const ::serialization::Coords& coords() const;
  ::serialization::Coords* release_coords();
  ::serialization::Coords* mutable_coords();
  void set_allocated_coords(::serialization::Coords* coords);
  private:
  const ::serialization::Coords& _internal_coords() const;
  ::serialization::Coords* _internal_mutable_coords();
  public:

  // @@protoc_insertion_point(class_scope:serialization.Address)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::AddressComponent > components_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr formatted_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::serialization::Coords* coords_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class Name :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Name) */ {
 public:
  Name();
  virtual ~Name();

  Name(const Name& from);
  Name(Name&& from) noexcept
    : Name() {
    *this = ::std::move(from);
  }

  inline Name& operator=(const Name& from) {
    CopyFrom(from);
    return *this;
  }
  inline Name& operator=(Name&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Name& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Name* internal_default_instance() {
    return reinterpret_cast<const Name*>(
               &_Name_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Name& a, Name& b) {
    a.Swap(&b);
  }
  inline void Swap(Name* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Name* New() const final {
    return CreateMaybeMessage<Name>(nullptr);
  }

  Name* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Name>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Name& from);
  void MergeFrom(const Name& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Name* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Name";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Name_Type Type;
  static constexpr Type MAIN =
    Name_Type_MAIN;
  static constexpr Type SYNONYM =
    Name_Type_SYNONYM;
  static constexpr Type SHORT =
    Name_Type_SHORT;
  static inline bool Type_IsValid(int value) {
    return Name_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Name_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Name_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Name_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Name_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Name_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Name_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .serialization.Name.Type type = 2;
  void clear_type();
  ::serialization::Name_Type type() const;
  void set_type(::serialization::Name_Type value);
  private:
  ::serialization::Name_Type _internal_type() const;
  void _internal_set_type(::serialization::Name_Type value);
  public:

  // @@protoc_insertion_point(class_scope:serialization.Name)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class Phone :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Phone) */ {
 public:
  Phone();
  virtual ~Phone();

  Phone(const Phone& from);
  Phone(Phone&& from) noexcept
    : Phone() {
    *this = ::std::move(from);
  }

  inline Phone& operator=(const Phone& from) {
    CopyFrom(from);
    return *this;
  }
  inline Phone& operator=(Phone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Phone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Phone* internal_default_instance() {
    return reinterpret_cast<const Phone*>(
               &_Phone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Phone& a, Phone& b) {
    a.Swap(&b);
  }
  inline void Swap(Phone* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Phone* New() const final {
    return CreateMaybeMessage<Phone>(nullptr);
  }

  Phone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Phone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Phone& from);
  void MergeFrom(const Phone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Phone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Phone";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Phone_Type Type;
  static constexpr Type PHONE =
    Phone_Type_PHONE;
  static constexpr Type FAX =
    Phone_Type_FAX;
  static inline bool Type_IsValid(int value) {
    return Phone_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Phone_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Phone_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Phone_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Phone_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Phone_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Phone_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFormattedFieldNumber = 1,
    kCountryCodeFieldNumber = 3,
    kLocalCodeFieldNumber = 4,
    kNumberFieldNumber = 5,
    kExtensionFieldNumber = 6,
    kDescriptionFieldNumber = 7,
    kTypeFieldNumber = 2,
  };
  // string formatted = 1;
  void clear_formatted();
  const std::string& formatted() const;
  void set_formatted(const std::string& value);
  void set_formatted(std::string&& value);
  void set_formatted(const char* value);
  void set_formatted(const char* value, size_t size);
  std::string* mutable_formatted();
  std::string* release_formatted();
  void set_allocated_formatted(std::string* formatted);
  private:
  const std::string& _internal_formatted() const;
  void _internal_set_formatted(const std::string& value);
  std::string* _internal_mutable_formatted();
  public:

  // string country_code = 3;
  void clear_country_code();
  const std::string& country_code() const;
  void set_country_code(const std::string& value);
  void set_country_code(std::string&& value);
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  std::string* mutable_country_code();
  std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // string local_code = 4;
  void clear_local_code();
  const std::string& local_code() const;
  void set_local_code(const std::string& value);
  void set_local_code(std::string&& value);
  void set_local_code(const char* value);
  void set_local_code(const char* value, size_t size);
  std::string* mutable_local_code();
  std::string* release_local_code();
  void set_allocated_local_code(std::string* local_code);
  private:
  const std::string& _internal_local_code() const;
  void _internal_set_local_code(const std::string& value);
  std::string* _internal_mutable_local_code();
  public:

  // string number = 5;
  void clear_number();
  const std::string& number() const;
  void set_number(const std::string& value);
  void set_number(std::string&& value);
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  std::string* mutable_number();
  std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // string extension = 6;
  void clear_extension();
  const std::string& extension() const;
  void set_extension(const std::string& value);
  void set_extension(std::string&& value);
  void set_extension(const char* value);
  void set_extension(const char* value, size_t size);
  std::string* mutable_extension();
  std::string* release_extension();
  void set_allocated_extension(std::string* extension);
  private:
  const std::string& _internal_extension() const;
  void _internal_set_extension(const std::string& value);
  std::string* _internal_mutable_extension();
  public:

  // string description = 7;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .serialization.Phone.Type type = 2;
  void clear_type();
  ::serialization::Phone_Type type() const;
  void set_type(::serialization::Phone_Type value);
  private:
  ::serialization::Phone_Type _internal_type() const;
  void _internal_set_type(::serialization::Phone_Type value);
  public:

  // @@protoc_insertion_point(class_scope:serialization.Phone)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr formatted_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extension_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class WorkingTimeInterval :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.WorkingTimeInterval) */ {
 public:
  WorkingTimeInterval();
  virtual ~WorkingTimeInterval();

  WorkingTimeInterval(const WorkingTimeInterval& from);
  WorkingTimeInterval(WorkingTimeInterval&& from) noexcept
    : WorkingTimeInterval() {
    *this = ::std::move(from);
  }

  inline WorkingTimeInterval& operator=(const WorkingTimeInterval& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkingTimeInterval& operator=(WorkingTimeInterval&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkingTimeInterval& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkingTimeInterval* internal_default_instance() {
    return reinterpret_cast<const WorkingTimeInterval*>(
               &_WorkingTimeInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(WorkingTimeInterval& a, WorkingTimeInterval& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkingTimeInterval* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkingTimeInterval* New() const final {
    return CreateMaybeMessage<WorkingTimeInterval>(nullptr);
  }

  WorkingTimeInterval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkingTimeInterval>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkingTimeInterval& from);
  void MergeFrom(const WorkingTimeInterval& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkingTimeInterval* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.WorkingTimeInterval";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef WorkingTimeInterval_Day Day;
  static constexpr Day EVERYDAY =
    WorkingTimeInterval_Day_EVERYDAY;
  static constexpr Day MONDAY =
    WorkingTimeInterval_Day_MONDAY;
  static constexpr Day TUESDAY =
    WorkingTimeInterval_Day_TUESDAY;
  static constexpr Day WEDNESDAY =
    WorkingTimeInterval_Day_WEDNESDAY;
  static constexpr Day THURSDAY =
    WorkingTimeInterval_Day_THURSDAY;
  static constexpr Day FRIDAY =
    WorkingTimeInterval_Day_FRIDAY;
  static constexpr Day SATURDAY =
    WorkingTimeInterval_Day_SATURDAY;
  static constexpr Day SUNDAY =
    WorkingTimeInterval_Day_SUNDAY;
  static inline bool Day_IsValid(int value) {
    return WorkingTimeInterval_Day_IsValid(value);
  }
  static constexpr Day Day_MIN =
    WorkingTimeInterval_Day_Day_MIN;
  static constexpr Day Day_MAX =
    WorkingTimeInterval_Day_Day_MAX;
  static constexpr int Day_ARRAYSIZE =
    WorkingTimeInterval_Day_Day_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Day_descriptor() {
    return WorkingTimeInterval_Day_descriptor();
  }
  template<typename T>
  static inline const std::string& Day_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Day>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Day_Name.");
    return WorkingTimeInterval_Day_Name(enum_t_value);
  }
  static inline bool Day_Parse(const std::string& name,
      Day* value) {
    return WorkingTimeInterval_Day_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDayFieldNumber = 1,
    kMinutesFromFieldNumber = 2,
    kMinutesToFieldNumber = 3,
  };
  // .serialization.WorkingTimeInterval.Day day = 1;
  void clear_day();
  ::serialization::WorkingTimeInterval_Day day() const;
  void set_day(::serialization::WorkingTimeInterval_Day value);
  private:
  ::serialization::WorkingTimeInterval_Day _internal_day() const;
  void _internal_set_day(::serialization::WorkingTimeInterval_Day value);
  public:

  // int32 minutes_from = 2;
  void clear_minutes_from();
  ::PROTOBUF_NAMESPACE_ID::int32 minutes_from() const;
  void set_minutes_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minutes_from() const;
  void _internal_set_minutes_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 minutes_to = 3;
  void clear_minutes_to();
  ::PROTOBUF_NAMESPACE_ID::int32 minutes_to() const;
  void set_minutes_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minutes_to() const;
  void _internal_set_minutes_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:serialization.WorkingTimeInterval)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int day_;
  ::PROTOBUF_NAMESPACE_ID::int32 minutes_from_;
  ::PROTOBUF_NAMESPACE_ID::int32 minutes_to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class WorkingTime :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.WorkingTime) */ {
 public:
  WorkingTime();
  virtual ~WorkingTime();

  WorkingTime(const WorkingTime& from);
  WorkingTime(WorkingTime&& from) noexcept
    : WorkingTime() {
    *this = ::std::move(from);
  }

  inline WorkingTime& operator=(const WorkingTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkingTime& operator=(WorkingTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkingTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkingTime* internal_default_instance() {
    return reinterpret_cast<const WorkingTime*>(
               &_WorkingTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(WorkingTime& a, WorkingTime& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkingTime* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkingTime* New() const final {
    return CreateMaybeMessage<WorkingTime>(nullptr);
  }

  WorkingTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkingTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkingTime& from);
  void MergeFrom(const WorkingTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkingTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.WorkingTime";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalsFieldNumber = 2,
    kFormattedFieldNumber = 1,
  };
  // repeated .serialization.WorkingTimeInterval intervals = 2;
  int intervals_size() const;
  private:
  int _internal_intervals_size() const;
  public:
  void clear_intervals();
  ::serialization::WorkingTimeInterval* mutable_intervals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::WorkingTimeInterval >*
      mutable_intervals();
  private:
  const ::serialization::WorkingTimeInterval& _internal_intervals(int index) const;
  ::serialization::WorkingTimeInterval* _internal_add_intervals();
  public:
  const ::serialization::WorkingTimeInterval& intervals(int index) const;
  ::serialization::WorkingTimeInterval* add_intervals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::WorkingTimeInterval >&
      intervals() const;

  // string formatted = 1;
  void clear_formatted();
  const std::string& formatted() const;
  void set_formatted(const std::string& value);
  void set_formatted(std::string&& value);
  void set_formatted(const char* value);
  void set_formatted(const char* value, size_t size);
  std::string* mutable_formatted();
  std::string* release_formatted();
  void set_allocated_formatted(std::string* formatted);
  private:
  const std::string& _internal_formatted() const;
  void _internal_set_formatted(const std::string& value);
  std::string* _internal_mutable_formatted();
  public:

  // @@protoc_insertion_point(class_scope:serialization.WorkingTime)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::WorkingTimeInterval > intervals_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr formatted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class Url :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Url) */ {
 public:
  Url();
  virtual ~Url();

  Url(const Url& from);
  Url(Url&& from) noexcept
    : Url() {
    *this = ::std::move(from);
  }

  inline Url& operator=(const Url& from) {
    CopyFrom(from);
    return *this;
  }
  inline Url& operator=(Url&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Url& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Url* internal_default_instance() {
    return reinterpret_cast<const Url*>(
               &_Url_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Url& a, Url& b) {
    a.Swap(&b);
  }
  inline void Swap(Url* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Url* New() const final {
    return CreateMaybeMessage<Url>(nullptr);
  }

  Url* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Url>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Url& from);
  void MergeFrom(const Url& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Url* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Url";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:serialization.Url)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class Company :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Company) */ {
 public:
  Company();
  virtual ~Company();

  Company(const Company& from);
  Company(Company&& from) noexcept
    : Company() {
    *this = ::std::move(from);
  }

  inline Company& operator=(const Company& from) {
    CopyFrom(from);
    return *this;
  }
  inline Company& operator=(Company&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Company& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Company* internal_default_instance() {
    return reinterpret_cast<const Company*>(
               &_Company_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Company& a, Company& b) {
    a.Swap(&b);
  }
  inline void Swap(Company* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Company* New() const final {
    return CreateMaybeMessage<Company>(nullptr);
  }

  Company* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Company>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Company& from);
  void MergeFrom(const Company& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Company* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Company";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 2,
    kPhonesFieldNumber = 3,
    kUrlsFieldNumber = 4,
    kRubricsFieldNumber = 5,
    kNearbyStopsFieldNumber = 7,
    kAddressFieldNumber = 1,
    kWorkingTimeFieldNumber = 6,
  };
  // repeated .serialization.Name names = 2;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  ::serialization::Name* mutable_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Name >*
      mutable_names();
  private:
  const ::serialization::Name& _internal_names(int index) const;
  ::serialization::Name* _internal_add_names();
  public:
  const ::serialization::Name& names(int index) const;
  ::serialization::Name* add_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Name >&
      names() const;

  // repeated .serialization.Phone phones = 3;
  int phones_size() const;
  private:
  int _internal_phones_size() const;
  public:
  void clear_phones();
  ::serialization::Phone* mutable_phones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Phone >*
      mutable_phones();
  private:
  const ::serialization::Phone& _internal_phones(int index) const;
  ::serialization::Phone* _internal_add_phones();
  public:
  const ::serialization::Phone& phones(int index) const;
  ::serialization::Phone* add_phones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Phone >&
      phones() const;

  // repeated .serialization.Url urls = 4;
  int urls_size() const;
  private:
  int _internal_urls_size() const;
  public:
  void clear_urls();
  ::serialization::Url* mutable_urls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Url >*
      mutable_urls();
  private:
  const ::serialization::Url& _internal_urls(int index) const;
  ::serialization::Url* _internal_add_urls();
  public:
  const ::serialization::Url& urls(int index) const;
  ::serialization::Url* add_urls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Url >&
      urls() const;

  // repeated uint64 rubrics = 5;
  int rubrics_size() const;
  private:
  int _internal_rubrics_size() const;
  public:
  void clear_rubrics();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rubrics(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_rubrics() const;
  void _internal_add_rubrics(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_rubrics();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 rubrics(int index) const;
  void set_rubrics(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_rubrics(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      rubrics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_rubrics();

  // repeated .serialization.NearbyStop nearby_stops = 7;
  int nearby_stops_size() const;
  private:
  int _internal_nearby_stops_size() const;
  public:
  void clear_nearby_stops();
  ::serialization::NearbyStop* mutable_nearby_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::NearbyStop >*
      mutable_nearby_stops();
  private:
  const ::serialization::NearbyStop& _internal_nearby_stops(int index) const;
  ::serialization::NearbyStop* _internal_add_nearby_stops();
  public:
  const ::serialization::NearbyStop& nearby_stops(int index) const;
  ::serialization::NearbyStop* add_nearby_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::NearbyStop >&
      nearby_stops() const;

  // .serialization.Address address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::serialization::Address& address() const;
  ::serialization::Address* release_address();
  ::serialization::Address* mutable_address();
  void set_allocated_address(::serialization::Address* address);
  private:
  const ::serialization::Address& _internal_address() const;
  ::serialization::Address* _internal_mutable_address();
  public:

  // .serialization.WorkingTime working_time = 6;
  bool has_working_time() const;
  private:
  bool _internal_has_working_time() const;
  public:
  void clear_working_time();
  const ::serialization::WorkingTime& working_time() const;
  ::serialization::WorkingTime* release_working_time();
  ::serialization::WorkingTime* mutable_working_time();
  void set_allocated_working_time(::serialization::WorkingTime* working_time);
  private:
  const ::serialization::WorkingTime& _internal_working_time() const;
  ::serialization::WorkingTime* _internal_mutable_working_time();
  public:

  // @@protoc_insertion_point(class_scope:serialization.Company)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Name > names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Phone > phones_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Url > urls_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > rubrics_;
  mutable std::atomic<int> _rubrics_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::NearbyStop > nearby_stops_;
  ::serialization::Address* address_;
  ::serialization::WorkingTime* working_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class Rubric :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Rubric) */ {
 public:
  Rubric();
  virtual ~Rubric();

  Rubric(const Rubric& from);
  Rubric(Rubric&& from) noexcept
    : Rubric() {
    *this = ::std::move(from);
  }

  inline Rubric& operator=(const Rubric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rubric& operator=(Rubric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rubric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rubric* internal_default_instance() {
    return reinterpret_cast<const Rubric*>(
               &_Rubric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Rubric& a, Rubric& b) {
    a.Swap(&b);
  }
  inline void Swap(Rubric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rubric* New() const final {
    return CreateMaybeMessage<Rubric>(nullptr);
  }

  Rubric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rubric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rubric& from);
  void MergeFrom(const Rubric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rubric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Rubric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeywordsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string keywords = 2;
  int keywords_size() const;
  private:
  int _internal_keywords_size() const;
  public:
  void clear_keywords();
  const std::string& keywords(int index) const;
  std::string* mutable_keywords(int index);
  void set_keywords(int index, const std::string& value);
  void set_keywords(int index, std::string&& value);
  void set_keywords(int index, const char* value);
  void set_keywords(int index, const char* value, size_t size);
  std::string* add_keywords();
  void add_keywords(const std::string& value);
  void add_keywords(std::string&& value);
  void add_keywords(const char* value);
  void add_keywords(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keywords() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keywords();
  private:
  const std::string& _internal_keywords(int index) const;
  std::string* _internal_add_keywords();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:serialization.Rubric)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keywords_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class Database_RubricsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Database_RubricsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::serialization::Rubric,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Database_RubricsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::serialization::Rubric,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Database_RubricsEntry_DoNotUse();
  Database_RubricsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Database_RubricsEntry_DoNotUse& other);
  static const Database_RubricsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Database_RubricsEntry_DoNotUse*>(&_Database_RubricsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[32];
  }

  public:
};

// -------------------------------------------------------------------

class Database :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Database) */ {
 public:
  Database();
  virtual ~Database();

  Database(const Database& from);
  Database(Database&& from) noexcept
    : Database() {
    *this = ::std::move(from);
  }

  inline Database& operator=(const Database& from) {
    CopyFrom(from);
    return *this;
  }
  inline Database& operator=(Database&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Database& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Database* internal_default_instance() {
    return reinterpret_cast<const Database*>(
               &_Database_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Database& a, Database& b) {
    a.Swap(&b);
  }
  inline void Swap(Database* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Database* New() const final {
    return CreateMaybeMessage<Database>(nullptr);
  }

  Database* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Database>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Database& from);
  void MergeFrom(const Database& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Database* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Database";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCompaniesFieldNumber = 1,
    kRubricsFieldNumber = 2,
  };
  // repeated .serialization.Company companies = 1;
  int companies_size() const;
  private:
  int _internal_companies_size() const;
  public:
  void clear_companies();
  ::serialization::Company* mutable_companies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Company >*
      mutable_companies();
  private:
  const ::serialization::Company& _internal_companies(int index) const;
  ::serialization::Company* _internal_add_companies();
  public:
  const ::serialization::Company& companies(int index) const;
  ::serialization::Company* add_companies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Company >&
      companies() const;

  // map<uint64, .serialization.Rubric> rubrics = 2;
  int rubrics_size() const;
  private:
  int _internal_rubrics_size() const;
  public:
  void clear_rubrics();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::serialization::Rubric >&
      _internal_rubrics() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::serialization::Rubric >*
      _internal_mutable_rubrics();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::serialization::Rubric >&
      rubrics() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::serialization::Rubric >*
      mutable_rubrics();

  // @@protoc_insertion_point(class_scope:serialization.Database)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Company > companies_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Database_RubricsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, ::serialization::Rubric,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > rubrics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalog :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.TransportCatalog) */ {
 public:
  TransportCatalog();
  virtual ~TransportCatalog();

  TransportCatalog(const TransportCatalog& from);
  TransportCatalog(TransportCatalog&& from) noexcept
    : TransportCatalog() {
    *this = ::std::move(from);
  }

  inline TransportCatalog& operator=(const TransportCatalog& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalog& operator=(TransportCatalog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransportCatalog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransportCatalog* internal_default_instance() {
    return reinterpret_cast<const TransportCatalog*>(
               &_TransportCatalog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(TransportCatalog& a, TransportCatalog& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalog* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportCatalog* New() const final {
    return CreateMaybeMessage<TransportCatalog>(nullptr);
  }

  TransportCatalog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportCatalog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransportCatalog& from);
  void MergeFrom(const TransportCatalog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.TransportCatalog";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusesFieldNumber = 1,
    kStopsFieldNumber = 2,
    kRouterFieldNumber = 3,
    kRendererFieldNumber = 4,
    kDatabaseFieldNumber = 5,
  };
  // repeated .serialization.BusInfo buses = 1;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::serialization::BusInfo* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::BusInfo >*
      mutable_buses();
  private:
  const ::serialization::BusInfo& _internal_buses(int index) const;
  ::serialization::BusInfo* _internal_add_buses();
  public:
  const ::serialization::BusInfo& buses(int index) const;
  ::serialization::BusInfo* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::BusInfo >&
      buses() const;

  // repeated .serialization.StopInfo stops = 2;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::serialization::StopInfo* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::StopInfo >*
      mutable_stops();
  private:
  const ::serialization::StopInfo& _internal_stops(int index) const;
  ::serialization::StopInfo* _internal_add_stops();
  public:
  const ::serialization::StopInfo& stops(int index) const;
  ::serialization::StopInfo* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::StopInfo >&
      stops() const;

  // .serialization.Router router = 3;
  bool has_router() const;
  private:
  bool _internal_has_router() const;
  public:
  void clear_router();
  const ::serialization::Router& router() const;
  ::serialization::Router* release_router();
  ::serialization::Router* mutable_router();
  void set_allocated_router(::serialization::Router* router);
  private:
  const ::serialization::Router& _internal_router() const;
  ::serialization::Router* _internal_mutable_router();
  public:

  // .serialization.Renderer renderer = 4;
  bool has_renderer() const;
  private:
  bool _internal_has_renderer() const;
  public:
  void clear_renderer();
  const ::serialization::Renderer& renderer() const;
  ::serialization::Renderer* release_renderer();
  ::serialization::Renderer* mutable_renderer();
  void set_allocated_renderer(::serialization::Renderer* renderer);
  private:
  const ::serialization::Renderer& _internal_renderer() const;
  ::serialization::Renderer* _internal_mutable_renderer();
  public:

  // .serialization.Database database = 5;
  bool has_database() const;
  private:
  bool _internal_has_database() const;
  public:
  void clear_database();
  const ::serialization::Database& database() const;
  ::serialization::Database* release_database();
  ::serialization::Database* mutable_database();
  void set_allocated_database(::serialization::Database* database);
  private:
  const ::serialization::Database& _internal_database() const;
  ::serialization::Database* _internal_mutable_database();
  public:

  // @@protoc_insertion_point(class_scope:serialization.TransportCatalog)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::BusInfo > buses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::StopInfo > stops_;
  ::serialization::Router* router_;
  ::serialization::Renderer* renderer_;
  ::serialization::Database* database_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StopInfo

// string name = 1;
inline void StopInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StopInfo::name() const {
  // @@protoc_insertion_point(field_get:serialization.StopInfo.name)
  return _internal_name();
}
inline void StopInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:serialization.StopInfo.name)
}
inline std::string* StopInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:serialization.StopInfo.name)
  return _internal_mutable_name();
}
inline const std::string& StopInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void StopInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StopInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.StopInfo.name)
}
inline void StopInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.StopInfo.name)
}
inline void StopInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.StopInfo.name)
}
inline std::string* StopInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StopInfo::release_name() {
  // @@protoc_insertion_point(field_release:serialization.StopInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StopInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:serialization.StopInfo.name)
}

// repeated string buses = 2;
inline int StopInfo::_internal_buses_size() const {
  return buses_.size();
}
inline int StopInfo::buses_size() const {
  return _internal_buses_size();
}
inline void StopInfo::clear_buses() {
  buses_.Clear();
}
inline std::string* StopInfo::add_buses() {
  // @@protoc_insertion_point(field_add_mutable:serialization.StopInfo.buses)
  return _internal_add_buses();
}
inline const std::string& StopInfo::_internal_buses(int index) const {
  return buses_.Get(index);
}
inline const std::string& StopInfo::buses(int index) const {
  // @@protoc_insertion_point(field_get:serialization.StopInfo.buses)
  return _internal_buses(index);
}
inline std::string* StopInfo::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.StopInfo.buses)
  return buses_.Mutable(index);
}
inline void StopInfo::set_buses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:serialization.StopInfo.buses)
  buses_.Mutable(index)->assign(value);
}
inline void StopInfo::set_buses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:serialization.StopInfo.buses)
  buses_.Mutable(index)->assign(std::move(value));
}
inline void StopInfo::set_buses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  buses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:serialization.StopInfo.buses)
}
inline void StopInfo::set_buses(int index, const char* value, size_t size) {
  buses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:serialization.StopInfo.buses)
}
inline std::string* StopInfo::_internal_add_buses() {
  return buses_.Add();
}
inline void StopInfo::add_buses(const std::string& value) {
  buses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:serialization.StopInfo.buses)
}
inline void StopInfo::add_buses(std::string&& value) {
  buses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:serialization.StopInfo.buses)
}
inline void StopInfo::add_buses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  buses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:serialization.StopInfo.buses)
}
inline void StopInfo::add_buses(const char* value, size_t size) {
  buses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:serialization.StopInfo.buses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StopInfo::buses() const {
  // @@protoc_insertion_point(field_list:serialization.StopInfo.buses)
  return buses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StopInfo::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:serialization.StopInfo.buses)
  return &buses_;
}

// -------------------------------------------------------------------

// BusInfo

// string name = 1;
inline void BusInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BusInfo::name() const {
  // @@protoc_insertion_point(field_get:serialization.BusInfo.name)
  return _internal_name();
}
inline void BusInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:serialization.BusInfo.name)
}
inline std::string* BusInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:serialization.BusInfo.name)
  return _internal_mutable_name();
}
inline const std::string& BusInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void BusInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BusInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.BusInfo.name)
}
inline void BusInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.BusInfo.name)
}
inline void BusInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.BusInfo.name)
}
inline std::string* BusInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BusInfo::release_name() {
  // @@protoc_insertion_point(field_release:serialization.BusInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BusInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:serialization.BusInfo.name)
}

// uint64 stop_count = 2;
inline void BusInfo::clear_stop_count() {
  stop_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BusInfo::_internal_stop_count() const {
  return stop_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BusInfo::stop_count() const {
  // @@protoc_insertion_point(field_get:serialization.BusInfo.stop_count)
  return _internal_stop_count();
}
inline void BusInfo::_internal_set_stop_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  stop_count_ = value;
}
inline void BusInfo::set_stop_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stop_count(value);
  // @@protoc_insertion_point(field_set:serialization.BusInfo.stop_count)
}

// uint64 unique_stop_count = 3;
inline void BusInfo::clear_unique_stop_count() {
  unique_stop_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BusInfo::_internal_unique_stop_count() const {
  return unique_stop_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BusInfo::unique_stop_count() const {
  // @@protoc_insertion_point(field_get:serialization.BusInfo.unique_stop_count)
  return _internal_unique_stop_count();
}
inline void BusInfo::_internal_set_unique_stop_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  unique_stop_count_ = value;
}
inline void BusInfo::set_unique_stop_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_unique_stop_count(value);
  // @@protoc_insertion_point(field_set:serialization.BusInfo.unique_stop_count)
}

// int32 road_route_length = 4;
inline void BusInfo::clear_road_route_length() {
  road_route_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BusInfo::_internal_road_route_length() const {
  return road_route_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BusInfo::road_route_length() const {
  // @@protoc_insertion_point(field_get:serialization.BusInfo.road_route_length)
  return _internal_road_route_length();
}
inline void BusInfo::_internal_set_road_route_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  road_route_length_ = value;
}
inline void BusInfo::set_road_route_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_road_route_length(value);
  // @@protoc_insertion_point(field_set:serialization.BusInfo.road_route_length)
}

// double geo_route_length = 5;
inline void BusInfo::clear_geo_route_length() {
  geo_route_length_ = 0;
}
inline double BusInfo::_internal_geo_route_length() const {
  return geo_route_length_;
}
inline double BusInfo::geo_route_length() const {
  // @@protoc_insertion_point(field_get:serialization.BusInfo.geo_route_length)
  return _internal_geo_route_length();
}
inline void BusInfo::_internal_set_geo_route_length(double value) {
  
  geo_route_length_ = value;
}
inline void BusInfo::set_geo_route_length(double value) {
  _internal_set_geo_route_length(value);
  // @@protoc_insertion_point(field_set:serialization.BusInfo.geo_route_length)
}

// -------------------------------------------------------------------

// Edge

// uint64 from = 1;
inline void Edge::clear_from() {
  from_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Edge::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Edge::from() const {
  // @@protoc_insertion_point(field_get:serialization.Edge.from)
  return _internal_from();
}
inline void Edge::_internal_set_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  from_ = value;
}
inline void Edge::set_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:serialization.Edge.from)
}

// uint64 to = 2;
inline void Edge::clear_to() {
  to_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Edge::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Edge::to() const {
  // @@protoc_insertion_point(field_get:serialization.Edge.to)
  return _internal_to();
}
inline void Edge::_internal_set_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  to_ = value;
}
inline void Edge::set_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:serialization.Edge.to)
}

// double weight = 3;
inline void Edge::clear_weight() {
  weight_ = 0;
}
inline double Edge::_internal_weight() const {
  return weight_;
}
inline double Edge::weight() const {
  // @@protoc_insertion_point(field_get:serialization.Edge.weight)
  return _internal_weight();
}
inline void Edge::_internal_set_weight(double value) {
  
  weight_ = value;
}
inline void Edge::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:serialization.Edge.weight)
}

// -------------------------------------------------------------------

// Graph

// repeated .serialization.Edge edges = 1;
inline int Graph::_internal_edges_size() const {
  return edges_.size();
}
inline int Graph::edges_size() const {
  return _internal_edges_size();
}
inline void Graph::clear_edges() {
  edges_.Clear();
}
inline ::serialization::Edge* Graph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.Graph.edges)
  return edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Edge >*
Graph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:serialization.Graph.edges)
  return &edges_;
}
inline const ::serialization::Edge& Graph::_internal_edges(int index) const {
  return edges_.Get(index);
}
inline const ::serialization::Edge& Graph::edges(int index) const {
  // @@protoc_insertion_point(field_get:serialization.Graph.edges)
  return _internal_edges(index);
}
inline ::serialization::Edge* Graph::_internal_add_edges() {
  return edges_.Add();
}
inline ::serialization::Edge* Graph::add_edges() {
  // @@protoc_insertion_point(field_add:serialization.Graph.edges)
  return _internal_add_edges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Edge >&
Graph::edges() const {
  // @@protoc_insertion_point(field_list:serialization.Graph.edges)
  return edges_;
}

// uint64 vertex_count = 2;
inline void Graph::clear_vertex_count() {
  vertex_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Graph::_internal_vertex_count() const {
  return vertex_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Graph::vertex_count() const {
  // @@protoc_insertion_point(field_get:serialization.Graph.vertex_count)
  return _internal_vertex_count();
}
inline void Graph::_internal_set_vertex_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  vertex_count_ = value;
}
inline void Graph::set_vertex_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_vertex_count(value);
  // @@protoc_insertion_point(field_set:serialization.Graph.vertex_count)
}

// -------------------------------------------------------------------

// StopVertexIds

// string name = 1;
inline void StopVertexIds::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StopVertexIds::name() const {
  // @@protoc_insertion_point(field_get:serialization.StopVertexIds.name)
  return _internal_name();
}
inline void StopVertexIds::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:serialization.StopVertexIds.name)
}
inline std::string* StopVertexIds::mutable_name() {
  // @@protoc_insertion_point(field_mutable:serialization.StopVertexIds.name)
  return _internal_mutable_name();
}
inline const std::string& StopVertexIds::_internal_name() const {
  return name_.GetNoArena();
}
inline void StopVertexIds::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StopVertexIds::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.StopVertexIds.name)
}
inline void StopVertexIds::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.StopVertexIds.name)
}
inline void StopVertexIds::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.StopVertexIds.name)
}
inline std::string* StopVertexIds::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StopVertexIds::release_name() {
  // @@protoc_insertion_point(field_release:serialization.StopVertexIds.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StopVertexIds::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:serialization.StopVertexIds.name)
}

// uint64 in = 2;
inline void StopVertexIds::clear_in() {
  in_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StopVertexIds::_internal_in() const {
  return in_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StopVertexIds::in() const {
  // @@protoc_insertion_point(field_get:serialization.StopVertexIds.in)
  return _internal_in();
}
inline void StopVertexIds::_internal_set_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  in_ = value;
}
inline void StopVertexIds::set_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_in(value);
  // @@protoc_insertion_point(field_set:serialization.StopVertexIds.in)
}

// uint64 out = 3;
inline void StopVertexIds::clear_out() {
  out_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StopVertexIds::_internal_out() const {
  return out_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StopVertexIds::out() const {
  // @@protoc_insertion_point(field_get:serialization.StopVertexIds.out)
  return _internal_out();
}
inline void StopVertexIds::_internal_set_out(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  out_ = value;
}
inline void StopVertexIds::set_out(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_out(value);
  // @@protoc_insertion_point(field_set:serialization.StopVertexIds.out)
}

// -------------------------------------------------------------------

// VertexInfo

// string name = 1;
inline void VertexInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VertexInfo::name() const {
  // @@protoc_insertion_point(field_get:serialization.VertexInfo.name)
  return _internal_name();
}
inline void VertexInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:serialization.VertexInfo.name)
}
inline std::string* VertexInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:serialization.VertexInfo.name)
  return _internal_mutable_name();
}
inline const std::string& VertexInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void VertexInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VertexInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.VertexInfo.name)
}
inline void VertexInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.VertexInfo.name)
}
inline void VertexInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.VertexInfo.name)
}
inline std::string* VertexInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VertexInfo::release_name() {
  // @@protoc_insertion_point(field_release:serialization.VertexInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VertexInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:serialization.VertexInfo.name)
}

// int32 company_id = 2;
inline void VertexInfo::clear_company_id() {
  company_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VertexInfo::_internal_company_id() const {
  return company_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VertexInfo::company_id() const {
  // @@protoc_insertion_point(field_get:serialization.VertexInfo.company_id)
  return _internal_company_id();
}
inline void VertexInfo::_internal_set_company_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  company_id_ = value;
}
inline void VertexInfo::set_company_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_company_id(value);
  // @@protoc_insertion_point(field_set:serialization.VertexInfo.company_id)
}

// -------------------------------------------------------------------

// EdgeInfo

// .serialization.EdgeInfoType type = 1;
inline void EdgeInfo::clear_type() {
  type_ = 0;
}
inline ::serialization::EdgeInfoType EdgeInfo::_internal_type() const {
  return static_cast< ::serialization::EdgeInfoType >(type_);
}
inline ::serialization::EdgeInfoType EdgeInfo::type() const {
  // @@protoc_insertion_point(field_get:serialization.EdgeInfo.type)
  return _internal_type();
}
inline void EdgeInfo::_internal_set_type(::serialization::EdgeInfoType value) {
  
  type_ = value;
}
inline void EdgeInfo::set_type(::serialization::EdgeInfoType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:serialization.EdgeInfo.type)
}

// string bus_name = 2;
inline void EdgeInfo::clear_bus_name() {
  bus_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EdgeInfo::bus_name() const {
  // @@protoc_insertion_point(field_get:serialization.EdgeInfo.bus_name)
  return _internal_bus_name();
}
inline void EdgeInfo::set_bus_name(const std::string& value) {
  _internal_set_bus_name(value);
  // @@protoc_insertion_point(field_set:serialization.EdgeInfo.bus_name)
}
inline std::string* EdgeInfo::mutable_bus_name() {
  // @@protoc_insertion_point(field_mutable:serialization.EdgeInfo.bus_name)
  return _internal_mutable_bus_name();
}
inline const std::string& EdgeInfo::_internal_bus_name() const {
  return bus_name_.GetNoArena();
}
inline void EdgeInfo::_internal_set_bus_name(const std::string& value) {
  
  bus_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EdgeInfo::set_bus_name(std::string&& value) {
  
  bus_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.EdgeInfo.bus_name)
}
inline void EdgeInfo::set_bus_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bus_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.EdgeInfo.bus_name)
}
inline void EdgeInfo::set_bus_name(const char* value, size_t size) {
  
  bus_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.EdgeInfo.bus_name)
}
inline std::string* EdgeInfo::_internal_mutable_bus_name() {
  
  return bus_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EdgeInfo::release_bus_name() {
  // @@protoc_insertion_point(field_release:serialization.EdgeInfo.bus_name)
  
  return bus_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EdgeInfo::set_allocated_bus_name(std::string* bus_name) {
  if (bus_name != nullptr) {
    
  } else {
    
  }
  bus_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bus_name);
  // @@protoc_insertion_point(field_set_allocated:serialization.EdgeInfo.bus_name)
}

// uint64 bus_start_stop_idx = 3;
inline void EdgeInfo::clear_bus_start_stop_idx() {
  bus_start_stop_idx_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EdgeInfo::_internal_bus_start_stop_idx() const {
  return bus_start_stop_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EdgeInfo::bus_start_stop_idx() const {
  // @@protoc_insertion_point(field_get:serialization.EdgeInfo.bus_start_stop_idx)
  return _internal_bus_start_stop_idx();
}
inline void EdgeInfo::_internal_set_bus_start_stop_idx(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bus_start_stop_idx_ = value;
}
inline void EdgeInfo::set_bus_start_stop_idx(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bus_start_stop_idx(value);
  // @@protoc_insertion_point(field_set:serialization.EdgeInfo.bus_start_stop_idx)
}

// uint64 bus_finish_stop_idx = 4;
inline void EdgeInfo::clear_bus_finish_stop_idx() {
  bus_finish_stop_idx_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EdgeInfo::_internal_bus_finish_stop_idx() const {
  return bus_finish_stop_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EdgeInfo::bus_finish_stop_idx() const {
  // @@protoc_insertion_point(field_get:serialization.EdgeInfo.bus_finish_stop_idx)
  return _internal_bus_finish_stop_idx();
}
inline void EdgeInfo::_internal_set_bus_finish_stop_idx(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bus_finish_stop_idx_ = value;
}
inline void EdgeInfo::set_bus_finish_stop_idx(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bus_finish_stop_idx(value);
  // @@protoc_insertion_point(field_set:serialization.EdgeInfo.bus_finish_stop_idx)
}

// string stop_from = 5;
inline void EdgeInfo::clear_stop_from() {
  stop_from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EdgeInfo::stop_from() const {
  // @@protoc_insertion_point(field_get:serialization.EdgeInfo.stop_from)
  return _internal_stop_from();
}
inline void EdgeInfo::set_stop_from(const std::string& value) {
  _internal_set_stop_from(value);
  // @@protoc_insertion_point(field_set:serialization.EdgeInfo.stop_from)
}
inline std::string* EdgeInfo::mutable_stop_from() {
  // @@protoc_insertion_point(field_mutable:serialization.EdgeInfo.stop_from)
  return _internal_mutable_stop_from();
}
inline const std::string& EdgeInfo::_internal_stop_from() const {
  return stop_from_.GetNoArena();
}
inline void EdgeInfo::_internal_set_stop_from(const std::string& value) {
  
  stop_from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EdgeInfo::set_stop_from(std::string&& value) {
  
  stop_from_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.EdgeInfo.stop_from)
}
inline void EdgeInfo::set_stop_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stop_from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.EdgeInfo.stop_from)
}
inline void EdgeInfo::set_stop_from(const char* value, size_t size) {
  
  stop_from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.EdgeInfo.stop_from)
}
inline std::string* EdgeInfo::_internal_mutable_stop_from() {
  
  return stop_from_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EdgeInfo::release_stop_from() {
  // @@protoc_insertion_point(field_release:serialization.EdgeInfo.stop_from)
  
  return stop_from_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EdgeInfo::set_allocated_stop_from(std::string* stop_from) {
  if (stop_from != nullptr) {
    
  } else {
    
  }
  stop_from_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stop_from);
  // @@protoc_insertion_point(field_set_allocated:serialization.EdgeInfo.stop_from)
}

// int32 company_id = 6;
inline void EdgeInfo::clear_company_id() {
  company_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EdgeInfo::_internal_company_id() const {
  return company_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EdgeInfo::company_id() const {
  // @@protoc_insertion_point(field_get:serialization.EdgeInfo.company_id)
  return _internal_company_id();
}
inline void EdgeInfo::_internal_set_company_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  company_id_ = value;
}
inline void EdgeInfo::set_company_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_company_id(value);
  // @@protoc_insertion_point(field_set:serialization.EdgeInfo.company_id)
}

// string company_name = 7;
inline void EdgeInfo::clear_company_name() {
  company_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EdgeInfo::company_name() const {
  // @@protoc_insertion_point(field_get:serialization.EdgeInfo.company_name)
  return _internal_company_name();
}
inline void EdgeInfo::set_company_name(const std::string& value) {
  _internal_set_company_name(value);
  // @@protoc_insertion_point(field_set:serialization.EdgeInfo.company_name)
}
inline std::string* EdgeInfo::mutable_company_name() {
  // @@protoc_insertion_point(field_mutable:serialization.EdgeInfo.company_name)
  return _internal_mutable_company_name();
}
inline const std::string& EdgeInfo::_internal_company_name() const {
  return company_name_.GetNoArena();
}
inline void EdgeInfo::_internal_set_company_name(const std::string& value) {
  
  company_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EdgeInfo::set_company_name(std::string&& value) {
  
  company_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.EdgeInfo.company_name)
}
inline void EdgeInfo::set_company_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  company_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.EdgeInfo.company_name)
}
inline void EdgeInfo::set_company_name(const char* value, size_t size) {
  
  company_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.EdgeInfo.company_name)
}
inline std::string* EdgeInfo::_internal_mutable_company_name() {
  
  return company_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EdgeInfo::release_company_name() {
  // @@protoc_insertion_point(field_release:serialization.EdgeInfo.company_name)
  
  return company_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EdgeInfo::set_allocated_company_name(std::string* company_name) {
  if (company_name != nullptr) {
    
  } else {
    
  }
  company_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company_name);
  // @@protoc_insertion_point(field_set_allocated:serialization.EdgeInfo.company_name)
}

// string company_display_name = 8;
inline void EdgeInfo::clear_company_display_name() {
  company_display_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EdgeInfo::company_display_name() const {
  // @@protoc_insertion_point(field_get:serialization.EdgeInfo.company_display_name)
  return _internal_company_display_name();
}
inline void EdgeInfo::set_company_display_name(const std::string& value) {
  _internal_set_company_display_name(value);
  // @@protoc_insertion_point(field_set:serialization.EdgeInfo.company_display_name)
}
inline std::string* EdgeInfo::mutable_company_display_name() {
  // @@protoc_insertion_point(field_mutable:serialization.EdgeInfo.company_display_name)
  return _internal_mutable_company_display_name();
}
inline const std::string& EdgeInfo::_internal_company_display_name() const {
  return company_display_name_.GetNoArena();
}
inline void EdgeInfo::_internal_set_company_display_name(const std::string& value) {
  
  company_display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EdgeInfo::set_company_display_name(std::string&& value) {
  
  company_display_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.EdgeInfo.company_display_name)
}
inline void EdgeInfo::set_company_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  company_display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.EdgeInfo.company_display_name)
}
inline void EdgeInfo::set_company_display_name(const char* value, size_t size) {
  
  company_display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.EdgeInfo.company_display_name)
}
inline std::string* EdgeInfo::_internal_mutable_company_display_name() {
  
  return company_display_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EdgeInfo::release_company_display_name() {
  // @@protoc_insertion_point(field_release:serialization.EdgeInfo.company_display_name)
  
  return company_display_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EdgeInfo::set_allocated_company_display_name(std::string* company_display_name) {
  if (company_display_name != nullptr) {
    
  } else {
    
  }
  company_display_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company_display_name);
  // @@protoc_insertion_point(field_set_allocated:serialization.EdgeInfo.company_display_name)
}

// -------------------------------------------------------------------

// RouteInternalData

// bool has_value = 1;
inline void RouteInternalData::clear_has_value() {
  has_value_ = false;
}
inline bool RouteInternalData::_internal_has_value() const {
  return has_value_;
}
inline bool RouteInternalData::has_value() const {
  // @@protoc_insertion_point(field_get:serialization.RouteInternalData.has_value)
  return _internal_has_value();
}
inline void RouteInternalData::_internal_set_has_value(bool value) {
  
  has_value_ = value;
}
inline void RouteInternalData::set_has_value(bool value) {
  _internal_set_has_value(value);
  // @@protoc_insertion_point(field_set:serialization.RouteInternalData.has_value)
}

// double weight = 2;
inline void RouteInternalData::clear_weight() {
  weight_ = 0;
}
inline double RouteInternalData::_internal_weight() const {
  return weight_;
}
inline double RouteInternalData::weight() const {
  // @@protoc_insertion_point(field_get:serialization.RouteInternalData.weight)
  return _internal_weight();
}
inline void RouteInternalData::_internal_set_weight(double value) {
  
  weight_ = value;
}
inline void RouteInternalData::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:serialization.RouteInternalData.weight)
}

// bool has_prev_edge = 3;
inline void RouteInternalData::clear_has_prev_edge() {
  has_prev_edge_ = false;
}
inline bool RouteInternalData::_internal_has_prev_edge() const {
  return has_prev_edge_;
}
inline bool RouteInternalData::has_prev_edge() const {
  // @@protoc_insertion_point(field_get:serialization.RouteInternalData.has_prev_edge)
  return _internal_has_prev_edge();
}
inline void RouteInternalData::_internal_set_has_prev_edge(bool value) {
  
  has_prev_edge_ = value;
}
inline void RouteInternalData::set_has_prev_edge(bool value) {
  _internal_set_has_prev_edge(value);
  // @@protoc_insertion_point(field_set:serialization.RouteInternalData.has_prev_edge)
}

// uint64 prev_edge_id = 4;
inline void RouteInternalData::clear_prev_edge_id() {
  prev_edge_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RouteInternalData::_internal_prev_edge_id() const {
  return prev_edge_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RouteInternalData::prev_edge_id() const {
  // @@protoc_insertion_point(field_get:serialization.RouteInternalData.prev_edge_id)
  return _internal_prev_edge_id();
}
inline void RouteInternalData::_internal_set_prev_edge_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prev_edge_id_ = value;
}
inline void RouteInternalData::set_prev_edge_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prev_edge_id(value);
  // @@protoc_insertion_point(field_set:serialization.RouteInternalData.prev_edge_id)
}

// -------------------------------------------------------------------

// RouteInternalDataVector

// repeated .serialization.RouteInternalData vector_data = 1;
inline int RouteInternalDataVector::_internal_vector_data_size() const {
  return vector_data_.size();
}
inline int RouteInternalDataVector::vector_data_size() const {
  return _internal_vector_data_size();
}
inline void RouteInternalDataVector::clear_vector_data() {
  vector_data_.Clear();
}
inline ::serialization::RouteInternalData* RouteInternalDataVector::mutable_vector_data(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.RouteInternalDataVector.vector_data)
  return vector_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::RouteInternalData >*
RouteInternalDataVector::mutable_vector_data() {
  // @@protoc_insertion_point(field_mutable_list:serialization.RouteInternalDataVector.vector_data)
  return &vector_data_;
}
inline const ::serialization::RouteInternalData& RouteInternalDataVector::_internal_vector_data(int index) const {
  return vector_data_.Get(index);
}
inline const ::serialization::RouteInternalData& RouteInternalDataVector::vector_data(int index) const {
  // @@protoc_insertion_point(field_get:serialization.RouteInternalDataVector.vector_data)
  return _internal_vector_data(index);
}
inline ::serialization::RouteInternalData* RouteInternalDataVector::_internal_add_vector_data() {
  return vector_data_.Add();
}
inline ::serialization::RouteInternalData* RouteInternalDataVector::add_vector_data() {
  // @@protoc_insertion_point(field_add:serialization.RouteInternalDataVector.vector_data)
  return _internal_add_vector_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::RouteInternalData >&
RouteInternalDataVector::vector_data() const {
  // @@protoc_insertion_point(field_list:serialization.RouteInternalDataVector.vector_data)
  return vector_data_;
}

// -------------------------------------------------------------------

// RouterImpl

// repeated .serialization.RouteInternalDataVector vectors = 1;
inline int RouterImpl::_internal_vectors_size() const {
  return vectors_.size();
}
inline int RouterImpl::vectors_size() const {
  return _internal_vectors_size();
}
inline void RouterImpl::clear_vectors() {
  vectors_.Clear();
}
inline ::serialization::RouteInternalDataVector* RouterImpl::mutable_vectors(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.RouterImpl.vectors)
  return vectors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::RouteInternalDataVector >*
RouterImpl::mutable_vectors() {
  // @@protoc_insertion_point(field_mutable_list:serialization.RouterImpl.vectors)
  return &vectors_;
}
inline const ::serialization::RouteInternalDataVector& RouterImpl::_internal_vectors(int index) const {
  return vectors_.Get(index);
}
inline const ::serialization::RouteInternalDataVector& RouterImpl::vectors(int index) const {
  // @@protoc_insertion_point(field_get:serialization.RouterImpl.vectors)
  return _internal_vectors(index);
}
inline ::serialization::RouteInternalDataVector* RouterImpl::_internal_add_vectors() {
  return vectors_.Add();
}
inline ::serialization::RouteInternalDataVector* RouterImpl::add_vectors() {
  // @@protoc_insertion_point(field_add:serialization.RouterImpl.vectors)
  return _internal_add_vectors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::RouteInternalDataVector >&
RouterImpl::vectors() const {
  // @@protoc_insertion_point(field_list:serialization.RouterImpl.vectors)
  return vectors_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Router

// int32 bus_wait_time = 1;
inline void Router::clear_bus_wait_time() {
  bus_wait_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Router::_internal_bus_wait_time() const {
  return bus_wait_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Router::bus_wait_time() const {
  // @@protoc_insertion_point(field_get:serialization.Router.bus_wait_time)
  return _internal_bus_wait_time();
}
inline void Router::_internal_set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bus_wait_time_ = value;
}
inline void Router::set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bus_wait_time(value);
  // @@protoc_insertion_point(field_set:serialization.Router.bus_wait_time)
}

// double bus_velocity = 2;
inline void Router::clear_bus_velocity() {
  bus_velocity_ = 0;
}
inline double Router::_internal_bus_velocity() const {
  return bus_velocity_;
}
inline double Router::bus_velocity() const {
  // @@protoc_insertion_point(field_get:serialization.Router.bus_velocity)
  return _internal_bus_velocity();
}
inline void Router::_internal_set_bus_velocity(double value) {
  
  bus_velocity_ = value;
}
inline void Router::set_bus_velocity(double value) {
  _internal_set_bus_velocity(value);
  // @@protoc_insertion_point(field_set:serialization.Router.bus_velocity)
}

// .serialization.Graph graph = 3;
inline bool Router::_internal_has_graph() const {
  return this != internal_default_instance() && graph_ != nullptr;
}
inline bool Router::has_graph() const {
  return _internal_has_graph();
}
inline void Router::clear_graph() {
  if (GetArenaNoVirtual() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
}
inline const ::serialization::Graph& Router::_internal_graph() const {
  const ::serialization::Graph* p = graph_;
  return p != nullptr ? *p : *reinterpret_cast<const ::serialization::Graph*>(
      &::serialization::_Graph_default_instance_);
}
inline const ::serialization::Graph& Router::graph() const {
  // @@protoc_insertion_point(field_get:serialization.Router.graph)
  return _internal_graph();
}
inline ::serialization::Graph* Router::release_graph() {
  // @@protoc_insertion_point(field_release:serialization.Router.graph)
  
  ::serialization::Graph* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::serialization::Graph* Router::_internal_mutable_graph() {
  
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialization::Graph>(GetArenaNoVirtual());
    graph_ = p;
  }
  return graph_;
}
inline ::serialization::Graph* Router::mutable_graph() {
  // @@protoc_insertion_point(field_mutable:serialization.Router.graph)
  return _internal_mutable_graph();
}
inline void Router::set_allocated_graph(::serialization::Graph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete graph_;
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:serialization.Router.graph)
}

// .serialization.RouterImpl route_impl = 4;
inline bool Router::_internal_has_route_impl() const {
  return this != internal_default_instance() && route_impl_ != nullptr;
}
inline bool Router::has_route_impl() const {
  return _internal_has_route_impl();
}
inline void Router::clear_route_impl() {
  if (GetArenaNoVirtual() == nullptr && route_impl_ != nullptr) {
    delete route_impl_;
  }
  route_impl_ = nullptr;
}
inline const ::serialization::RouterImpl& Router::_internal_route_impl() const {
  const ::serialization::RouterImpl* p = route_impl_;
  return p != nullptr ? *p : *reinterpret_cast<const ::serialization::RouterImpl*>(
      &::serialization::_RouterImpl_default_instance_);
}
inline const ::serialization::RouterImpl& Router::route_impl() const {
  // @@protoc_insertion_point(field_get:serialization.Router.route_impl)
  return _internal_route_impl();
}
inline ::serialization::RouterImpl* Router::release_route_impl() {
  // @@protoc_insertion_point(field_release:serialization.Router.route_impl)
  
  ::serialization::RouterImpl* temp = route_impl_;
  route_impl_ = nullptr;
  return temp;
}
inline ::serialization::RouterImpl* Router::_internal_mutable_route_impl() {
  
  if (route_impl_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialization::RouterImpl>(GetArenaNoVirtual());
    route_impl_ = p;
  }
  return route_impl_;
}
inline ::serialization::RouterImpl* Router::mutable_route_impl() {
  // @@protoc_insertion_point(field_mutable:serialization.Router.route_impl)
  return _internal_mutable_route_impl();
}
inline void Router::set_allocated_route_impl(::serialization::RouterImpl* route_impl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_impl_;
  }
  if (route_impl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route_impl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route_impl, submessage_arena);
    }
    
  } else {
    
  }
  route_impl_ = route_impl;
  // @@protoc_insertion_point(field_set_allocated:serialization.Router.route_impl)
}

// repeated .serialization.StopVertexIds stop_vertex_ids = 5;
inline int Router::_internal_stop_vertex_ids_size() const {
  return stop_vertex_ids_.size();
}
inline int Router::stop_vertex_ids_size() const {
  return _internal_stop_vertex_ids_size();
}
inline void Router::clear_stop_vertex_ids() {
  stop_vertex_ids_.Clear();
}
inline ::serialization::StopVertexIds* Router::mutable_stop_vertex_ids(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.Router.stop_vertex_ids)
  return stop_vertex_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::StopVertexIds >*
Router::mutable_stop_vertex_ids() {
  // @@protoc_insertion_point(field_mutable_list:serialization.Router.stop_vertex_ids)
  return &stop_vertex_ids_;
}
inline const ::serialization::StopVertexIds& Router::_internal_stop_vertex_ids(int index) const {
  return stop_vertex_ids_.Get(index);
}
inline const ::serialization::StopVertexIds& Router::stop_vertex_ids(int index) const {
  // @@protoc_insertion_point(field_get:serialization.Router.stop_vertex_ids)
  return _internal_stop_vertex_ids(index);
}
inline ::serialization::StopVertexIds* Router::_internal_add_stop_vertex_ids() {
  return stop_vertex_ids_.Add();
}
inline ::serialization::StopVertexIds* Router::add_stop_vertex_ids() {
  // @@protoc_insertion_point(field_add:serialization.Router.stop_vertex_ids)
  return _internal_add_stop_vertex_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::StopVertexIds >&
Router::stop_vertex_ids() const {
  // @@protoc_insertion_point(field_list:serialization.Router.stop_vertex_ids)
  return stop_vertex_ids_;
}

// repeated .serialization.VertexInfo vertex_infos = 6;
inline int Router::_internal_vertex_infos_size() const {
  return vertex_infos_.size();
}
inline int Router::vertex_infos_size() const {
  return _internal_vertex_infos_size();
}
inline void Router::clear_vertex_infos() {
  vertex_infos_.Clear();
}
inline ::serialization::VertexInfo* Router::mutable_vertex_infos(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.Router.vertex_infos)
  return vertex_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::VertexInfo >*
Router::mutable_vertex_infos() {
  // @@protoc_insertion_point(field_mutable_list:serialization.Router.vertex_infos)
  return &vertex_infos_;
}
inline const ::serialization::VertexInfo& Router::_internal_vertex_infos(int index) const {
  return vertex_infos_.Get(index);
}
inline const ::serialization::VertexInfo& Router::vertex_infos(int index) const {
  // @@protoc_insertion_point(field_get:serialization.Router.vertex_infos)
  return _internal_vertex_infos(index);
}
inline ::serialization::VertexInfo* Router::_internal_add_vertex_infos() {
  return vertex_infos_.Add();
}
inline ::serialization::VertexInfo* Router::add_vertex_infos() {
  // @@protoc_insertion_point(field_add:serialization.Router.vertex_infos)
  return _internal_add_vertex_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::VertexInfo >&
Router::vertex_infos() const {
  // @@protoc_insertion_point(field_list:serialization.Router.vertex_infos)
  return vertex_infos_;
}

// repeated .serialization.EdgeInfo edge_infos = 7;
inline int Router::_internal_edge_infos_size() const {
  return edge_infos_.size();
}
inline int Router::edge_infos_size() const {
  return _internal_edge_infos_size();
}
inline void Router::clear_edge_infos() {
  edge_infos_.Clear();
}
inline ::serialization::EdgeInfo* Router::mutable_edge_infos(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.Router.edge_infos)
  return edge_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::EdgeInfo >*
Router::mutable_edge_infos() {
  // @@protoc_insertion_point(field_mutable_list:serialization.Router.edge_infos)
  return &edge_infos_;
}
inline const ::serialization::EdgeInfo& Router::_internal_edge_infos(int index) const {
  return edge_infos_.Get(index);
}
inline const ::serialization::EdgeInfo& Router::edge_infos(int index) const {
  // @@protoc_insertion_point(field_get:serialization.Router.edge_infos)
  return _internal_edge_infos(index);
}
inline ::serialization::EdgeInfo* Router::_internal_add_edge_infos() {
  return edge_infos_.Add();
}
inline ::serialization::EdgeInfo* Router::add_edge_infos() {
  // @@protoc_insertion_point(field_add:serialization.Router.edge_infos)
  return _internal_add_edge_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::EdgeInfo >&
Router::edge_infos() const {
  // @@protoc_insertion_point(field_list:serialization.Router.edge_infos)
  return edge_infos_;
}

// double pedestrian_velocity = 8;
inline void Router::clear_pedestrian_velocity() {
  pedestrian_velocity_ = 0;
}
inline double Router::_internal_pedestrian_velocity() const {
  return pedestrian_velocity_;
}
inline double Router::pedestrian_velocity() const {
  // @@protoc_insertion_point(field_get:serialization.Router.pedestrian_velocity)
  return _internal_pedestrian_velocity();
}
inline void Router::_internal_set_pedestrian_velocity(double value) {
  
  pedestrian_velocity_ = value;
}
inline void Router::set_pedestrian_velocity(double value) {
  _internal_set_pedestrian_velocity(value);
  // @@protoc_insertion_point(field_set:serialization.Router.pedestrian_velocity)
}

// map<int32, uint64> companies_verticies = 9;
inline int Router::_internal_companies_verticies_size() const {
  return companies_verticies_.size();
}
inline int Router::companies_verticies_size() const {
  return _internal_companies_verticies_size();
}
inline void Router::clear_companies_verticies() {
  companies_verticies_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint64 >&
Router::_internal_companies_verticies() const {
  return companies_verticies_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint64 >&
Router::companies_verticies() const {
  // @@protoc_insertion_point(field_map:serialization.Router.companies_verticies)
  return _internal_companies_verticies();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint64 >*
Router::_internal_mutable_companies_verticies() {
  return companies_verticies_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint64 >*
Router::mutable_companies_verticies() {
  // @@protoc_insertion_point(field_mutable_map:serialization.Router.companies_verticies)
  return _internal_mutable_companies_verticies();
}

// -------------------------------------------------------------------

// Color

// .serialization.ColorType type = 1;
inline void Color::clear_type() {
  type_ = 0;
}
inline ::serialization::ColorType Color::_internal_type() const {
  return static_cast< ::serialization::ColorType >(type_);
}
inline ::serialization::ColorType Color::type() const {
  // @@protoc_insertion_point(field_get:serialization.Color.type)
  return _internal_type();
}
inline void Color::_internal_set_type(::serialization::ColorType value) {
  
  type_ = value;
}
inline void Color::set_type(::serialization::ColorType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:serialization.Color.type)
}

// string color_string = 2;
inline void Color::clear_color_string() {
  color_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Color::color_string() const {
  // @@protoc_insertion_point(field_get:serialization.Color.color_string)
  return _internal_color_string();
}
inline void Color::set_color_string(const std::string& value) {
  _internal_set_color_string(value);
  // @@protoc_insertion_point(field_set:serialization.Color.color_string)
}
inline std::string* Color::mutable_color_string() {
  // @@protoc_insertion_point(field_mutable:serialization.Color.color_string)
  return _internal_mutable_color_string();
}
inline const std::string& Color::_internal_color_string() const {
  return color_string_.GetNoArena();
}
inline void Color::_internal_set_color_string(const std::string& value) {
  
  color_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Color::set_color_string(std::string&& value) {
  
  color_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.Color.color_string)
}
inline void Color::set_color_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  color_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.Color.color_string)
}
inline void Color::set_color_string(const char* value, size_t size) {
  
  color_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.Color.color_string)
}
inline std::string* Color::_internal_mutable_color_string() {
  
  return color_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Color::release_color_string() {
  // @@protoc_insertion_point(field_release:serialization.Color.color_string)
  
  return color_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Color::set_allocated_color_string(std::string* color_string) {
  if (color_string != nullptr) {
    
  } else {
    
  }
  color_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color_string);
  // @@protoc_insertion_point(field_set_allocated:serialization.Color.color_string)
}

// uint32 red = 3;
inline void Color::clear_red() {
  red_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::_internal_red() const {
  return red_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::red() const {
  // @@protoc_insertion_point(field_get:serialization.Color.red)
  return _internal_red();
}
inline void Color::_internal_set_red(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  red_ = value;
}
inline void Color::set_red(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:serialization.Color.red)
}

// uint32 green = 4;
inline void Color::clear_green() {
  green_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::_internal_green() const {
  return green_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::green() const {
  // @@protoc_insertion_point(field_get:serialization.Color.green)
  return _internal_green();
}
inline void Color::_internal_set_green(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  green_ = value;
}
inline void Color::set_green(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:serialization.Color.green)
}

// uint32 blue = 5;
inline void Color::clear_blue() {
  blue_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::_internal_blue() const {
  return blue_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Color::blue() const {
  // @@protoc_insertion_point(field_get:serialization.Color.blue)
  return _internal_blue();
}
inline void Color::_internal_set_blue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blue_ = value;
}
inline void Color::set_blue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:serialization.Color.blue)
}

// double opacity = 6;
inline void Color::clear_opacity() {
  opacity_ = 0;
}
inline double Color::_internal_opacity() const {
  return opacity_;
}
inline double Color::opacity() const {
  // @@protoc_insertion_point(field_get:serialization.Color.opacity)
  return _internal_opacity();
}
inline void Color::_internal_set_opacity(double value) {
  
  opacity_ = value;
}
inline void Color::set_opacity(double value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:serialization.Color.opacity)
}

// -------------------------------------------------------------------

// Point

// double x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline double Point::_internal_x() const {
  return x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:serialization.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:serialization.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline double Point::_internal_y() const {
  return y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:serialization.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:serialization.Point.y)
}

// -------------------------------------------------------------------

// RenderSettings

// double max_width = 1;
inline void RenderSettings::clear_max_width() {
  max_width_ = 0;
}
inline double RenderSettings::_internal_max_width() const {
  return max_width_;
}
inline double RenderSettings::max_width() const {
  // @@protoc_insertion_point(field_get:serialization.RenderSettings.max_width)
  return _internal_max_width();
}
inline void RenderSettings::_internal_set_max_width(double value) {
  
  max_width_ = value;
}
inline void RenderSettings::set_max_width(double value) {
  _internal_set_max_width(value);
  // @@protoc_insertion_point(field_set:serialization.RenderSettings.max_width)
}

// double max_height = 2;
inline void RenderSettings::clear_max_height() {
  max_height_ = 0;
}
inline double RenderSettings::_internal_max_height() const {
  return max_height_;
}
inline double RenderSettings::max_height() const {
  // @@protoc_insertion_point(field_get:serialization.RenderSettings.max_height)
  return _internal_max_height();
}
inline void RenderSettings::_internal_set_max_height(double value) {
  
  max_height_ = value;
}
inline void RenderSettings::set_max_height(double value) {
  _internal_set_max_height(value);
  // @@protoc_insertion_point(field_set:serialization.RenderSettings.max_height)
}

// double padding = 3;
inline void RenderSettings::clear_padding() {
  padding_ = 0;
}
inline double RenderSettings::_internal_padding() const {
  return padding_;
}
inline double RenderSettings::padding() const {
  // @@protoc_insertion_point(field_get:serialization.RenderSettings.padding)
  return _internal_padding();
}
inline void RenderSettings::_internal_set_padding(double value) {
  
  padding_ = value;
}
inline void RenderSettings::set_padding(double value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:serialization.RenderSettings.padding)
}

// double outer_margin = 4;
inline void RenderSettings::clear_outer_margin() {
  outer_margin_ = 0;
}
inline double RenderSettings::_internal_outer_margin() const {
  return outer_margin_;
}
inline double RenderSettings::outer_margin() const {
  // @@protoc_insertion_point(field_get:serialization.RenderSettings.outer_margin)
  return _internal_outer_margin();
}
inline void RenderSettings::_internal_set_outer_margin(double value) {
  
  outer_margin_ = value;
}
inline void RenderSettings::set_outer_margin(double value) {
  _internal_set_outer_margin(value);
  // @@protoc_insertion_point(field_set:serialization.RenderSettings.outer_margin)
}

// repeated .serialization.Color palette = 5;
inline int RenderSettings::_internal_palette_size() const {
  return palette_.size();
}
inline int RenderSettings::palette_size() const {
  return _internal_palette_size();
}
inline void RenderSettings::clear_palette() {
  palette_.Clear();
}
inline ::serialization::Color* RenderSettings::mutable_palette(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.RenderSettings.palette)
  return palette_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Color >*
RenderSettings::mutable_palette() {
  // @@protoc_insertion_point(field_mutable_list:serialization.RenderSettings.palette)
  return &palette_;
}
inline const ::serialization::Color& RenderSettings::_internal_palette(int index) const {
  return palette_.Get(index);
}
inline const ::serialization::Color& RenderSettings::palette(int index) const {
  // @@protoc_insertion_point(field_get:serialization.RenderSettings.palette)
  return _internal_palette(index);
}
inline ::serialization::Color* RenderSettings::_internal_add_palette() {
  return palette_.Add();
}
inline ::serialization::Color* RenderSettings::add_palette() {
  // @@protoc_insertion_point(field_add:serialization.RenderSettings.palette)
  return _internal_add_palette();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Color >&
RenderSettings::palette() const {
  // @@protoc_insertion_point(field_list:serialization.RenderSettings.palette)
  return palette_;
}

// double line_width = 6;
inline void RenderSettings::clear_line_width() {
  line_width_ = 0;
}
inline double RenderSettings::_internal_line_width() const {
  return line_width_;
}
inline double RenderSettings::line_width() const {
  // @@protoc_insertion_point(field_get:serialization.RenderSettings.line_width)
  return _internal_line_width();
}
inline void RenderSettings::_internal_set_line_width(double value) {
  
  line_width_ = value;
}
inline void RenderSettings::set_line_width(double value) {
  _internal_set_line_width(value);
  // @@protoc_insertion_point(field_set:serialization.RenderSettings.line_width)
}

// .serialization.Color underlayer_color = 7;
inline bool RenderSettings::_internal_has_underlayer_color() const {
  return this != internal_default_instance() && underlayer_color_ != nullptr;
}
inline bool RenderSettings::has_underlayer_color() const {
  return _internal_has_underlayer_color();
}
inline void RenderSettings::clear_underlayer_color() {
  if (GetArenaNoVirtual() == nullptr && underlayer_color_ != nullptr) {
    delete underlayer_color_;
  }
  underlayer_color_ = nullptr;
}
inline const ::serialization::Color& RenderSettings::_internal_underlayer_color() const {
  const ::serialization::Color* p = underlayer_color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::serialization::Color*>(
      &::serialization::_Color_default_instance_);
}
inline const ::serialization::Color& RenderSettings::underlayer_color() const {
  // @@protoc_insertion_point(field_get:serialization.RenderSettings.underlayer_color)
  return _internal_underlayer_color();
}
inline ::serialization::Color* RenderSettings::release_underlayer_color() {
  // @@protoc_insertion_point(field_release:serialization.RenderSettings.underlayer_color)
  
  ::serialization::Color* temp = underlayer_color_;
  underlayer_color_ = nullptr;
  return temp;
}
inline ::serialization::Color* RenderSettings::_internal_mutable_underlayer_color() {
  
  if (underlayer_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialization::Color>(GetArenaNoVirtual());
    underlayer_color_ = p;
  }
  return underlayer_color_;
}
inline ::serialization::Color* RenderSettings::mutable_underlayer_color() {
  // @@protoc_insertion_point(field_mutable:serialization.RenderSettings.underlayer_color)
  return _internal_mutable_underlayer_color();
}
inline void RenderSettings::set_allocated_underlayer_color(::serialization::Color* underlayer_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete underlayer_color_;
  }
  if (underlayer_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      underlayer_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlayer_color, submessage_arena);
    }
    
  } else {
    
  }
  underlayer_color_ = underlayer_color;
  // @@protoc_insertion_point(field_set_allocated:serialization.RenderSettings.underlayer_color)
}

// double underlayer_width = 8;
inline void RenderSettings::clear_underlayer_width() {
  underlayer_width_ = 0;
}
inline double RenderSettings::_internal_underlayer_width() const {
  return underlayer_width_;
}
inline double RenderSettings::underlayer_width() const {
  // @@protoc_insertion_point(field_get:serialization.RenderSettings.underlayer_width)
  return _internal_underlayer_width();
}
inline void RenderSettings::_internal_set_underlayer_width(double value) {
  
  underlayer_width_ = value;
}
inline void RenderSettings::set_underlayer_width(double value) {
  _internal_set_underlayer_width(value);
  // @@protoc_insertion_point(field_set:serialization.RenderSettings.underlayer_width)
}

// double stop_radius = 9;
inline void RenderSettings::clear_stop_radius() {
  stop_radius_ = 0;
}
inline double RenderSettings::_internal_stop_radius() const {
  return stop_radius_;
}
inline double RenderSettings::stop_radius() const {
  // @@protoc_insertion_point(field_get:serialization.RenderSettings.stop_radius)
  return _internal_stop_radius();
}
inline void RenderSettings::_internal_set_stop_radius(double value) {
  
  stop_radius_ = value;
}
inline void RenderSettings::set_stop_radius(double value) {
  _internal_set_stop_radius(value);
  // @@protoc_insertion_point(field_set:serialization.RenderSettings.stop_radius)
}

// .serialization.Point bus_label_offset = 10;
inline bool RenderSettings::_internal_has_bus_label_offset() const {
  return this != internal_default_instance() && bus_label_offset_ != nullptr;
}
inline bool RenderSettings::has_bus_label_offset() const {
  return _internal_has_bus_label_offset();
}
inline void RenderSettings::clear_bus_label_offset() {
  if (GetArenaNoVirtual() == nullptr && bus_label_offset_ != nullptr) {
    delete bus_label_offset_;
  }
  bus_label_offset_ = nullptr;
}
inline const ::serialization::Point& RenderSettings::_internal_bus_label_offset() const {
  const ::serialization::Point* p = bus_label_offset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::serialization::Point*>(
      &::serialization::_Point_default_instance_);
}
inline const ::serialization::Point& RenderSettings::bus_label_offset() const {
  // @@protoc_insertion_point(field_get:serialization.RenderSettings.bus_label_offset)
  return _internal_bus_label_offset();
}
inline ::serialization::Point* RenderSettings::release_bus_label_offset() {
  // @@protoc_insertion_point(field_release:serialization.RenderSettings.bus_label_offset)
  
  ::serialization::Point* temp = bus_label_offset_;
  bus_label_offset_ = nullptr;
  return temp;
}
inline ::serialization::Point* RenderSettings::_internal_mutable_bus_label_offset() {
  
  if (bus_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialization::Point>(GetArenaNoVirtual());
    bus_label_offset_ = p;
  }
  return bus_label_offset_;
}
inline ::serialization::Point* RenderSettings::mutable_bus_label_offset() {
  // @@protoc_insertion_point(field_mutable:serialization.RenderSettings.bus_label_offset)
  return _internal_mutable_bus_label_offset();
}
inline void RenderSettings::set_allocated_bus_label_offset(::serialization::Point* bus_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bus_label_offset_;
  }
  if (bus_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bus_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  bus_label_offset_ = bus_label_offset;
  // @@protoc_insertion_point(field_set_allocated:serialization.RenderSettings.bus_label_offset)
}

// int32 bus_label_font_size = 11;
inline void RenderSettings::clear_bus_label_font_size() {
  bus_label_font_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenderSettings::_internal_bus_label_font_size() const {
  return bus_label_font_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenderSettings::bus_label_font_size() const {
  // @@protoc_insertion_point(field_get:serialization.RenderSettings.bus_label_font_size)
  return _internal_bus_label_font_size();
}
inline void RenderSettings::_internal_set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bus_label_font_size_ = value;
}
inline void RenderSettings::set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bus_label_font_size(value);
  // @@protoc_insertion_point(field_set:serialization.RenderSettings.bus_label_font_size)
}

// .serialization.Point stop_label_offset = 12;
inline bool RenderSettings::_internal_has_stop_label_offset() const {
  return this != internal_default_instance() && stop_label_offset_ != nullptr;
}
inline bool RenderSettings::has_stop_label_offset() const {
  return _internal_has_stop_label_offset();
}
inline void RenderSettings::clear_stop_label_offset() {
  if (GetArenaNoVirtual() == nullptr && stop_label_offset_ != nullptr) {
    delete stop_label_offset_;
  }
  stop_label_offset_ = nullptr;
}
inline const ::serialization::Point& RenderSettings::_internal_stop_label_offset() const {
  const ::serialization::Point* p = stop_label_offset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::serialization::Point*>(
      &::serialization::_Point_default_instance_);
}
inline const ::serialization::Point& RenderSettings::stop_label_offset() const {
  // @@protoc_insertion_point(field_get:serialization.RenderSettings.stop_label_offset)
  return _internal_stop_label_offset();
}
inline ::serialization::Point* RenderSettings::release_stop_label_offset() {
  // @@protoc_insertion_point(field_release:serialization.RenderSettings.stop_label_offset)
  
  ::serialization::Point* temp = stop_label_offset_;
  stop_label_offset_ = nullptr;
  return temp;
}
inline ::serialization::Point* RenderSettings::_internal_mutable_stop_label_offset() {
  
  if (stop_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialization::Point>(GetArenaNoVirtual());
    stop_label_offset_ = p;
  }
  return stop_label_offset_;
}
inline ::serialization::Point* RenderSettings::mutable_stop_label_offset() {
  // @@protoc_insertion_point(field_mutable:serialization.RenderSettings.stop_label_offset)
  return _internal_mutable_stop_label_offset();
}
inline void RenderSettings::set_allocated_stop_label_offset(::serialization::Point* stop_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stop_label_offset_;
  }
  if (stop_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stop_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  stop_label_offset_ = stop_label_offset;
  // @@protoc_insertion_point(field_set_allocated:serialization.RenderSettings.stop_label_offset)
}

// int32 stop_label_font_size = 13;
inline void RenderSettings::clear_stop_label_font_size() {
  stop_label_font_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenderSettings::_internal_stop_label_font_size() const {
  return stop_label_font_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenderSettings::stop_label_font_size() const {
  // @@protoc_insertion_point(field_get:serialization.RenderSettings.stop_label_font_size)
  return _internal_stop_label_font_size();
}
inline void RenderSettings::_internal_set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stop_label_font_size_ = value;
}
inline void RenderSettings::set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stop_label_font_size(value);
  // @@protoc_insertion_point(field_set:serialization.RenderSettings.stop_label_font_size)
}

// repeated string layers = 14;
inline int RenderSettings::_internal_layers_size() const {
  return layers_.size();
}
inline int RenderSettings::layers_size() const {
  return _internal_layers_size();
}
inline void RenderSettings::clear_layers() {
  layers_.Clear();
}
inline std::string* RenderSettings::add_layers() {
  // @@protoc_insertion_point(field_add_mutable:serialization.RenderSettings.layers)
  return _internal_add_layers();
}
inline const std::string& RenderSettings::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const std::string& RenderSettings::layers(int index) const {
  // @@protoc_insertion_point(field_get:serialization.RenderSettings.layers)
  return _internal_layers(index);
}
inline std::string* RenderSettings::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.RenderSettings.layers)
  return layers_.Mutable(index);
}
inline void RenderSettings::set_layers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:serialization.RenderSettings.layers)
  layers_.Mutable(index)->assign(value);
}
inline void RenderSettings::set_layers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:serialization.RenderSettings.layers)
  layers_.Mutable(index)->assign(std::move(value));
}
inline void RenderSettings::set_layers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  layers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:serialization.RenderSettings.layers)
}
inline void RenderSettings::set_layers(int index, const char* value, size_t size) {
  layers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:serialization.RenderSettings.layers)
}
inline std::string* RenderSettings::_internal_add_layers() {
  return layers_.Add();
}
inline void RenderSettings::add_layers(const std::string& value) {
  layers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:serialization.RenderSettings.layers)
}
inline void RenderSettings::add_layers(std::string&& value) {
  layers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:serialization.RenderSettings.layers)
}
inline void RenderSettings::add_layers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  layers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:serialization.RenderSettings.layers)
}
inline void RenderSettings::add_layers(const char* value, size_t size) {
  layers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:serialization.RenderSettings.layers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RenderSettings::layers() const {
  // @@protoc_insertion_point(field_list:serialization.RenderSettings.layers)
  return layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RenderSettings::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:serialization.RenderSettings.layers)
  return &layers_;
}

// double company_radius = 15;
inline void RenderSettings::clear_company_radius() {
  company_radius_ = 0;
}
inline double RenderSettings::_internal_company_radius() const {
  return company_radius_;
}
inline double RenderSettings::company_radius() const {
  // @@protoc_insertion_point(field_get:serialization.RenderSettings.company_radius)
  return _internal_company_radius();
}
inline void RenderSettings::_internal_set_company_radius(double value) {
  
  company_radius_ = value;
}
inline void RenderSettings::set_company_radius(double value) {
  _internal_set_company_radius(value);
  // @@protoc_insertion_point(field_set:serialization.RenderSettings.company_radius)
}

// double company_line_width = 16;
inline void RenderSettings::clear_company_line_width() {
  company_line_width_ = 0;
}
inline double RenderSettings::_internal_company_line_width() const {
  return company_line_width_;
}
inline double RenderSettings::company_line_width() const {
  // @@protoc_insertion_point(field_get:serialization.RenderSettings.company_line_width)
  return _internal_company_line_width();
}
inline void RenderSettings::_internal_set_company_line_width(double value) {
  
  company_line_width_ = value;
}
inline void RenderSettings::set_company_line_width(double value) {
  _internal_set_company_line_width(value);
  // @@protoc_insertion_point(field_set:serialization.RenderSettings.company_line_width)
}

// -------------------------------------------------------------------

// Bus

// repeated string stops = 1;
inline int Bus::_internal_stops_size() const {
  return stops_.size();
}
inline int Bus::stops_size() const {
  return _internal_stops_size();
}
inline void Bus::clear_stops() {
  stops_.Clear();
}
inline std::string* Bus::add_stops() {
  // @@protoc_insertion_point(field_add_mutable:serialization.Bus.stops)
  return _internal_add_stops();
}
inline const std::string& Bus::_internal_stops(int index) const {
  return stops_.Get(index);
}
inline const std::string& Bus::stops(int index) const {
  // @@protoc_insertion_point(field_get:serialization.Bus.stops)
  return _internal_stops(index);
}
inline std::string* Bus::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.Bus.stops)
  return stops_.Mutable(index);
}
inline void Bus::set_stops(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:serialization.Bus.stops)
  stops_.Mutable(index)->assign(value);
}
inline void Bus::set_stops(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:serialization.Bus.stops)
  stops_.Mutable(index)->assign(std::move(value));
}
inline void Bus::set_stops(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:serialization.Bus.stops)
}
inline void Bus::set_stops(int index, const char* value, size_t size) {
  stops_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:serialization.Bus.stops)
}
inline std::string* Bus::_internal_add_stops() {
  return stops_.Add();
}
inline void Bus::add_stops(const std::string& value) {
  stops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:serialization.Bus.stops)
}
inline void Bus::add_stops(std::string&& value) {
  stops_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:serialization.Bus.stops)
}
inline void Bus::add_stops(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:serialization.Bus.stops)
}
inline void Bus::add_stops(const char* value, size_t size) {
  stops_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:serialization.Bus.stops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bus::stops() const {
  // @@protoc_insertion_point(field_list:serialization.Bus.stops)
  return stops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bus::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:serialization.Bus.stops)
  return &stops_;
}

// repeated string endpoints = 2;
inline int Bus::_internal_endpoints_size() const {
  return endpoints_.size();
}
inline int Bus::endpoints_size() const {
  return _internal_endpoints_size();
}
inline void Bus::clear_endpoints() {
  endpoints_.Clear();
}
inline std::string* Bus::add_endpoints() {
  // @@protoc_insertion_point(field_add_mutable:serialization.Bus.endpoints)
  return _internal_add_endpoints();
}
inline const std::string& Bus::_internal_endpoints(int index) const {
  return endpoints_.Get(index);
}
inline const std::string& Bus::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:serialization.Bus.endpoints)
  return _internal_endpoints(index);
}
inline std::string* Bus::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.Bus.endpoints)
  return endpoints_.Mutable(index);
}
inline void Bus::set_endpoints(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:serialization.Bus.endpoints)
  endpoints_.Mutable(index)->assign(value);
}
inline void Bus::set_endpoints(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:serialization.Bus.endpoints)
  endpoints_.Mutable(index)->assign(std::move(value));
}
inline void Bus::set_endpoints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:serialization.Bus.endpoints)
}
inline void Bus::set_endpoints(int index, const char* value, size_t size) {
  endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:serialization.Bus.endpoints)
}
inline std::string* Bus::_internal_add_endpoints() {
  return endpoints_.Add();
}
inline void Bus::add_endpoints(const std::string& value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:serialization.Bus.endpoints)
}
inline void Bus::add_endpoints(std::string&& value) {
  endpoints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:serialization.Bus.endpoints)
}
inline void Bus::add_endpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:serialization.Bus.endpoints)
}
inline void Bus::add_endpoints(const char* value, size_t size) {
  endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:serialization.Bus.endpoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bus::endpoints() const {
  // @@protoc_insertion_point(field_list:serialization.Bus.endpoints)
  return endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bus::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:serialization.Bus.endpoints)
  return &endpoints_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Renderer

// .serialization.RenderSettings settings = 1;
inline bool Renderer::_internal_has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline bool Renderer::has_settings() const {
  return _internal_has_settings();
}
inline void Renderer::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::serialization::RenderSettings& Renderer::_internal_settings() const {
  const ::serialization::RenderSettings* p = settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::serialization::RenderSettings*>(
      &::serialization::_RenderSettings_default_instance_);
}
inline const ::serialization::RenderSettings& Renderer::settings() const {
  // @@protoc_insertion_point(field_get:serialization.Renderer.settings)
  return _internal_settings();
}
inline ::serialization::RenderSettings* Renderer::release_settings() {
  // @@protoc_insertion_point(field_release:serialization.Renderer.settings)
  
  ::serialization::RenderSettings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::serialization::RenderSettings* Renderer::_internal_mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialization::RenderSettings>(GetArenaNoVirtual());
    settings_ = p;
  }
  return settings_;
}
inline ::serialization::RenderSettings* Renderer::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:serialization.Renderer.settings)
  return _internal_mutable_settings();
}
inline void Renderer::set_allocated_settings(::serialization::RenderSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:serialization.Renderer.settings)
}

// map<string, .serialization.Point> stops_coords = 2;
inline int Renderer::_internal_stops_coords_size() const {
  return stops_coords_.size();
}
inline int Renderer::stops_coords_size() const {
  return _internal_stops_coords_size();
}
inline void Renderer::clear_stops_coords() {
  stops_coords_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Point >&
Renderer::_internal_stops_coords() const {
  return stops_coords_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Point >&
Renderer::stops_coords() const {
  // @@protoc_insertion_point(field_map:serialization.Renderer.stops_coords)
  return _internal_stops_coords();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Point >*
Renderer::_internal_mutable_stops_coords() {
  return stops_coords_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Point >*
Renderer::mutable_stops_coords() {
  // @@protoc_insertion_point(field_mutable_map:serialization.Renderer.stops_coords)
  return _internal_mutable_stops_coords();
}

// map<string, .serialization.Color> bus_colors = 3;
inline int Renderer::_internal_bus_colors_size() const {
  return bus_colors_.size();
}
inline int Renderer::bus_colors_size() const {
  return _internal_bus_colors_size();
}
inline void Renderer::clear_bus_colors() {
  bus_colors_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Color >&
Renderer::_internal_bus_colors() const {
  return bus_colors_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Color >&
Renderer::bus_colors() const {
  // @@protoc_insertion_point(field_map:serialization.Renderer.bus_colors)
  return _internal_bus_colors();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Color >*
Renderer::_internal_mutable_bus_colors() {
  return bus_colors_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Color >*
Renderer::mutable_bus_colors() {
  // @@protoc_insertion_point(field_mutable_map:serialization.Renderer.bus_colors)
  return _internal_mutable_bus_colors();
}

// map<string, .serialization.Bus> buses = 4;
inline int Renderer::_internal_buses_size() const {
  return buses_.size();
}
inline int Renderer::buses_size() const {
  return _internal_buses_size();
}
inline void Renderer::clear_buses() {
  buses_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Bus >&
Renderer::_internal_buses() const {
  return buses_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Bus >&
Renderer::buses() const {
  // @@protoc_insertion_point(field_map:serialization.Renderer.buses)
  return _internal_buses();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Bus >*
Renderer::_internal_mutable_buses() {
  return buses_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Bus >*
Renderer::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_map:serialization.Renderer.buses)
  return _internal_mutable_buses();
}

// map<int32, .serialization.Point> company_coords = 5;
inline int Renderer::_internal_company_coords_size() const {
  return company_coords_.size();
}
inline int Renderer::company_coords_size() const {
  return _internal_company_coords_size();
}
inline void Renderer::clear_company_coords() {
  company_coords_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::serialization::Point >&
Renderer::_internal_company_coords() const {
  return company_coords_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::serialization::Point >&
Renderer::company_coords() const {
  // @@protoc_insertion_point(field_map:serialization.Renderer.company_coords)
  return _internal_company_coords();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::serialization::Point >*
Renderer::_internal_mutable_company_coords() {
  return company_coords_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::serialization::Point >*
Renderer::mutable_company_coords() {
  // @@protoc_insertion_point(field_mutable_map:serialization.Renderer.company_coords)
  return _internal_mutable_company_coords();
}

// -------------------------------------------------------------------

// NearbyStop

// string name = 1;
inline void NearbyStop::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NearbyStop::name() const {
  // @@protoc_insertion_point(field_get:serialization.NearbyStop.name)
  return _internal_name();
}
inline void NearbyStop::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:serialization.NearbyStop.name)
}
inline std::string* NearbyStop::mutable_name() {
  // @@protoc_insertion_point(field_mutable:serialization.NearbyStop.name)
  return _internal_mutable_name();
}
inline const std::string& NearbyStop::_internal_name() const {
  return name_.GetNoArena();
}
inline void NearbyStop::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NearbyStop::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.NearbyStop.name)
}
inline void NearbyStop::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.NearbyStop.name)
}
inline void NearbyStop::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.NearbyStop.name)
}
inline std::string* NearbyStop::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NearbyStop::release_name() {
  // @@protoc_insertion_point(field_release:serialization.NearbyStop.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NearbyStop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:serialization.NearbyStop.name)
}

// uint32 meters = 2;
inline void NearbyStop::clear_meters() {
  meters_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NearbyStop::_internal_meters() const {
  return meters_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NearbyStop::meters() const {
  // @@protoc_insertion_point(field_get:serialization.NearbyStop.meters)
  return _internal_meters();
}
inline void NearbyStop::_internal_set_meters(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  meters_ = value;
}
inline void NearbyStop::set_meters(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_meters(value);
  // @@protoc_insertion_point(field_set:serialization.NearbyStop.meters)
}

// -------------------------------------------------------------------

// Coords

// double lat = 1;
inline void Coords::clear_lat() {
  lat_ = 0;
}
inline double Coords::_internal_lat() const {
  return lat_;
}
inline double Coords::lat() const {
  // @@protoc_insertion_point(field_get:serialization.Coords.lat)
  return _internal_lat();
}
inline void Coords::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Coords::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:serialization.Coords.lat)
}

// double lon = 2;
inline void Coords::clear_lon() {
  lon_ = 0;
}
inline double Coords::_internal_lon() const {
  return lon_;
}
inline double Coords::lon() const {
  // @@protoc_insertion_point(field_get:serialization.Coords.lon)
  return _internal_lon();
}
inline void Coords::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void Coords::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:serialization.Coords.lon)
}

// -------------------------------------------------------------------

// AddressComponent

// string value = 1;
inline void AddressComponent::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddressComponent::value() const {
  // @@protoc_insertion_point(field_get:serialization.AddressComponent.value)
  return _internal_value();
}
inline void AddressComponent::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:serialization.AddressComponent.value)
}
inline std::string* AddressComponent::mutable_value() {
  // @@protoc_insertion_point(field_mutable:serialization.AddressComponent.value)
  return _internal_mutable_value();
}
inline const std::string& AddressComponent::_internal_value() const {
  return value_.GetNoArena();
}
inline void AddressComponent::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddressComponent::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.AddressComponent.value)
}
inline void AddressComponent::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.AddressComponent.value)
}
inline void AddressComponent::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.AddressComponent.value)
}
inline std::string* AddressComponent::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddressComponent::release_value() {
  // @@protoc_insertion_point(field_release:serialization.AddressComponent.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddressComponent::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:serialization.AddressComponent.value)
}

// -------------------------------------------------------------------

// Address

// string formatted = 1;
inline void Address::clear_formatted() {
  formatted_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Address::formatted() const {
  // @@protoc_insertion_point(field_get:serialization.Address.formatted)
  return _internal_formatted();
}
inline void Address::set_formatted(const std::string& value) {
  _internal_set_formatted(value);
  // @@protoc_insertion_point(field_set:serialization.Address.formatted)
}
inline std::string* Address::mutable_formatted() {
  // @@protoc_insertion_point(field_mutable:serialization.Address.formatted)
  return _internal_mutable_formatted();
}
inline const std::string& Address::_internal_formatted() const {
  return formatted_.GetNoArena();
}
inline void Address::_internal_set_formatted(const std::string& value) {
  
  formatted_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Address::set_formatted(std::string&& value) {
  
  formatted_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.Address.formatted)
}
inline void Address::set_formatted(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  formatted_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.Address.formatted)
}
inline void Address::set_formatted(const char* value, size_t size) {
  
  formatted_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.Address.formatted)
}
inline std::string* Address::_internal_mutable_formatted() {
  
  return formatted_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Address::release_formatted() {
  // @@protoc_insertion_point(field_release:serialization.Address.formatted)
  
  return formatted_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_formatted(std::string* formatted) {
  if (formatted != nullptr) {
    
  } else {
    
  }
  formatted_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), formatted);
  // @@protoc_insertion_point(field_set_allocated:serialization.Address.formatted)
}

// repeated .serialization.AddressComponent components = 2;
inline int Address::_internal_components_size() const {
  return components_.size();
}
inline int Address::components_size() const {
  return _internal_components_size();
}
inline void Address::clear_components() {
  components_.Clear();
}
inline ::serialization::AddressComponent* Address::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.Address.components)
  return components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::AddressComponent >*
Address::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:serialization.Address.components)
  return &components_;
}
inline const ::serialization::AddressComponent& Address::_internal_components(int index) const {
  return components_.Get(index);
}
inline const ::serialization::AddressComponent& Address::components(int index) const {
  // @@protoc_insertion_point(field_get:serialization.Address.components)
  return _internal_components(index);
}
inline ::serialization::AddressComponent* Address::_internal_add_components() {
  return components_.Add();
}
inline ::serialization::AddressComponent* Address::add_components() {
  // @@protoc_insertion_point(field_add:serialization.Address.components)
  return _internal_add_components();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::AddressComponent >&
Address::components() const {
  // @@protoc_insertion_point(field_list:serialization.Address.components)
  return components_;
}

// .serialization.Coords coords = 3;
inline bool Address::_internal_has_coords() const {
  return this != internal_default_instance() && coords_ != nullptr;
}
inline bool Address::has_coords() const {
  return _internal_has_coords();
}
inline void Address::clear_coords() {
  if (GetArenaNoVirtual() == nullptr && coords_ != nullptr) {
    delete coords_;
  }
  coords_ = nullptr;
}
inline const ::serialization::Coords& Address::_internal_coords() const {
  const ::serialization::Coords* p = coords_;
  return p != nullptr ? *p : *reinterpret_cast<const ::serialization::Coords*>(
      &::serialization::_Coords_default_instance_);
}
inline const ::serialization::Coords& Address::coords() const {
  // @@protoc_insertion_point(field_get:serialization.Address.coords)
  return _internal_coords();
}
inline ::serialization::Coords* Address::release_coords() {
  // @@protoc_insertion_point(field_release:serialization.Address.coords)
  
  ::serialization::Coords* temp = coords_;
  coords_ = nullptr;
  return temp;
}
inline ::serialization::Coords* Address::_internal_mutable_coords() {
  
  if (coords_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialization::Coords>(GetArenaNoVirtual());
    coords_ = p;
  }
  return coords_;
}
inline ::serialization::Coords* Address::mutable_coords() {
  // @@protoc_insertion_point(field_mutable:serialization.Address.coords)
  return _internal_mutable_coords();
}
inline void Address::set_allocated_coords(::serialization::Coords* coords) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete coords_;
  }
  if (coords) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      coords = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coords, submessage_arena);
    }
    
  } else {
    
  }
  coords_ = coords;
  // @@protoc_insertion_point(field_set_allocated:serialization.Address.coords)
}

// string comment = 4;
inline void Address::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Address::comment() const {
  // @@protoc_insertion_point(field_get:serialization.Address.comment)
  return _internal_comment();
}
inline void Address::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:serialization.Address.comment)
}
inline std::string* Address::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:serialization.Address.comment)
  return _internal_mutable_comment();
}
inline const std::string& Address::_internal_comment() const {
  return comment_.GetNoArena();
}
inline void Address::_internal_set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Address::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.Address.comment)
}
inline void Address::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.Address.comment)
}
inline void Address::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.Address.comment)
}
inline std::string* Address::_internal_mutable_comment() {
  
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Address::release_comment() {
  // @@protoc_insertion_point(field_release:serialization.Address.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:serialization.Address.comment)
}

// -------------------------------------------------------------------

// Name

// string value = 1;
inline void Name::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Name::value() const {
  // @@protoc_insertion_point(field_get:serialization.Name.value)
  return _internal_value();
}
inline void Name::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:serialization.Name.value)
}
inline std::string* Name::mutable_value() {
  // @@protoc_insertion_point(field_mutable:serialization.Name.value)
  return _internal_mutable_value();
}
inline const std::string& Name::_internal_value() const {
  return value_.GetNoArena();
}
inline void Name::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Name::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.Name.value)
}
inline void Name::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.Name.value)
}
inline void Name::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.Name.value)
}
inline std::string* Name::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Name::release_value() {
  // @@protoc_insertion_point(field_release:serialization.Name.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Name::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:serialization.Name.value)
}

// .serialization.Name.Type type = 2;
inline void Name::clear_type() {
  type_ = 0;
}
inline ::serialization::Name_Type Name::_internal_type() const {
  return static_cast< ::serialization::Name_Type >(type_);
}
inline ::serialization::Name_Type Name::type() const {
  // @@protoc_insertion_point(field_get:serialization.Name.type)
  return _internal_type();
}
inline void Name::_internal_set_type(::serialization::Name_Type value) {
  
  type_ = value;
}
inline void Name::set_type(::serialization::Name_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:serialization.Name.type)
}

// -------------------------------------------------------------------

// Phone

// string formatted = 1;
inline void Phone::clear_formatted() {
  formatted_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Phone::formatted() const {
  // @@protoc_insertion_point(field_get:serialization.Phone.formatted)
  return _internal_formatted();
}
inline void Phone::set_formatted(const std::string& value) {
  _internal_set_formatted(value);
  // @@protoc_insertion_point(field_set:serialization.Phone.formatted)
}
inline std::string* Phone::mutable_formatted() {
  // @@protoc_insertion_point(field_mutable:serialization.Phone.formatted)
  return _internal_mutable_formatted();
}
inline const std::string& Phone::_internal_formatted() const {
  return formatted_.GetNoArena();
}
inline void Phone::_internal_set_formatted(const std::string& value) {
  
  formatted_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Phone::set_formatted(std::string&& value) {
  
  formatted_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.Phone.formatted)
}
inline void Phone::set_formatted(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  formatted_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.Phone.formatted)
}
inline void Phone::set_formatted(const char* value, size_t size) {
  
  formatted_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.Phone.formatted)
}
inline std::string* Phone::_internal_mutable_formatted() {
  
  return formatted_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Phone::release_formatted() {
  // @@protoc_insertion_point(field_release:serialization.Phone.formatted)
  
  return formatted_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Phone::set_allocated_formatted(std::string* formatted) {
  if (formatted != nullptr) {
    
  } else {
    
  }
  formatted_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), formatted);
  // @@protoc_insertion_point(field_set_allocated:serialization.Phone.formatted)
}

// .serialization.Phone.Type type = 2;
inline void Phone::clear_type() {
  type_ = 0;
}
inline ::serialization::Phone_Type Phone::_internal_type() const {
  return static_cast< ::serialization::Phone_Type >(type_);
}
inline ::serialization::Phone_Type Phone::type() const {
  // @@protoc_insertion_point(field_get:serialization.Phone.type)
  return _internal_type();
}
inline void Phone::_internal_set_type(::serialization::Phone_Type value) {
  
  type_ = value;
}
inline void Phone::set_type(::serialization::Phone_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:serialization.Phone.type)
}

// string country_code = 3;
inline void Phone::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Phone::country_code() const {
  // @@protoc_insertion_point(field_get:serialization.Phone.country_code)
  return _internal_country_code();
}
inline void Phone::set_country_code(const std::string& value) {
  _internal_set_country_code(value);
  // @@protoc_insertion_point(field_set:serialization.Phone.country_code)
}
inline std::string* Phone::mutable_country_code() {
  // @@protoc_insertion_point(field_mutable:serialization.Phone.country_code)
  return _internal_mutable_country_code();
}
inline const std::string& Phone::_internal_country_code() const {
  return country_code_.GetNoArena();
}
inline void Phone::_internal_set_country_code(const std::string& value) {
  
  country_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Phone::set_country_code(std::string&& value) {
  
  country_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.Phone.country_code)
}
inline void Phone::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.Phone.country_code)
}
inline void Phone::set_country_code(const char* value, size_t size) {
  
  country_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.Phone.country_code)
}
inline std::string* Phone::_internal_mutable_country_code() {
  
  return country_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Phone::release_country_code() {
  // @@protoc_insertion_point(field_release:serialization.Phone.country_code)
  
  return country_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Phone::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    
  } else {
    
  }
  country_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:serialization.Phone.country_code)
}

// string local_code = 4;
inline void Phone::clear_local_code() {
  local_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Phone::local_code() const {
  // @@protoc_insertion_point(field_get:serialization.Phone.local_code)
  return _internal_local_code();
}
inline void Phone::set_local_code(const std::string& value) {
  _internal_set_local_code(value);
  // @@protoc_insertion_point(field_set:serialization.Phone.local_code)
}
inline std::string* Phone::mutable_local_code() {
  // @@protoc_insertion_point(field_mutable:serialization.Phone.local_code)
  return _internal_mutable_local_code();
}
inline const std::string& Phone::_internal_local_code() const {
  return local_code_.GetNoArena();
}
inline void Phone::_internal_set_local_code(const std::string& value) {
  
  local_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Phone::set_local_code(std::string&& value) {
  
  local_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.Phone.local_code)
}
inline void Phone::set_local_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.Phone.local_code)
}
inline void Phone::set_local_code(const char* value, size_t size) {
  
  local_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.Phone.local_code)
}
inline std::string* Phone::_internal_mutable_local_code() {
  
  return local_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Phone::release_local_code() {
  // @@protoc_insertion_point(field_release:serialization.Phone.local_code)
  
  return local_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Phone::set_allocated_local_code(std::string* local_code) {
  if (local_code != nullptr) {
    
  } else {
    
  }
  local_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_code);
  // @@protoc_insertion_point(field_set_allocated:serialization.Phone.local_code)
}

// string number = 5;
inline void Phone::clear_number() {
  number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Phone::number() const {
  // @@protoc_insertion_point(field_get:serialization.Phone.number)
  return _internal_number();
}
inline void Phone::set_number(const std::string& value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:serialization.Phone.number)
}
inline std::string* Phone::mutable_number() {
  // @@protoc_insertion_point(field_mutable:serialization.Phone.number)
  return _internal_mutable_number();
}
inline const std::string& Phone::_internal_number() const {
  return number_.GetNoArena();
}
inline void Phone::_internal_set_number(const std::string& value) {
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Phone::set_number(std::string&& value) {
  
  number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.Phone.number)
}
inline void Phone::set_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.Phone.number)
}
inline void Phone::set_number(const char* value, size_t size) {
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.Phone.number)
}
inline std::string* Phone::_internal_mutable_number() {
  
  return number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Phone::release_number() {
  // @@protoc_insertion_point(field_release:serialization.Phone.number)
  
  return number_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Phone::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:serialization.Phone.number)
}

// string extension = 6;
inline void Phone::clear_extension() {
  extension_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Phone::extension() const {
  // @@protoc_insertion_point(field_get:serialization.Phone.extension)
  return _internal_extension();
}
inline void Phone::set_extension(const std::string& value) {
  _internal_set_extension(value);
  // @@protoc_insertion_point(field_set:serialization.Phone.extension)
}
inline std::string* Phone::mutable_extension() {
  // @@protoc_insertion_point(field_mutable:serialization.Phone.extension)
  return _internal_mutable_extension();
}
inline const std::string& Phone::_internal_extension() const {
  return extension_.GetNoArena();
}
inline void Phone::_internal_set_extension(const std::string& value) {
  
  extension_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Phone::set_extension(std::string&& value) {
  
  extension_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.Phone.extension)
}
inline void Phone::set_extension(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extension_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.Phone.extension)
}
inline void Phone::set_extension(const char* value, size_t size) {
  
  extension_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.Phone.extension)
}
inline std::string* Phone::_internal_mutable_extension() {
  
  return extension_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Phone::release_extension() {
  // @@protoc_insertion_point(field_release:serialization.Phone.extension)
  
  return extension_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Phone::set_allocated_extension(std::string* extension) {
  if (extension != nullptr) {
    
  } else {
    
  }
  extension_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extension);
  // @@protoc_insertion_point(field_set_allocated:serialization.Phone.extension)
}

// string description = 7;
inline void Phone::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Phone::description() const {
  // @@protoc_insertion_point(field_get:serialization.Phone.description)
  return _internal_description();
}
inline void Phone::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:serialization.Phone.description)
}
inline std::string* Phone::mutable_description() {
  // @@protoc_insertion_point(field_mutable:serialization.Phone.description)
  return _internal_mutable_description();
}
inline const std::string& Phone::_internal_description() const {
  return description_.GetNoArena();
}
inline void Phone::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Phone::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.Phone.description)
}
inline void Phone::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.Phone.description)
}
inline void Phone::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.Phone.description)
}
inline std::string* Phone::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Phone::release_description() {
  // @@protoc_insertion_point(field_release:serialization.Phone.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Phone::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:serialization.Phone.description)
}

// -------------------------------------------------------------------

// WorkingTimeInterval

// .serialization.WorkingTimeInterval.Day day = 1;
inline void WorkingTimeInterval::clear_day() {
  day_ = 0;
}
inline ::serialization::WorkingTimeInterval_Day WorkingTimeInterval::_internal_day() const {
  return static_cast< ::serialization::WorkingTimeInterval_Day >(day_);
}
inline ::serialization::WorkingTimeInterval_Day WorkingTimeInterval::day() const {
  // @@protoc_insertion_point(field_get:serialization.WorkingTimeInterval.day)
  return _internal_day();
}
inline void WorkingTimeInterval::_internal_set_day(::serialization::WorkingTimeInterval_Day value) {
  
  day_ = value;
}
inline void WorkingTimeInterval::set_day(::serialization::WorkingTimeInterval_Day value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:serialization.WorkingTimeInterval.day)
}

// int32 minutes_from = 2;
inline void WorkingTimeInterval::clear_minutes_from() {
  minutes_from_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkingTimeInterval::_internal_minutes_from() const {
  return minutes_from_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkingTimeInterval::minutes_from() const {
  // @@protoc_insertion_point(field_get:serialization.WorkingTimeInterval.minutes_from)
  return _internal_minutes_from();
}
inline void WorkingTimeInterval::_internal_set_minutes_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minutes_from_ = value;
}
inline void WorkingTimeInterval::set_minutes_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minutes_from(value);
  // @@protoc_insertion_point(field_set:serialization.WorkingTimeInterval.minutes_from)
}

// int32 minutes_to = 3;
inline void WorkingTimeInterval::clear_minutes_to() {
  minutes_to_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkingTimeInterval::_internal_minutes_to() const {
  return minutes_to_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkingTimeInterval::minutes_to() const {
  // @@protoc_insertion_point(field_get:serialization.WorkingTimeInterval.minutes_to)
  return _internal_minutes_to();
}
inline void WorkingTimeInterval::_internal_set_minutes_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minutes_to_ = value;
}
inline void WorkingTimeInterval::set_minutes_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minutes_to(value);
  // @@protoc_insertion_point(field_set:serialization.WorkingTimeInterval.minutes_to)
}

// -------------------------------------------------------------------

// WorkingTime

// string formatted = 1;
inline void WorkingTime::clear_formatted() {
  formatted_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorkingTime::formatted() const {
  // @@protoc_insertion_point(field_get:serialization.WorkingTime.formatted)
  return _internal_formatted();
}
inline void WorkingTime::set_formatted(const std::string& value) {
  _internal_set_formatted(value);
  // @@protoc_insertion_point(field_set:serialization.WorkingTime.formatted)
}
inline std::string* WorkingTime::mutable_formatted() {
  // @@protoc_insertion_point(field_mutable:serialization.WorkingTime.formatted)
  return _internal_mutable_formatted();
}
inline const std::string& WorkingTime::_internal_formatted() const {
  return formatted_.GetNoArena();
}
inline void WorkingTime::_internal_set_formatted(const std::string& value) {
  
  formatted_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorkingTime::set_formatted(std::string&& value) {
  
  formatted_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.WorkingTime.formatted)
}
inline void WorkingTime::set_formatted(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  formatted_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.WorkingTime.formatted)
}
inline void WorkingTime::set_formatted(const char* value, size_t size) {
  
  formatted_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.WorkingTime.formatted)
}
inline std::string* WorkingTime::_internal_mutable_formatted() {
  
  return formatted_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkingTime::release_formatted() {
  // @@protoc_insertion_point(field_release:serialization.WorkingTime.formatted)
  
  return formatted_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkingTime::set_allocated_formatted(std::string* formatted) {
  if (formatted != nullptr) {
    
  } else {
    
  }
  formatted_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), formatted);
  // @@protoc_insertion_point(field_set_allocated:serialization.WorkingTime.formatted)
}

// repeated .serialization.WorkingTimeInterval intervals = 2;
inline int WorkingTime::_internal_intervals_size() const {
  return intervals_.size();
}
inline int WorkingTime::intervals_size() const {
  return _internal_intervals_size();
}
inline void WorkingTime::clear_intervals() {
  intervals_.Clear();
}
inline ::serialization::WorkingTimeInterval* WorkingTime::mutable_intervals(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.WorkingTime.intervals)
  return intervals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::WorkingTimeInterval >*
WorkingTime::mutable_intervals() {
  // @@protoc_insertion_point(field_mutable_list:serialization.WorkingTime.intervals)
  return &intervals_;
}
inline const ::serialization::WorkingTimeInterval& WorkingTime::_internal_intervals(int index) const {
  return intervals_.Get(index);
}
inline const ::serialization::WorkingTimeInterval& WorkingTime::intervals(int index) const {
  // @@protoc_insertion_point(field_get:serialization.WorkingTime.intervals)
  return _internal_intervals(index);
}
inline ::serialization::WorkingTimeInterval* WorkingTime::_internal_add_intervals() {
  return intervals_.Add();
}
inline ::serialization::WorkingTimeInterval* WorkingTime::add_intervals() {
  // @@protoc_insertion_point(field_add:serialization.WorkingTime.intervals)
  return _internal_add_intervals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::WorkingTimeInterval >&
WorkingTime::intervals() const {
  // @@protoc_insertion_point(field_list:serialization.WorkingTime.intervals)
  return intervals_;
}

// -------------------------------------------------------------------

// Url

// string value = 1;
inline void Url::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Url::value() const {
  // @@protoc_insertion_point(field_get:serialization.Url.value)
  return _internal_value();
}
inline void Url::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:serialization.Url.value)
}
inline std::string* Url::mutable_value() {
  // @@protoc_insertion_point(field_mutable:serialization.Url.value)
  return _internal_mutable_value();
}
inline const std::string& Url::_internal_value() const {
  return value_.GetNoArena();
}
inline void Url::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Url::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.Url.value)
}
inline void Url::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.Url.value)
}
inline void Url::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.Url.value)
}
inline std::string* Url::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Url::release_value() {
  // @@protoc_insertion_point(field_release:serialization.Url.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Url::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:serialization.Url.value)
}

// -------------------------------------------------------------------

// Company

// .serialization.Address address = 1;
inline bool Company::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool Company::has_address() const {
  return _internal_has_address();
}
inline void Company::clear_address() {
  if (GetArenaNoVirtual() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
inline const ::serialization::Address& Company::_internal_address() const {
  const ::serialization::Address* p = address_;
  return p != nullptr ? *p : *reinterpret_cast<const ::serialization::Address*>(
      &::serialization::_Address_default_instance_);
}
inline const ::serialization::Address& Company::address() const {
  // @@protoc_insertion_point(field_get:serialization.Company.address)
  return _internal_address();
}
inline ::serialization::Address* Company::release_address() {
  // @@protoc_insertion_point(field_release:serialization.Company.address)
  
  ::serialization::Address* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::serialization::Address* Company::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialization::Address>(GetArenaNoVirtual());
    address_ = p;
  }
  return address_;
}
inline ::serialization::Address* Company::mutable_address() {
  // @@protoc_insertion_point(field_mutable:serialization.Company.address)
  return _internal_mutable_address();
}
inline void Company::set_allocated_address(::serialization::Address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete address_;
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:serialization.Company.address)
}

// repeated .serialization.Name names = 2;
inline int Company::_internal_names_size() const {
  return names_.size();
}
inline int Company::names_size() const {
  return _internal_names_size();
}
inline void Company::clear_names() {
  names_.Clear();
}
inline ::serialization::Name* Company::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.Company.names)
  return names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Name >*
Company::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:serialization.Company.names)
  return &names_;
}
inline const ::serialization::Name& Company::_internal_names(int index) const {
  return names_.Get(index);
}
inline const ::serialization::Name& Company::names(int index) const {
  // @@protoc_insertion_point(field_get:serialization.Company.names)
  return _internal_names(index);
}
inline ::serialization::Name* Company::_internal_add_names() {
  return names_.Add();
}
inline ::serialization::Name* Company::add_names() {
  // @@protoc_insertion_point(field_add:serialization.Company.names)
  return _internal_add_names();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Name >&
Company::names() const {
  // @@protoc_insertion_point(field_list:serialization.Company.names)
  return names_;
}

// repeated .serialization.Phone phones = 3;
inline int Company::_internal_phones_size() const {
  return phones_.size();
}
inline int Company::phones_size() const {
  return _internal_phones_size();
}
inline void Company::clear_phones() {
  phones_.Clear();
}
inline ::serialization::Phone* Company::mutable_phones(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.Company.phones)
  return phones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Phone >*
Company::mutable_phones() {
  // @@protoc_insertion_point(field_mutable_list:serialization.Company.phones)
  return &phones_;
}
inline const ::serialization::Phone& Company::_internal_phones(int index) const {
  return phones_.Get(index);
}
inline const ::serialization::Phone& Company::phones(int index) const {
  // @@protoc_insertion_point(field_get:serialization.Company.phones)
  return _internal_phones(index);
}
inline ::serialization::Phone* Company::_internal_add_phones() {
  return phones_.Add();
}
inline ::serialization::Phone* Company::add_phones() {
  // @@protoc_insertion_point(field_add:serialization.Company.phones)
  return _internal_add_phones();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Phone >&
Company::phones() const {
  // @@protoc_insertion_point(field_list:serialization.Company.phones)
  return phones_;
}

// repeated .serialization.Url urls = 4;
inline int Company::_internal_urls_size() const {
  return urls_.size();
}
inline int Company::urls_size() const {
  return _internal_urls_size();
}
inline void Company::clear_urls() {
  urls_.Clear();
}
inline ::serialization::Url* Company::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.Company.urls)
  return urls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Url >*
Company::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:serialization.Company.urls)
  return &urls_;
}
inline const ::serialization::Url& Company::_internal_urls(int index) const {
  return urls_.Get(index);
}
inline const ::serialization::Url& Company::urls(int index) const {
  // @@protoc_insertion_point(field_get:serialization.Company.urls)
  return _internal_urls(index);
}
inline ::serialization::Url* Company::_internal_add_urls() {
  return urls_.Add();
}
inline ::serialization::Url* Company::add_urls() {
  // @@protoc_insertion_point(field_add:serialization.Company.urls)
  return _internal_add_urls();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Url >&
Company::urls() const {
  // @@protoc_insertion_point(field_list:serialization.Company.urls)
  return urls_;
}

// repeated uint64 rubrics = 5;
inline int Company::_internal_rubrics_size() const {
  return rubrics_.size();
}
inline int Company::rubrics_size() const {
  return _internal_rubrics_size();
}
inline void Company::clear_rubrics() {
  rubrics_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Company::_internal_rubrics(int index) const {
  return rubrics_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Company::rubrics(int index) const {
  // @@protoc_insertion_point(field_get:serialization.Company.rubrics)
  return _internal_rubrics(index);
}
inline void Company::set_rubrics(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  rubrics_.Set(index, value);
  // @@protoc_insertion_point(field_set:serialization.Company.rubrics)
}
inline void Company::_internal_add_rubrics(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  rubrics_.Add(value);
}
inline void Company::add_rubrics(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_rubrics(value);
  // @@protoc_insertion_point(field_add:serialization.Company.rubrics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Company::_internal_rubrics() const {
  return rubrics_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Company::rubrics() const {
  // @@protoc_insertion_point(field_list:serialization.Company.rubrics)
  return _internal_rubrics();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Company::_internal_mutable_rubrics() {
  return &rubrics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Company::mutable_rubrics() {
  // @@protoc_insertion_point(field_mutable_list:serialization.Company.rubrics)
  return _internal_mutable_rubrics();
}

// .serialization.WorkingTime working_time = 6;
inline bool Company::_internal_has_working_time() const {
  return this != internal_default_instance() && working_time_ != nullptr;
}
inline bool Company::has_working_time() const {
  return _internal_has_working_time();
}
inline void Company::clear_working_time() {
  if (GetArenaNoVirtual() == nullptr && working_time_ != nullptr) {
    delete working_time_;
  }
  working_time_ = nullptr;
}
inline const ::serialization::WorkingTime& Company::_internal_working_time() const {
  const ::serialization::WorkingTime* p = working_time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::serialization::WorkingTime*>(
      &::serialization::_WorkingTime_default_instance_);
}
inline const ::serialization::WorkingTime& Company::working_time() const {
  // @@protoc_insertion_point(field_get:serialization.Company.working_time)
  return _internal_working_time();
}
inline ::serialization::WorkingTime* Company::release_working_time() {
  // @@protoc_insertion_point(field_release:serialization.Company.working_time)
  
  ::serialization::WorkingTime* temp = working_time_;
  working_time_ = nullptr;
  return temp;
}
inline ::serialization::WorkingTime* Company::_internal_mutable_working_time() {
  
  if (working_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialization::WorkingTime>(GetArenaNoVirtual());
    working_time_ = p;
  }
  return working_time_;
}
inline ::serialization::WorkingTime* Company::mutable_working_time() {
  // @@protoc_insertion_point(field_mutable:serialization.Company.working_time)
  return _internal_mutable_working_time();
}
inline void Company::set_allocated_working_time(::serialization::WorkingTime* working_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete working_time_;
  }
  if (working_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      working_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, working_time, submessage_arena);
    }
    
  } else {
    
  }
  working_time_ = working_time;
  // @@protoc_insertion_point(field_set_allocated:serialization.Company.working_time)
}

// repeated .serialization.NearbyStop nearby_stops = 7;
inline int Company::_internal_nearby_stops_size() const {
  return nearby_stops_.size();
}
inline int Company::nearby_stops_size() const {
  return _internal_nearby_stops_size();
}
inline void Company::clear_nearby_stops() {
  nearby_stops_.Clear();
}
inline ::serialization::NearbyStop* Company::mutable_nearby_stops(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.Company.nearby_stops)
  return nearby_stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::NearbyStop >*
Company::mutable_nearby_stops() {
  // @@protoc_insertion_point(field_mutable_list:serialization.Company.nearby_stops)
  return &nearby_stops_;
}
inline const ::serialization::NearbyStop& Company::_internal_nearby_stops(int index) const {
  return nearby_stops_.Get(index);
}
inline const ::serialization::NearbyStop& Company::nearby_stops(int index) const {
  // @@protoc_insertion_point(field_get:serialization.Company.nearby_stops)
  return _internal_nearby_stops(index);
}
inline ::serialization::NearbyStop* Company::_internal_add_nearby_stops() {
  return nearby_stops_.Add();
}
inline ::serialization::NearbyStop* Company::add_nearby_stops() {
  // @@protoc_insertion_point(field_add:serialization.Company.nearby_stops)
  return _internal_add_nearby_stops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::NearbyStop >&
Company::nearby_stops() const {
  // @@protoc_insertion_point(field_list:serialization.Company.nearby_stops)
  return nearby_stops_;
}

// -------------------------------------------------------------------

// Rubric

// string name = 1;
inline void Rubric::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Rubric::name() const {
  // @@protoc_insertion_point(field_get:serialization.Rubric.name)
  return _internal_name();
}
inline void Rubric::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:serialization.Rubric.name)
}
inline std::string* Rubric::mutable_name() {
  // @@protoc_insertion_point(field_mutable:serialization.Rubric.name)
  return _internal_mutable_name();
}
inline const std::string& Rubric::_internal_name() const {
  return name_.GetNoArena();
}
inline void Rubric::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Rubric::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serialization.Rubric.name)
}
inline void Rubric::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serialization.Rubric.name)
}
inline void Rubric::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serialization.Rubric.name)
}
inline std::string* Rubric::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Rubric::release_name() {
  // @@protoc_insertion_point(field_release:serialization.Rubric.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Rubric::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:serialization.Rubric.name)
}

// repeated string keywords = 2;
inline int Rubric::_internal_keywords_size() const {
  return keywords_.size();
}
inline int Rubric::keywords_size() const {
  return _internal_keywords_size();
}
inline void Rubric::clear_keywords() {
  keywords_.Clear();
}
inline std::string* Rubric::add_keywords() {
  // @@protoc_insertion_point(field_add_mutable:serialization.Rubric.keywords)
  return _internal_add_keywords();
}
inline const std::string& Rubric::_internal_keywords(int index) const {
  return keywords_.Get(index);
}
inline const std::string& Rubric::keywords(int index) const {
  // @@protoc_insertion_point(field_get:serialization.Rubric.keywords)
  return _internal_keywords(index);
}
inline std::string* Rubric::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.Rubric.keywords)
  return keywords_.Mutable(index);
}
inline void Rubric::set_keywords(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:serialization.Rubric.keywords)
  keywords_.Mutable(index)->assign(value);
}
inline void Rubric::set_keywords(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:serialization.Rubric.keywords)
  keywords_.Mutable(index)->assign(std::move(value));
}
inline void Rubric::set_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:serialization.Rubric.keywords)
}
inline void Rubric::set_keywords(int index, const char* value, size_t size) {
  keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:serialization.Rubric.keywords)
}
inline std::string* Rubric::_internal_add_keywords() {
  return keywords_.Add();
}
inline void Rubric::add_keywords(const std::string& value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:serialization.Rubric.keywords)
}
inline void Rubric::add_keywords(std::string&& value) {
  keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:serialization.Rubric.keywords)
}
inline void Rubric::add_keywords(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:serialization.Rubric.keywords)
}
inline void Rubric::add_keywords(const char* value, size_t size) {
  keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:serialization.Rubric.keywords)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Rubric::keywords() const {
  // @@protoc_insertion_point(field_list:serialization.Rubric.keywords)
  return keywords_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Rubric::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:serialization.Rubric.keywords)
  return &keywords_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Database

// repeated .serialization.Company companies = 1;
inline int Database::_internal_companies_size() const {
  return companies_.size();
}
inline int Database::companies_size() const {
  return _internal_companies_size();
}
inline void Database::clear_companies() {
  companies_.Clear();
}
inline ::serialization::Company* Database::mutable_companies(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.Database.companies)
  return companies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Company >*
Database::mutable_companies() {
  // @@protoc_insertion_point(field_mutable_list:serialization.Database.companies)
  return &companies_;
}
inline const ::serialization::Company& Database::_internal_companies(int index) const {
  return companies_.Get(index);
}
inline const ::serialization::Company& Database::companies(int index) const {
  // @@protoc_insertion_point(field_get:serialization.Database.companies)
  return _internal_companies(index);
}
inline ::serialization::Company* Database::_internal_add_companies() {
  return companies_.Add();
}
inline ::serialization::Company* Database::add_companies() {
  // @@protoc_insertion_point(field_add:serialization.Database.companies)
  return _internal_add_companies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Company >&
Database::companies() const {
  // @@protoc_insertion_point(field_list:serialization.Database.companies)
  return companies_;
}

// map<uint64, .serialization.Rubric> rubrics = 2;
inline int Database::_internal_rubrics_size() const {
  return rubrics_.size();
}
inline int Database::rubrics_size() const {
  return _internal_rubrics_size();
}
inline void Database::clear_rubrics() {
  rubrics_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::serialization::Rubric >&
Database::_internal_rubrics() const {
  return rubrics_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::serialization::Rubric >&
Database::rubrics() const {
  // @@protoc_insertion_point(field_map:serialization.Database.rubrics)
  return _internal_rubrics();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::serialization::Rubric >*
Database::_internal_mutable_rubrics() {
  return rubrics_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::serialization::Rubric >*
Database::mutable_rubrics() {
  // @@protoc_insertion_point(field_mutable_map:serialization.Database.rubrics)
  return _internal_mutable_rubrics();
}

// -------------------------------------------------------------------

// TransportCatalog

// repeated .serialization.BusInfo buses = 1;
inline int TransportCatalog::_internal_buses_size() const {
  return buses_.size();
}
inline int TransportCatalog::buses_size() const {
  return _internal_buses_size();
}
inline void TransportCatalog::clear_buses() {
  buses_.Clear();
}
inline ::serialization::BusInfo* TransportCatalog::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.TransportCatalog.buses)
  return buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::BusInfo >*
TransportCatalog::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:serialization.TransportCatalog.buses)
  return &buses_;
}
inline const ::serialization::BusInfo& TransportCatalog::_internal_buses(int index) const {
  return buses_.Get(index);
}
inline const ::serialization::BusInfo& TransportCatalog::buses(int index) const {
  // @@protoc_insertion_point(field_get:serialization.TransportCatalog.buses)
  return _internal_buses(index);
}
inline ::serialization::BusInfo* TransportCatalog::_internal_add_buses() {
  return buses_.Add();
}
inline ::serialization::BusInfo* TransportCatalog::add_buses() {
  // @@protoc_insertion_point(field_add:serialization.TransportCatalog.buses)
  return _internal_add_buses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::BusInfo >&
TransportCatalog::buses() const {
  // @@protoc_insertion_point(field_list:serialization.TransportCatalog.buses)
  return buses_;
}

// repeated .serialization.StopInfo stops = 2;
inline int TransportCatalog::_internal_stops_size() const {
  return stops_.size();
}
inline int TransportCatalog::stops_size() const {
  return _internal_stops_size();
}
inline void TransportCatalog::clear_stops() {
  stops_.Clear();
}
inline ::serialization::StopInfo* TransportCatalog::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.TransportCatalog.stops)
  return stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::StopInfo >*
TransportCatalog::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:serialization.TransportCatalog.stops)
  return &stops_;
}
inline const ::serialization::StopInfo& TransportCatalog::_internal_stops(int index) const {
  return stops_.Get(index);
}
inline const ::serialization::StopInfo& TransportCatalog::stops(int index) const {
  // @@protoc_insertion_point(field_get:serialization.TransportCatalog.stops)
  return _internal_stops(index);
}
inline ::serialization::StopInfo* TransportCatalog::_internal_add_stops() {
  return stops_.Add();
}
inline ::serialization::StopInfo* TransportCatalog::add_stops() {
  // @@protoc_insertion_point(field_add:serialization.TransportCatalog.stops)
  return _internal_add_stops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::StopInfo >&
TransportCatalog::stops() const {
  // @@protoc_insertion_point(field_list:serialization.TransportCatalog.stops)
  return stops_;
}

// .serialization.Router router = 3;
inline bool TransportCatalog::_internal_has_router() const {
  return this != internal_default_instance() && router_ != nullptr;
}
inline bool TransportCatalog::has_router() const {
  return _internal_has_router();
}
inline void TransportCatalog::clear_router() {
  if (GetArenaNoVirtual() == nullptr && router_ != nullptr) {
    delete router_;
  }
  router_ = nullptr;
}
inline const ::serialization::Router& TransportCatalog::_internal_router() const {
  const ::serialization::Router* p = router_;
  return p != nullptr ? *p : *reinterpret_cast<const ::serialization::Router*>(
      &::serialization::_Router_default_instance_);
}
inline const ::serialization::Router& TransportCatalog::router() const {
  // @@protoc_insertion_point(field_get:serialization.TransportCatalog.router)
  return _internal_router();
}
inline ::serialization::Router* TransportCatalog::release_router() {
  // @@protoc_insertion_point(field_release:serialization.TransportCatalog.router)
  
  ::serialization::Router* temp = router_;
  router_ = nullptr;
  return temp;
}
inline ::serialization::Router* TransportCatalog::_internal_mutable_router() {
  
  if (router_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialization::Router>(GetArenaNoVirtual());
    router_ = p;
  }
  return router_;
}
inline ::serialization::Router* TransportCatalog::mutable_router() {
  // @@protoc_insertion_point(field_mutable:serialization.TransportCatalog.router)
  return _internal_mutable_router();
}
inline void TransportCatalog::set_allocated_router(::serialization::Router* router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete router_;
  }
  if (router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router, submessage_arena);
    }
    
  } else {
    
  }
  router_ = router;
  // @@protoc_insertion_point(field_set_allocated:serialization.TransportCatalog.router)
}

// .serialization.Renderer renderer = 4;
inline bool TransportCatalog::_internal_has_renderer() const {
  return this != internal_default_instance() && renderer_ != nullptr;
}
inline bool TransportCatalog::has_renderer() const {
  return _internal_has_renderer();
}
inline void TransportCatalog::clear_renderer() {
  if (GetArenaNoVirtual() == nullptr && renderer_ != nullptr) {
    delete renderer_;
  }
  renderer_ = nullptr;
}
inline const ::serialization::Renderer& TransportCatalog::_internal_renderer() const {
  const ::serialization::Renderer* p = renderer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::serialization::Renderer*>(
      &::serialization::_Renderer_default_instance_);
}
inline const ::serialization::Renderer& TransportCatalog::renderer() const {
  // @@protoc_insertion_point(field_get:serialization.TransportCatalog.renderer)
  return _internal_renderer();
}
inline ::serialization::Renderer* TransportCatalog::release_renderer() {
  // @@protoc_insertion_point(field_release:serialization.TransportCatalog.renderer)
  
  ::serialization::Renderer* temp = renderer_;
  renderer_ = nullptr;
  return temp;
}
inline ::serialization::Renderer* TransportCatalog::_internal_mutable_renderer() {
  
  if (renderer_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialization::Renderer>(GetArenaNoVirtual());
    renderer_ = p;
  }
  return renderer_;
}
inline ::serialization::Renderer* TransportCatalog::mutable_renderer() {
  // @@protoc_insertion_point(field_mutable:serialization.TransportCatalog.renderer)
  return _internal_mutable_renderer();
}
inline void TransportCatalog::set_allocated_renderer(::serialization::Renderer* renderer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete renderer_;
  }
  if (renderer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      renderer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderer, submessage_arena);
    }
    
  } else {
    
  }
  renderer_ = renderer;
  // @@protoc_insertion_point(field_set_allocated:serialization.TransportCatalog.renderer)
}

// .serialization.Database database = 5;
inline bool TransportCatalog::_internal_has_database() const {
  return this != internal_default_instance() && database_ != nullptr;
}
inline bool TransportCatalog::has_database() const {
  return _internal_has_database();
}
inline void TransportCatalog::clear_database() {
  if (GetArenaNoVirtual() == nullptr && database_ != nullptr) {
    delete database_;
  }
  database_ = nullptr;
}
inline const ::serialization::Database& TransportCatalog::_internal_database() const {
  const ::serialization::Database* p = database_;
  return p != nullptr ? *p : *reinterpret_cast<const ::serialization::Database*>(
      &::serialization::_Database_default_instance_);
}
inline const ::serialization::Database& TransportCatalog::database() const {
  // @@protoc_insertion_point(field_get:serialization.TransportCatalog.database)
  return _internal_database();
}
inline ::serialization::Database* TransportCatalog::release_database() {
  // @@protoc_insertion_point(field_release:serialization.TransportCatalog.database)
  
  ::serialization::Database* temp = database_;
  database_ = nullptr;
  return temp;
}
inline ::serialization::Database* TransportCatalog::_internal_mutable_database() {
  
  if (database_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialization::Database>(GetArenaNoVirtual());
    database_ = p;
  }
  return database_;
}
inline ::serialization::Database* TransportCatalog::mutable_database() {
  // @@protoc_insertion_point(field_mutable:serialization.TransportCatalog.database)
  return _internal_mutable_database();
}
inline void TransportCatalog::set_allocated_database(::serialization::Database* database) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete database_;
  }
  if (database) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      database = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database, submessage_arena);
    }
    
  } else {
    
  }
  database_ = database;
  // @@protoc_insertion_point(field_set_allocated:serialization.TransportCatalog.database)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serialization

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::serialization::AddressComponent_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::serialization::AddressComponent_Type>() {
  return ::serialization::AddressComponent_Type_descriptor();
}
template <> struct is_proto_enum< ::serialization::Name_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::serialization::Name_Type>() {
  return ::serialization::Name_Type_descriptor();
}
template <> struct is_proto_enum< ::serialization::Phone_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::serialization::Phone_Type>() {
  return ::serialization::Phone_Type_descriptor();
}
template <> struct is_proto_enum< ::serialization::WorkingTimeInterval_Day> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::serialization::WorkingTimeInterval_Day>() {
  return ::serialization::WorkingTimeInterval_Day_descriptor();
}
template <> struct is_proto_enum< ::serialization::EdgeInfoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::serialization::EdgeInfoType>() {
  return ::serialization::EdgeInfoType_descriptor();
}
template <> struct is_proto_enum< ::serialization::ColorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::serialization::ColorType>() {
  return ::serialization::ColorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalog_2eproto
