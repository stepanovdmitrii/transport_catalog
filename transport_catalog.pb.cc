// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalog.proto

#include "transport_catalog.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Address_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddressComponent_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bus_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BusInfo_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Company_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coords_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Database_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Database_RubricsEntry_DoNotUse_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Edge_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EdgeInfo_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Graph_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Name_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NearbyStop_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Phone_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RenderSettings_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Renderer_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Renderer_BusColorsEntry_DoNotUse_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Renderer_BusesEntry_DoNotUse_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Renderer_CompanyCoordsEntry_DoNotUse_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Renderer_StopsCoordsEntry_DoNotUse_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteInternalData_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RouteInternalDataVector_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Router_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Router_CompaniesVerticiesEntry_DoNotUse_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RouterImpl_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rubric_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopInfo_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopVertexIds_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Url_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VertexInfo_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkingTime_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkingTimeInterval_transport_5fcatalog_2eproto;
namespace serialization {
class StopInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopInfo> _instance;
} _StopInfo_default_instance_;
class BusInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BusInfo> _instance;
} _BusInfo_default_instance_;
class EdgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Edge> _instance;
} _Edge_default_instance_;
class GraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Graph> _instance;
} _Graph_default_instance_;
class StopVertexIdsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopVertexIds> _instance;
} _StopVertexIds_default_instance_;
class VertexInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VertexInfo> _instance;
} _VertexInfo_default_instance_;
class EdgeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EdgeInfo> _instance;
} _EdgeInfo_default_instance_;
class RouteInternalDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteInternalData> _instance;
} _RouteInternalData_default_instance_;
class RouteInternalDataVectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteInternalDataVector> _instance;
} _RouteInternalDataVector_default_instance_;
class RouterImplDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouterImpl> _instance;
} _RouterImpl_default_instance_;
class Router_CompaniesVerticiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Router_CompaniesVerticiesEntry_DoNotUse> _instance;
} _Router_CompaniesVerticiesEntry_DoNotUse_default_instance_;
class RouterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Router> _instance;
} _Router_default_instance_;
class ColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Color> _instance;
} _Color_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class RenderSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RenderSettings> _instance;
} _RenderSettings_default_instance_;
class BusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Bus> _instance;
} _Bus_default_instance_;
class Renderer_StopsCoordsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Renderer_StopsCoordsEntry_DoNotUse> _instance;
} _Renderer_StopsCoordsEntry_DoNotUse_default_instance_;
class Renderer_BusColorsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Renderer_BusColorsEntry_DoNotUse> _instance;
} _Renderer_BusColorsEntry_DoNotUse_default_instance_;
class Renderer_BusesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Renderer_BusesEntry_DoNotUse> _instance;
} _Renderer_BusesEntry_DoNotUse_default_instance_;
class Renderer_CompanyCoordsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Renderer_CompanyCoordsEntry_DoNotUse> _instance;
} _Renderer_CompanyCoordsEntry_DoNotUse_default_instance_;
class RendererDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Renderer> _instance;
} _Renderer_default_instance_;
class NearbyStopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NearbyStop> _instance;
} _NearbyStop_default_instance_;
class CoordsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Coords> _instance;
} _Coords_default_instance_;
class AddressComponentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddressComponent> _instance;
} _AddressComponent_default_instance_;
class AddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Address> _instance;
} _Address_default_instance_;
class NameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Name> _instance;
} _Name_default_instance_;
class PhoneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Phone> _instance;
} _Phone_default_instance_;
class WorkingTimeIntervalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkingTimeInterval> _instance;
} _WorkingTimeInterval_default_instance_;
class WorkingTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkingTime> _instance;
} _WorkingTime_default_instance_;
class UrlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Url> _instance;
} _Url_default_instance_;
class CompanyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Company> _instance;
} _Company_default_instance_;
class RubricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rubric> _instance;
} _Rubric_default_instance_;
class Database_RubricsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Database_RubricsEntry_DoNotUse> _instance;
} _Database_RubricsEntry_DoNotUse_default_instance_;
class DatabaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Database> _instance;
} _Database_default_instance_;
class TransportCatalogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransportCatalog> _instance;
} _TransportCatalog_default_instance_;
}  // namespace serialization
static void InitDefaultsscc_info_Address_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Address_default_instance_;
    new (ptr) ::serialization::Address();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::Address::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Address_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Address_transport_5fcatalog_2eproto}, {
      &scc_info_AddressComponent_transport_5fcatalog_2eproto.base,
      &scc_info_Coords_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_AddressComponent_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_AddressComponent_default_instance_;
    new (ptr) ::serialization::AddressComponent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::AddressComponent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddressComponent_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddressComponent_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_Bus_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Bus_default_instance_;
    new (ptr) ::serialization::Bus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::Bus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bus_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Bus_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_BusInfo_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_BusInfo_default_instance_;
    new (ptr) ::serialization::BusInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::BusInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BusInfo_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BusInfo_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_Color_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Color_default_instance_;
    new (ptr) ::serialization::Color();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::Color::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Color_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_Company_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Company_default_instance_;
    new (ptr) ::serialization::Company();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::Company::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Company_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Company_transport_5fcatalog_2eproto}, {
      &scc_info_Address_transport_5fcatalog_2eproto.base,
      &scc_info_Name_transport_5fcatalog_2eproto.base,
      &scc_info_Phone_transport_5fcatalog_2eproto.base,
      &scc_info_Url_transport_5fcatalog_2eproto.base,
      &scc_info_WorkingTime_transport_5fcatalog_2eproto.base,
      &scc_info_NearbyStop_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_Coords_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Coords_default_instance_;
    new (ptr) ::serialization::Coords();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::Coords::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coords_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Coords_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_Database_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Database_default_instance_;
    new (ptr) ::serialization::Database();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::Database::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Database_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Database_transport_5fcatalog_2eproto}, {
      &scc_info_Company_transport_5fcatalog_2eproto.base,
      &scc_info_Database_RubricsEntry_DoNotUse_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_Database_RubricsEntry_DoNotUse_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Database_RubricsEntry_DoNotUse_default_instance_;
    new (ptr) ::serialization::Database_RubricsEntry_DoNotUse();
  }
  ::serialization::Database_RubricsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Database_RubricsEntry_DoNotUse_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Database_RubricsEntry_DoNotUse_transport_5fcatalog_2eproto}, {
      &scc_info_Rubric_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_Edge_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Edge_default_instance_;
    new (ptr) ::serialization::Edge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::Edge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Edge_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Edge_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_EdgeInfo_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_EdgeInfo_default_instance_;
    new (ptr) ::serialization::EdgeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::EdgeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EdgeInfo_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EdgeInfo_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_Graph_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Graph_default_instance_;
    new (ptr) ::serialization::Graph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::Graph::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Graph_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Graph_transport_5fcatalog_2eproto}, {
      &scc_info_Edge_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_Name_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Name_default_instance_;
    new (ptr) ::serialization::Name();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::Name::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Name_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Name_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_NearbyStop_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_NearbyStop_default_instance_;
    new (ptr) ::serialization::NearbyStop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::NearbyStop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NearbyStop_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NearbyStop_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_Phone_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Phone_default_instance_;
    new (ptr) ::serialization::Phone();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::Phone::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Phone_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Phone_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_Point_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Point_default_instance_;
    new (ptr) ::serialization::Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_RenderSettings_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_RenderSettings_default_instance_;
    new (ptr) ::serialization::RenderSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::RenderSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RenderSettings_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RenderSettings_transport_5fcatalog_2eproto}, {
      &scc_info_Color_transport_5fcatalog_2eproto.base,
      &scc_info_Point_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_Renderer_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Renderer_default_instance_;
    new (ptr) ::serialization::Renderer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::Renderer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Renderer_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Renderer_transport_5fcatalog_2eproto}, {
      &scc_info_RenderSettings_transport_5fcatalog_2eproto.base,
      &scc_info_Renderer_StopsCoordsEntry_DoNotUse_transport_5fcatalog_2eproto.base,
      &scc_info_Renderer_BusColorsEntry_DoNotUse_transport_5fcatalog_2eproto.base,
      &scc_info_Renderer_BusesEntry_DoNotUse_transport_5fcatalog_2eproto.base,
      &scc_info_Renderer_CompanyCoordsEntry_DoNotUse_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_Renderer_BusColorsEntry_DoNotUse_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Renderer_BusColorsEntry_DoNotUse_default_instance_;
    new (ptr) ::serialization::Renderer_BusColorsEntry_DoNotUse();
  }
  ::serialization::Renderer_BusColorsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Renderer_BusColorsEntry_DoNotUse_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Renderer_BusColorsEntry_DoNotUse_transport_5fcatalog_2eproto}, {
      &scc_info_Color_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_Renderer_BusesEntry_DoNotUse_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Renderer_BusesEntry_DoNotUse_default_instance_;
    new (ptr) ::serialization::Renderer_BusesEntry_DoNotUse();
  }
  ::serialization::Renderer_BusesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Renderer_BusesEntry_DoNotUse_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Renderer_BusesEntry_DoNotUse_transport_5fcatalog_2eproto}, {
      &scc_info_Bus_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_Renderer_CompanyCoordsEntry_DoNotUse_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Renderer_CompanyCoordsEntry_DoNotUse_default_instance_;
    new (ptr) ::serialization::Renderer_CompanyCoordsEntry_DoNotUse();
  }
  ::serialization::Renderer_CompanyCoordsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Renderer_CompanyCoordsEntry_DoNotUse_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Renderer_CompanyCoordsEntry_DoNotUse_transport_5fcatalog_2eproto}, {
      &scc_info_Point_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_Renderer_StopsCoordsEntry_DoNotUse_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Renderer_StopsCoordsEntry_DoNotUse_default_instance_;
    new (ptr) ::serialization::Renderer_StopsCoordsEntry_DoNotUse();
  }
  ::serialization::Renderer_StopsCoordsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Renderer_StopsCoordsEntry_DoNotUse_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Renderer_StopsCoordsEntry_DoNotUse_transport_5fcatalog_2eproto}, {
      &scc_info_Point_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_RouteInternalData_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_RouteInternalData_default_instance_;
    new (ptr) ::serialization::RouteInternalData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::RouteInternalData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteInternalData_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteInternalData_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_RouteInternalDataVector_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_RouteInternalDataVector_default_instance_;
    new (ptr) ::serialization::RouteInternalDataVector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::RouteInternalDataVector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RouteInternalDataVector_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RouteInternalDataVector_transport_5fcatalog_2eproto}, {
      &scc_info_RouteInternalData_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_Router_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Router_default_instance_;
    new (ptr) ::serialization::Router();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::Router::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Router_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Router_transport_5fcatalog_2eproto}, {
      &scc_info_Graph_transport_5fcatalog_2eproto.base,
      &scc_info_RouterImpl_transport_5fcatalog_2eproto.base,
      &scc_info_StopVertexIds_transport_5fcatalog_2eproto.base,
      &scc_info_VertexInfo_transport_5fcatalog_2eproto.base,
      &scc_info_EdgeInfo_transport_5fcatalog_2eproto.base,
      &scc_info_Router_CompaniesVerticiesEntry_DoNotUse_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_Router_CompaniesVerticiesEntry_DoNotUse_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Router_CompaniesVerticiesEntry_DoNotUse_default_instance_;
    new (ptr) ::serialization::Router_CompaniesVerticiesEntry_DoNotUse();
  }
  ::serialization::Router_CompaniesVerticiesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Router_CompaniesVerticiesEntry_DoNotUse_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Router_CompaniesVerticiesEntry_DoNotUse_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_RouterImpl_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_RouterImpl_default_instance_;
    new (ptr) ::serialization::RouterImpl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::RouterImpl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RouterImpl_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RouterImpl_transport_5fcatalog_2eproto}, {
      &scc_info_RouteInternalDataVector_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_Rubric_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Rubric_default_instance_;
    new (ptr) ::serialization::Rubric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::Rubric::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rubric_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rubric_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_StopInfo_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_StopInfo_default_instance_;
    new (ptr) ::serialization::StopInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::StopInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopInfo_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopInfo_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_StopVertexIds_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_StopVertexIds_default_instance_;
    new (ptr) ::serialization::StopVertexIds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::StopVertexIds::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopVertexIds_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopVertexIds_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_TransportCatalog_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_TransportCatalog_default_instance_;
    new (ptr) ::serialization::TransportCatalog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::TransportCatalog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TransportCatalog_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_TransportCatalog_transport_5fcatalog_2eproto}, {
      &scc_info_BusInfo_transport_5fcatalog_2eproto.base,
      &scc_info_StopInfo_transport_5fcatalog_2eproto.base,
      &scc_info_Router_transport_5fcatalog_2eproto.base,
      &scc_info_Renderer_transport_5fcatalog_2eproto.base,
      &scc_info_Database_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_Url_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_Url_default_instance_;
    new (ptr) ::serialization::Url();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::Url::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Url_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Url_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_VertexInfo_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_VertexInfo_default_instance_;
    new (ptr) ::serialization::VertexInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::VertexInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VertexInfo_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VertexInfo_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_WorkingTime_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_WorkingTime_default_instance_;
    new (ptr) ::serialization::WorkingTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::WorkingTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkingTime_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorkingTime_transport_5fcatalog_2eproto}, {
      &scc_info_WorkingTimeInterval_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_WorkingTimeInterval_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serialization::_WorkingTimeInterval_default_instance_;
    new (ptr) ::serialization::WorkingTimeInterval();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serialization::WorkingTimeInterval::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkingTimeInterval_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorkingTimeInterval_transport_5fcatalog_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_5fcatalog_2eproto[35];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_transport_5fcatalog_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_5fcatalog_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transport_5fcatalog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::StopInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::StopInfo, name_),
  PROTOBUF_FIELD_OFFSET(::serialization::StopInfo, buses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::BusInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::BusInfo, name_),
  PROTOBUF_FIELD_OFFSET(::serialization::BusInfo, stop_count_),
  PROTOBUF_FIELD_OFFSET(::serialization::BusInfo, unique_stop_count_),
  PROTOBUF_FIELD_OFFSET(::serialization::BusInfo, road_route_length_),
  PROTOBUF_FIELD_OFFSET(::serialization::BusInfo, geo_route_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Edge, from_),
  PROTOBUF_FIELD_OFFSET(::serialization::Edge, to_),
  PROTOBUF_FIELD_OFFSET(::serialization::Edge, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::Graph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Graph, edges_),
  PROTOBUF_FIELD_OFFSET(::serialization::Graph, vertex_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::StopVertexIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::StopVertexIds, name_),
  PROTOBUF_FIELD_OFFSET(::serialization::StopVertexIds, in_),
  PROTOBUF_FIELD_OFFSET(::serialization::StopVertexIds, out_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::VertexInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::VertexInfo, name_),
  PROTOBUF_FIELD_OFFSET(::serialization::VertexInfo, company_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::EdgeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::EdgeInfo, type_),
  PROTOBUF_FIELD_OFFSET(::serialization::EdgeInfo, bus_name_),
  PROTOBUF_FIELD_OFFSET(::serialization::EdgeInfo, bus_start_stop_idx_),
  PROTOBUF_FIELD_OFFSET(::serialization::EdgeInfo, bus_finish_stop_idx_),
  PROTOBUF_FIELD_OFFSET(::serialization::EdgeInfo, stop_from_),
  PROTOBUF_FIELD_OFFSET(::serialization::EdgeInfo, company_id_),
  PROTOBUF_FIELD_OFFSET(::serialization::EdgeInfo, company_name_),
  PROTOBUF_FIELD_OFFSET(::serialization::EdgeInfo, company_display_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::RouteInternalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::RouteInternalData, has_value_),
  PROTOBUF_FIELD_OFFSET(::serialization::RouteInternalData, weight_),
  PROTOBUF_FIELD_OFFSET(::serialization::RouteInternalData, has_prev_edge_),
  PROTOBUF_FIELD_OFFSET(::serialization::RouteInternalData, prev_edge_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::RouteInternalDataVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::RouteInternalDataVector, vector_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::RouterImpl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::RouterImpl, vectors_),
  PROTOBUF_FIELD_OFFSET(::serialization::Router_CompaniesVerticiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::serialization::Router_CompaniesVerticiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Router_CompaniesVerticiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::serialization::Router_CompaniesVerticiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::Router, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Router, bus_wait_time_),
  PROTOBUF_FIELD_OFFSET(::serialization::Router, bus_velocity_),
  PROTOBUF_FIELD_OFFSET(::serialization::Router, graph_),
  PROTOBUF_FIELD_OFFSET(::serialization::Router, route_impl_),
  PROTOBUF_FIELD_OFFSET(::serialization::Router, stop_vertex_ids_),
  PROTOBUF_FIELD_OFFSET(::serialization::Router, vertex_infos_),
  PROTOBUF_FIELD_OFFSET(::serialization::Router, edge_infos_),
  PROTOBUF_FIELD_OFFSET(::serialization::Router, pedestrian_velocity_),
  PROTOBUF_FIELD_OFFSET(::serialization::Router, companies_verticies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Color, type_),
  PROTOBUF_FIELD_OFFSET(::serialization::Color, color_string_),
  PROTOBUF_FIELD_OFFSET(::serialization::Color, red_),
  PROTOBUF_FIELD_OFFSET(::serialization::Color, green_),
  PROTOBUF_FIELD_OFFSET(::serialization::Color, blue_),
  PROTOBUF_FIELD_OFFSET(::serialization::Color, opacity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Point, x_),
  PROTOBUF_FIELD_OFFSET(::serialization::Point, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::RenderSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::RenderSettings, max_width_),
  PROTOBUF_FIELD_OFFSET(::serialization::RenderSettings, max_height_),
  PROTOBUF_FIELD_OFFSET(::serialization::RenderSettings, padding_),
  PROTOBUF_FIELD_OFFSET(::serialization::RenderSettings, outer_margin_),
  PROTOBUF_FIELD_OFFSET(::serialization::RenderSettings, palette_),
  PROTOBUF_FIELD_OFFSET(::serialization::RenderSettings, line_width_),
  PROTOBUF_FIELD_OFFSET(::serialization::RenderSettings, underlayer_color_),
  PROTOBUF_FIELD_OFFSET(::serialization::RenderSettings, underlayer_width_),
  PROTOBUF_FIELD_OFFSET(::serialization::RenderSettings, stop_radius_),
  PROTOBUF_FIELD_OFFSET(::serialization::RenderSettings, bus_label_offset_),
  PROTOBUF_FIELD_OFFSET(::serialization::RenderSettings, bus_label_font_size_),
  PROTOBUF_FIELD_OFFSET(::serialization::RenderSettings, stop_label_offset_),
  PROTOBUF_FIELD_OFFSET(::serialization::RenderSettings, stop_label_font_size_),
  PROTOBUF_FIELD_OFFSET(::serialization::RenderSettings, layers_),
  PROTOBUF_FIELD_OFFSET(::serialization::RenderSettings, company_radius_),
  PROTOBUF_FIELD_OFFSET(::serialization::RenderSettings, company_line_width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::Bus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Bus, stops_),
  PROTOBUF_FIELD_OFFSET(::serialization::Bus, endpoints_),
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer_StopsCoordsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer_StopsCoordsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer_StopsCoordsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer_StopsCoordsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer_BusColorsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer_BusColorsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer_BusColorsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer_BusColorsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer_BusesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer_BusesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer_BusesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer_BusesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer_CompanyCoordsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer_CompanyCoordsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer_CompanyCoordsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer_CompanyCoordsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer, settings_),
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer, stops_coords_),
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer, bus_colors_),
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer, buses_),
  PROTOBUF_FIELD_OFFSET(::serialization::Renderer, company_coords_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::NearbyStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::NearbyStop, name_),
  PROTOBUF_FIELD_OFFSET(::serialization::NearbyStop, meters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::Coords, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Coords, lat_),
  PROTOBUF_FIELD_OFFSET(::serialization::Coords, lon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::AddressComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::AddressComponent, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Address, formatted_),
  PROTOBUF_FIELD_OFFSET(::serialization::Address, components_),
  PROTOBUF_FIELD_OFFSET(::serialization::Address, coords_),
  PROTOBUF_FIELD_OFFSET(::serialization::Address, comment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::Name, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Name, value_),
  PROTOBUF_FIELD_OFFSET(::serialization::Name, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::Phone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Phone, formatted_),
  PROTOBUF_FIELD_OFFSET(::serialization::Phone, type_),
  PROTOBUF_FIELD_OFFSET(::serialization::Phone, country_code_),
  PROTOBUF_FIELD_OFFSET(::serialization::Phone, local_code_),
  PROTOBUF_FIELD_OFFSET(::serialization::Phone, number_),
  PROTOBUF_FIELD_OFFSET(::serialization::Phone, extension_),
  PROTOBUF_FIELD_OFFSET(::serialization::Phone, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::WorkingTimeInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::WorkingTimeInterval, day_),
  PROTOBUF_FIELD_OFFSET(::serialization::WorkingTimeInterval, minutes_from_),
  PROTOBUF_FIELD_OFFSET(::serialization::WorkingTimeInterval, minutes_to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::WorkingTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::WorkingTime, formatted_),
  PROTOBUF_FIELD_OFFSET(::serialization::WorkingTime, intervals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::Url, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Url, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::Company, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Company, address_),
  PROTOBUF_FIELD_OFFSET(::serialization::Company, names_),
  PROTOBUF_FIELD_OFFSET(::serialization::Company, phones_),
  PROTOBUF_FIELD_OFFSET(::serialization::Company, urls_),
  PROTOBUF_FIELD_OFFSET(::serialization::Company, rubrics_),
  PROTOBUF_FIELD_OFFSET(::serialization::Company, working_time_),
  PROTOBUF_FIELD_OFFSET(::serialization::Company, nearby_stops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::Rubric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Rubric, name_),
  PROTOBUF_FIELD_OFFSET(::serialization::Rubric, keywords_),
  PROTOBUF_FIELD_OFFSET(::serialization::Database_RubricsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::serialization::Database_RubricsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Database_RubricsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::serialization::Database_RubricsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::Database, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::Database, companies_),
  PROTOBUF_FIELD_OFFSET(::serialization::Database, rubrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::TransportCatalog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serialization::TransportCatalog, buses_),
  PROTOBUF_FIELD_OFFSET(::serialization::TransportCatalog, stops_),
  PROTOBUF_FIELD_OFFSET(::serialization::TransportCatalog, router_),
  PROTOBUF_FIELD_OFFSET(::serialization::TransportCatalog, renderer_),
  PROTOBUF_FIELD_OFFSET(::serialization::TransportCatalog, database_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::serialization::StopInfo)},
  { 7, -1, sizeof(::serialization::BusInfo)},
  { 17, -1, sizeof(::serialization::Edge)},
  { 25, -1, sizeof(::serialization::Graph)},
  { 32, -1, sizeof(::serialization::StopVertexIds)},
  { 40, -1, sizeof(::serialization::VertexInfo)},
  { 47, -1, sizeof(::serialization::EdgeInfo)},
  { 60, -1, sizeof(::serialization::RouteInternalData)},
  { 69, -1, sizeof(::serialization::RouteInternalDataVector)},
  { 75, -1, sizeof(::serialization::RouterImpl)},
  { 81, 88, sizeof(::serialization::Router_CompaniesVerticiesEntry_DoNotUse)},
  { 90, -1, sizeof(::serialization::Router)},
  { 104, -1, sizeof(::serialization::Color)},
  { 115, -1, sizeof(::serialization::Point)},
  { 122, -1, sizeof(::serialization::RenderSettings)},
  { 143, -1, sizeof(::serialization::Bus)},
  { 150, 157, sizeof(::serialization::Renderer_StopsCoordsEntry_DoNotUse)},
  { 159, 166, sizeof(::serialization::Renderer_BusColorsEntry_DoNotUse)},
  { 168, 175, sizeof(::serialization::Renderer_BusesEntry_DoNotUse)},
  { 177, 184, sizeof(::serialization::Renderer_CompanyCoordsEntry_DoNotUse)},
  { 186, -1, sizeof(::serialization::Renderer)},
  { 196, -1, sizeof(::serialization::NearbyStop)},
  { 203, -1, sizeof(::serialization::Coords)},
  { 210, -1, sizeof(::serialization::AddressComponent)},
  { 216, -1, sizeof(::serialization::Address)},
  { 225, -1, sizeof(::serialization::Name)},
  { 232, -1, sizeof(::serialization::Phone)},
  { 244, -1, sizeof(::serialization::WorkingTimeInterval)},
  { 252, -1, sizeof(::serialization::WorkingTime)},
  { 259, -1, sizeof(::serialization::Url)},
  { 265, -1, sizeof(::serialization::Company)},
  { 277, -1, sizeof(::serialization::Rubric)},
  { 284, 291, sizeof(::serialization::Database_RubricsEntry_DoNotUse)},
  { 293, -1, sizeof(::serialization::Database)},
  { 300, -1, sizeof(::serialization::TransportCatalog)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_StopInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_BusInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Edge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Graph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_StopVertexIds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_VertexInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_EdgeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_RouteInternalData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_RouteInternalDataVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_RouterImpl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Router_CompaniesVerticiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Router_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Color_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_RenderSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Bus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Renderer_StopsCoordsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Renderer_BusColorsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Renderer_BusesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Renderer_CompanyCoordsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Renderer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_NearbyStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Coords_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_AddressComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Address_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Name_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Phone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_WorkingTimeInterval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_WorkingTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Url_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Company_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Rubric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Database_RubricsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_Database_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serialization::_TransportCatalog_default_instance_),
};

const char descriptor_table_protodef_transport_5fcatalog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027transport_catalog.proto\022\rserialization"
  "\"\'\n\010StopInfo\022\014\n\004name\030\001 \001(\t\022\r\n\005buses\030\002 \003("
  "\t\"{\n\007BusInfo\022\014\n\004name\030\001 \001(\t\022\022\n\nstop_count"
  "\030\002 \001(\004\022\031\n\021unique_stop_count\030\003 \001(\004\022\031\n\021roa"
  "d_route_length\030\004 \001(\005\022\030\n\020geo_route_length"
  "\030\005 \001(\001\"0\n\004Edge\022\014\n\004from\030\001 \001(\004\022\n\n\002to\030\002 \001(\004"
  "\022\016\n\006weight\030\003 \001(\001\"A\n\005Graph\022\"\n\005edges\030\001 \003(\013"
  "2\023.serialization.Edge\022\024\n\014vertex_count\030\002 "
  "\001(\004\"6\n\rStopVertexIds\022\014\n\004name\030\001 \001(\t\022\n\n\002in"
  "\030\002 \001(\004\022\013\n\003out\030\003 \001(\004\".\n\nVertexInfo\022\014\n\004nam"
  "e\030\001 \001(\t\022\022\n\ncompany_id\030\002 \001(\005\"\333\001\n\010EdgeInfo"
  "\022)\n\004type\030\001 \001(\0162\033.serialization.EdgeInfoT"
  "ype\022\020\n\010bus_name\030\002 \001(\t\022\032\n\022bus_start_stop_"
  "idx\030\003 \001(\004\022\033\n\023bus_finish_stop_idx\030\004 \001(\004\022\021"
  "\n\tstop_from\030\005 \001(\t\022\022\n\ncompany_id\030\006 \001(\005\022\024\n"
  "\014company_name\030\007 \001(\t\022\034\n\024company_display_n"
  "ame\030\010 \001(\t\"c\n\021RouteInternalData\022\021\n\thas_va"
  "lue\030\001 \001(\010\022\016\n\006weight\030\002 \001(\001\022\025\n\rhas_prev_ed"
  "ge\030\003 \001(\010\022\024\n\014prev_edge_id\030\004 \001(\004\"P\n\027RouteI"
  "nternalDataVector\0225\n\013vector_data\030\001 \003(\0132 "
  ".serialization.RouteInternalData\"E\n\nRout"
  "erImpl\0227\n\007vectors\030\001 \003(\0132&.serialization."
  "RouteInternalDataVector\"\302\003\n\006Router\022\025\n\rbu"
  "s_wait_time\030\001 \001(\005\022\024\n\014bus_velocity\030\002 \001(\001\022"
  "#\n\005graph\030\003 \001(\0132\024.serialization.Graph\022-\n\n"
  "route_impl\030\004 \001(\0132\031.serialization.RouterI"
  "mpl\0225\n\017stop_vertex_ids\030\005 \003(\0132\034.serializa"
  "tion.StopVertexIds\022/\n\014vertex_infos\030\006 \003(\013"
  "2\031.serialization.VertexInfo\022+\n\nedge_info"
  "s\030\007 \003(\0132\027.serialization.EdgeInfo\022\033\n\023pede"
  "strian_velocity\030\010 \001(\001\022J\n\023companies_verti"
  "cies\030\t \003(\0132-.serialization.Router.Compan"
  "iesVerticiesEntry\0329\n\027CompaniesVerticiesE"
  "ntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\004:\0028\001\"\200\001\n"
  "\005Color\022&\n\004type\030\001 \001(\0162\030.serialization.Col"
  "orType\022\024\n\014color_string\030\002 \001(\t\022\013\n\003red\030\003 \001("
  "\r\022\r\n\005green\030\004 \001(\r\022\014\n\004blue\030\005 \001(\r\022\017\n\007opacit"
  "y\030\006 \001(\001\"\035\n\005Point\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\"\330"
  "\003\n\016RenderSettings\022\021\n\tmax_width\030\001 \001(\001\022\022\n\n"
  "max_height\030\002 \001(\001\022\017\n\007padding\030\003 \001(\001\022\024\n\014out"
  "er_margin\030\004 \001(\001\022%\n\007palette\030\005 \003(\0132\024.seria"
  "lization.Color\022\022\n\nline_width\030\006 \001(\001\022.\n\020un"
  "derlayer_color\030\007 \001(\0132\024.serialization.Col"
  "or\022\030\n\020underlayer_width\030\010 \001(\001\022\023\n\013stop_rad"
  "ius\030\t \001(\001\022.\n\020bus_label_offset\030\n \001(\0132\024.se"
  "rialization.Point\022\033\n\023bus_label_font_size"
  "\030\013 \001(\005\022/\n\021stop_label_offset\030\014 \001(\0132\024.seri"
  "alization.Point\022\034\n\024stop_label_font_size\030"
  "\r \001(\005\022\016\n\006layers\030\016 \003(\t\022\026\n\016company_radius\030"
  "\017 \001(\001\022\032\n\022company_line_width\030\020 \001(\001\"\'\n\003Bus"
  "\022\r\n\005stops\030\001 \003(\t\022\021\n\tendpoints\030\002 \003(\t\"\316\004\n\010R"
  "enderer\022/\n\010settings\030\001 \001(\0132\035.serializatio"
  "n.RenderSettings\022>\n\014stops_coords\030\002 \003(\0132("
  ".serialization.Renderer.StopsCoordsEntry"
  "\022:\n\nbus_colors\030\003 \003(\0132&.serialization.Ren"
  "derer.BusColorsEntry\0221\n\005buses\030\004 \003(\0132\".se"
  "rialization.Renderer.BusesEntry\022B\n\016compa"
  "ny_coords\030\005 \003(\0132*.serialization.Renderer"
  ".CompanyCoordsEntry\032H\n\020StopsCoordsEntry\022"
  "\013\n\003key\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.serializat"
  "ion.Point:\0028\001\032F\n\016BusColorsEntry\022\013\n\003key\030\001"
  " \001(\t\022#\n\005value\030\002 \001(\0132\024.serialization.Colo"
  "r:\0028\001\032@\n\nBusesEntry\022\013\n\003key\030\001 \001(\t\022!\n\005valu"
  "e\030\002 \001(\0132\022.serialization.Bus:\0028\001\032J\n\022Compa"
  "nyCoordsEntry\022\013\n\003key\030\001 \001(\005\022#\n\005value\030\002 \001("
  "\0132\024.serialization.Point:\0028\001\"*\n\nNearbySto"
  "p\022\014\n\004name\030\001 \001(\t\022\016\n\006meters\030\002 \001(\r\"\"\n\006Coord"
  "s\022\013\n\003lat\030\001 \001(\001\022\013\n\003lon\030\002 \001(\001\"c\n\020AddressCo"
  "mponent\022\r\n\005value\030\001 \001(\t\"@\n\004Type\022\013\n\007COUNTR"
  "Y\020\000\022\n\n\006REGION\020\001\022\010\n\004CITY\020\002\022\n\n\006STREET\020\003\022\t\n"
  "\005HOUSE\020\004\"\211\001\n\007Address\022\021\n\tformatted\030\001 \001(\t\022"
  "3\n\ncomponents\030\002 \003(\0132\037.serialization.Addr"
  "essComponent\022%\n\006coords\030\003 \001(\0132\025.serializa"
  "tion.Coords\022\017\n\007comment\030\004 \001(\t\"g\n\004Name\022\r\n\005"
  "value\030\001 \001(\t\022&\n\004type\030\002 \001(\0162\030.serializatio"
  "n.Name.Type\"(\n\004Type\022\010\n\004MAIN\020\000\022\013\n\007SYNONYM"
  "\020\001\022\t\n\005SHORT\020\002\"\301\001\n\005Phone\022\021\n\tformatted\030\001 \001"
  "(\t\022\'\n\004type\030\002 \001(\0162\031.serialization.Phone.T"
  "ype\022\024\n\014country_code\030\003 \001(\t\022\022\n\nlocal_code\030"
  "\004 \001(\t\022\016\n\006number\030\005 \001(\t\022\021\n\textension\030\006 \001(\t"
  "\022\023\n\013description\030\007 \001(\t\"\032\n\004Type\022\t\n\005PHONE\020\000"
  "\022\007\n\003FAX\020\001\"\345\001\n\023WorkingTimeInterval\0223\n\003day"
  "\030\001 \001(\0162&.serialization.WorkingTimeInterv"
  "al.Day\022\024\n\014minutes_from\030\002 \001(\005\022\022\n\nminutes_"
  "to\030\003 \001(\005\"o\n\003Day\022\014\n\010EVERYDAY\020\000\022\n\n\006MONDAY\020"
  "\001\022\013\n\007TUESDAY\020\002\022\r\n\tWEDNESDAY\020\003\022\014\n\010THURSDA"
  "Y\020\004\022\n\n\006FRIDAY\020\005\022\014\n\010SATURDAY\020\006\022\n\n\006SUNDAY\020"
  "\007\"W\n\013WorkingTime\022\021\n\tformatted\030\001 \001(\t\0225\n\ti"
  "ntervals\030\002 \003(\0132\".serialization.WorkingTi"
  "meInterval\"\024\n\003Url\022\r\n\005value\030\001 \001(\t\"\222\002\n\007Com"
  "pany\022\'\n\007address\030\001 \001(\0132\026.serialization.Ad"
  "dress\022\"\n\005names\030\002 \003(\0132\023.serialization.Nam"
  "e\022$\n\006phones\030\003 \003(\0132\024.serialization.Phone\022"
  " \n\004urls\030\004 \003(\0132\022.serialization.Url\022\017\n\007rub"
  "rics\030\005 \003(\004\0220\n\014working_time\030\006 \001(\0132\032.seria"
  "lization.WorkingTime\022/\n\014nearby_stops\030\007 \003"
  "(\0132\031.serialization.NearbyStop\"(\n\006Rubric\022"
  "\014\n\004name\030\001 \001(\t\022\020\n\010keywords\030\002 \003(\t\"\263\001\n\010Data"
  "base\022)\n\tcompanies\030\001 \003(\0132\026.serialization."
  "Company\0225\n\007rubrics\030\002 \003(\0132$.serialization"
  ".Database.RubricsEntry\032E\n\014RubricsEntry\022\013"
  "\n\003key\030\001 \001(\004\022$\n\005value\030\002 \001(\0132\025.serializati"
  "on.Rubric:\0028\001\"\336\001\n\020TransportCatalog\022%\n\005bu"
  "ses\030\001 \003(\0132\026.serialization.BusInfo\022&\n\005sto"
  "ps\030\002 \003(\0132\027.serialization.StopInfo\022%\n\006rou"
  "ter\030\003 \001(\0132\025.serialization.Router\022)\n\010rend"
  "erer\030\004 \001(\0132\027.serialization.Renderer\022)\n\010d"
  "atabase\030\005 \001(\0132\027.serialization.Database*+"
  "\n\014EdgeInfoType\022\010\n\004WAIT\020\000\022\007\n\003BUS\020\001\022\010\n\004WAL"
  "K\020\002*;\n\tColorType\022\017\n\013NOT_DEFINED\020\000\022\n\n\006STR"
  "ING\020\001\022\007\n\003RGB\020\002\022\010\n\004RGBA\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transport_5fcatalog_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transport_5fcatalog_2eproto_sccs[35] = {
  &scc_info_Address_transport_5fcatalog_2eproto.base,
  &scc_info_AddressComponent_transport_5fcatalog_2eproto.base,
  &scc_info_Bus_transport_5fcatalog_2eproto.base,
  &scc_info_BusInfo_transport_5fcatalog_2eproto.base,
  &scc_info_Color_transport_5fcatalog_2eproto.base,
  &scc_info_Company_transport_5fcatalog_2eproto.base,
  &scc_info_Coords_transport_5fcatalog_2eproto.base,
  &scc_info_Database_transport_5fcatalog_2eproto.base,
  &scc_info_Database_RubricsEntry_DoNotUse_transport_5fcatalog_2eproto.base,
  &scc_info_Edge_transport_5fcatalog_2eproto.base,
  &scc_info_EdgeInfo_transport_5fcatalog_2eproto.base,
  &scc_info_Graph_transport_5fcatalog_2eproto.base,
  &scc_info_Name_transport_5fcatalog_2eproto.base,
  &scc_info_NearbyStop_transport_5fcatalog_2eproto.base,
  &scc_info_Phone_transport_5fcatalog_2eproto.base,
  &scc_info_Point_transport_5fcatalog_2eproto.base,
  &scc_info_RenderSettings_transport_5fcatalog_2eproto.base,
  &scc_info_Renderer_transport_5fcatalog_2eproto.base,
  &scc_info_Renderer_BusColorsEntry_DoNotUse_transport_5fcatalog_2eproto.base,
  &scc_info_Renderer_BusesEntry_DoNotUse_transport_5fcatalog_2eproto.base,
  &scc_info_Renderer_CompanyCoordsEntry_DoNotUse_transport_5fcatalog_2eproto.base,
  &scc_info_Renderer_StopsCoordsEntry_DoNotUse_transport_5fcatalog_2eproto.base,
  &scc_info_RouteInternalData_transport_5fcatalog_2eproto.base,
  &scc_info_RouteInternalDataVector_transport_5fcatalog_2eproto.base,
  &scc_info_Router_transport_5fcatalog_2eproto.base,
  &scc_info_Router_CompaniesVerticiesEntry_DoNotUse_transport_5fcatalog_2eproto.base,
  &scc_info_RouterImpl_transport_5fcatalog_2eproto.base,
  &scc_info_Rubric_transport_5fcatalog_2eproto.base,
  &scc_info_StopInfo_transport_5fcatalog_2eproto.base,
  &scc_info_StopVertexIds_transport_5fcatalog_2eproto.base,
  &scc_info_TransportCatalog_transport_5fcatalog_2eproto.base,
  &scc_info_Url_transport_5fcatalog_2eproto.base,
  &scc_info_VertexInfo_transport_5fcatalog_2eproto.base,
  &scc_info_WorkingTime_transport_5fcatalog_2eproto.base,
  &scc_info_WorkingTimeInterval_transport_5fcatalog_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_5fcatalog_2eproto_once;
static bool descriptor_table_transport_5fcatalog_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalog_2eproto = {
  &descriptor_table_transport_5fcatalog_2eproto_initialized, descriptor_table_protodef_transport_5fcatalog_2eproto, "transport_catalog.proto", 4432,
  &descriptor_table_transport_5fcatalog_2eproto_once, descriptor_table_transport_5fcatalog_2eproto_sccs, descriptor_table_transport_5fcatalog_2eproto_deps, 35, 0,
  schemas, file_default_instances, TableStruct_transport_5fcatalog_2eproto::offsets,
  file_level_metadata_transport_5fcatalog_2eproto, 35, file_level_enum_descriptors_transport_5fcatalog_2eproto, file_level_service_descriptors_transport_5fcatalog_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transport_5fcatalog_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transport_5fcatalog_2eproto), true);
namespace serialization {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddressComponent_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transport_5fcatalog_2eproto);
  return file_level_enum_descriptors_transport_5fcatalog_2eproto[0];
}
bool AddressComponent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AddressComponent_Type AddressComponent::COUNTRY;
constexpr AddressComponent_Type AddressComponent::REGION;
constexpr AddressComponent_Type AddressComponent::CITY;
constexpr AddressComponent_Type AddressComponent::STREET;
constexpr AddressComponent_Type AddressComponent::HOUSE;
constexpr AddressComponent_Type AddressComponent::Type_MIN;
constexpr AddressComponent_Type AddressComponent::Type_MAX;
constexpr int AddressComponent::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Name_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transport_5fcatalog_2eproto);
  return file_level_enum_descriptors_transport_5fcatalog_2eproto[1];
}
bool Name_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Name_Type Name::MAIN;
constexpr Name_Type Name::SYNONYM;
constexpr Name_Type Name::SHORT;
constexpr Name_Type Name::Type_MIN;
constexpr Name_Type Name::Type_MAX;
constexpr int Name::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Phone_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transport_5fcatalog_2eproto);
  return file_level_enum_descriptors_transport_5fcatalog_2eproto[2];
}
bool Phone_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Phone_Type Phone::PHONE;
constexpr Phone_Type Phone::FAX;
constexpr Phone_Type Phone::Type_MIN;
constexpr Phone_Type Phone::Type_MAX;
constexpr int Phone::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkingTimeInterval_Day_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transport_5fcatalog_2eproto);
  return file_level_enum_descriptors_transport_5fcatalog_2eproto[3];
}
bool WorkingTimeInterval_Day_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WorkingTimeInterval_Day WorkingTimeInterval::EVERYDAY;
constexpr WorkingTimeInterval_Day WorkingTimeInterval::MONDAY;
constexpr WorkingTimeInterval_Day WorkingTimeInterval::TUESDAY;
constexpr WorkingTimeInterval_Day WorkingTimeInterval::WEDNESDAY;
constexpr WorkingTimeInterval_Day WorkingTimeInterval::THURSDAY;
constexpr WorkingTimeInterval_Day WorkingTimeInterval::FRIDAY;
constexpr WorkingTimeInterval_Day WorkingTimeInterval::SATURDAY;
constexpr WorkingTimeInterval_Day WorkingTimeInterval::SUNDAY;
constexpr WorkingTimeInterval_Day WorkingTimeInterval::Day_MIN;
constexpr WorkingTimeInterval_Day WorkingTimeInterval::Day_MAX;
constexpr int WorkingTimeInterval::Day_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdgeInfoType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transport_5fcatalog_2eproto);
  return file_level_enum_descriptors_transport_5fcatalog_2eproto[4];
}
bool EdgeInfoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transport_5fcatalog_2eproto);
  return file_level_enum_descriptors_transport_5fcatalog_2eproto[5];
}
bool ColorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void StopInfo::InitAsDefaultInstance() {
}
class StopInfo::_Internal {
 public:
};

StopInfo::StopInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.StopInfo)
}
StopInfo::StopInfo(const StopInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      buses_(from.buses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:serialization.StopInfo)
}

void StopInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopInfo_transport_5fcatalog_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StopInfo::~StopInfo() {
  // @@protoc_insertion_point(destructor:serialization.StopInfo)
  SharedDtor();
}

void StopInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopInfo& StopInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopInfo_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void StopInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.StopInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buses_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* StopInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.StopInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string buses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_buses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.StopInfo.buses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.StopInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.StopInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string buses = 2;
  for (int i = 0, n = this->_internal_buses_size(); i < n; i++) {
    const auto& s = this->_internal_buses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.StopInfo.buses");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.StopInfo)
  return target;
}

size_t StopInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.StopInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string buses = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(buses_.size());
  for (int i = 0, n = buses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      buses_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.StopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StopInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.StopInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.StopInfo)
    MergeFrom(*source);
  }
}

void StopInfo::MergeFrom(const StopInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.StopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buses_.MergeFrom(from.buses_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void StopInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.StopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopInfo::CopyFrom(const StopInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.StopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopInfo::IsInitialized() const {
  return true;
}

void StopInfo::InternalSwap(StopInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  buses_.InternalSwap(&other->buses_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StopInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BusInfo::InitAsDefaultInstance() {
}
class BusInfo::_Internal {
 public:
};

BusInfo::BusInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.BusInfo)
}
BusInfo::BusInfo(const BusInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&stop_count_, &from.stop_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&road_route_length_) -
    reinterpret_cast<char*>(&stop_count_)) + sizeof(road_route_length_));
  // @@protoc_insertion_point(copy_constructor:serialization.BusInfo)
}

void BusInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BusInfo_transport_5fcatalog_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stop_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&road_route_length_) -
      reinterpret_cast<char*>(&stop_count_)) + sizeof(road_route_length_));
}

BusInfo::~BusInfo() {
  // @@protoc_insertion_point(destructor:serialization.BusInfo)
  SharedDtor();
}

void BusInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BusInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BusInfo& BusInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BusInfo_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void BusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.BusInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stop_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&road_route_length_) -
      reinterpret_cast<char*>(&stop_count_)) + sizeof(road_route_length_));
  _internal_metadata_.Clear();
}

const char* BusInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.BusInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 stop_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stop_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 unique_stop_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          unique_stop_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 road_route_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          road_route_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double geo_route_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          geo_route_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BusInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.BusInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.BusInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint64 stop_count = 2;
  if (this->stop_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_stop_count(), target);
  }

  // uint64 unique_stop_count = 3;
  if (this->unique_stop_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_unique_stop_count(), target);
  }

  // int32 road_route_length = 4;
  if (this->road_route_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_road_route_length(), target);
  }

  // double geo_route_length = 5;
  if (!(this->geo_route_length() <= 0 && this->geo_route_length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_geo_route_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.BusInfo)
  return target;
}

size_t BusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.BusInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 stop_count = 2;
  if (this->stop_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_stop_count());
  }

  // uint64 unique_stop_count = 3;
  if (this->unique_stop_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_unique_stop_count());
  }

  // double geo_route_length = 5;
  if (!(this->geo_route_length() <= 0 && this->geo_route_length() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 road_route_length = 4;
  if (this->road_route_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_road_route_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BusInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.BusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BusInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BusInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.BusInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.BusInfo)
    MergeFrom(*source);
  }
}

void BusInfo::MergeFrom(const BusInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.BusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.stop_count() != 0) {
    _internal_set_stop_count(from._internal_stop_count());
  }
  if (from.unique_stop_count() != 0) {
    _internal_set_unique_stop_count(from._internal_unique_stop_count());
  }
  if (!(from.geo_route_length() <= 0 && from.geo_route_length() >= 0)) {
    _internal_set_geo_route_length(from._internal_geo_route_length());
  }
  if (from.road_route_length() != 0) {
    _internal_set_road_route_length(from._internal_road_route_length());
  }
}

void BusInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.BusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusInfo::CopyFrom(const BusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.BusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusInfo::IsInitialized() const {
  return true;
}

void BusInfo::InternalSwap(BusInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stop_count_, other->stop_count_);
  swap(unique_stop_count_, other->unique_stop_count_);
  swap(geo_route_length_, other->geo_route_length_);
  swap(road_route_length_, other->road_route_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BusInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Edge::InitAsDefaultInstance() {
}
class Edge::_Internal {
 public:
};

Edge::Edge()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.Edge)
}
Edge::Edge(const Edge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&from_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:serialization.Edge)
}

void Edge::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&from_)) + sizeof(weight_));
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:serialization.Edge)
  SharedDtor();
}

void Edge::SharedDtor() {
}

void Edge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Edge& Edge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Edge_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.Edge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&from_)) + sizeof(weight_));
  _internal_metadata_.Clear();
}

const char* Edge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Edge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.Edge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_from(), target);
  }

  // uint64 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_to(), target);
  }

  // double weight = 3;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.Edge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_from());
  }

  // uint64 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_to());
  }

  // double weight = 3;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Edge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  const Edge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Edge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.Edge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.Edge)
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (!(from.weight() <= 0 && from.weight() >= 0)) {
    _internal_set_weight(from._internal_weight());
  }
}

void Edge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::InternalSwap(Edge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(weight_, other->weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Edge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Graph::InitAsDefaultInstance() {
}
class Graph::_Internal {
 public:
};

Graph::Graph()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.Graph)
}
Graph::Graph(const Graph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      edges_(from.edges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vertex_count_ = from.vertex_count_;
  // @@protoc_insertion_point(copy_constructor:serialization.Graph)
}

void Graph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Graph_transport_5fcatalog_2eproto.base);
  vertex_count_ = PROTOBUF_ULONGLONG(0);
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:serialization.Graph)
  SharedDtor();
}

void Graph::SharedDtor() {
}

void Graph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Graph& Graph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Graph_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.Graph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edges_.Clear();
  vertex_count_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* Graph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .serialization.Edge edges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 vertex_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vertex_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Graph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.Graph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .serialization.Edge edges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_edges(i), target, stream);
  }

  // uint64 vertex_count = 2;
  if (this->vertex_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_vertex_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.Graph)
  return target;
}

size_t Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.Graph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serialization.Edge edges = 1;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 vertex_count = 2;
  if (this->vertex_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_vertex_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Graph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  const Graph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Graph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.Graph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.Graph)
    MergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edges_.MergeFrom(from.edges_);
  if (from.vertex_count() != 0) {
    _internal_set_vertex_count(from._internal_vertex_count());
  }
}

void Graph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  return true;
}

void Graph::InternalSwap(Graph* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  edges_.InternalSwap(&other->edges_);
  swap(vertex_count_, other->vertex_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Graph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopVertexIds::InitAsDefaultInstance() {
}
class StopVertexIds::_Internal {
 public:
};

StopVertexIds::StopVertexIds()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.StopVertexIds)
}
StopVertexIds::StopVertexIds(const StopVertexIds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&in_, &from.in_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_) -
    reinterpret_cast<char*>(&in_)) + sizeof(out_));
  // @@protoc_insertion_point(copy_constructor:serialization.StopVertexIds)
}

void StopVertexIds::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopVertexIds_transport_5fcatalog_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&in_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_) -
      reinterpret_cast<char*>(&in_)) + sizeof(out_));
}

StopVertexIds::~StopVertexIds() {
  // @@protoc_insertion_point(destructor:serialization.StopVertexIds)
  SharedDtor();
}

void StopVertexIds::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopVertexIds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopVertexIds& StopVertexIds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopVertexIds_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void StopVertexIds::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.StopVertexIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&in_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_) -
      reinterpret_cast<char*>(&in_)) + sizeof(out_));
  _internal_metadata_.Clear();
}

const char* StopVertexIds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.StopVertexIds.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 in = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 out = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopVertexIds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.StopVertexIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.StopVertexIds.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint64 in = 2;
  if (this->in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_in(), target);
  }

  // uint64 out = 3;
  if (this->out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_out(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.StopVertexIds)
  return target;
}

size_t StopVertexIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.StopVertexIds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 in = 2;
  if (this->in() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_in());
  }

  // uint64 out = 3;
  if (this->out() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_out());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopVertexIds::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.StopVertexIds)
  GOOGLE_DCHECK_NE(&from, this);
  const StopVertexIds* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopVertexIds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.StopVertexIds)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.StopVertexIds)
    MergeFrom(*source);
  }
}

void StopVertexIds::MergeFrom(const StopVertexIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.StopVertexIds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.in() != 0) {
    _internal_set_in(from._internal_in());
  }
  if (from.out() != 0) {
    _internal_set_out(from._internal_out());
  }
}

void StopVertexIds::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.StopVertexIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopVertexIds::CopyFrom(const StopVertexIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.StopVertexIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopVertexIds::IsInitialized() const {
  return true;
}

void StopVertexIds::InternalSwap(StopVertexIds* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(in_, other->in_);
  swap(out_, other->out_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopVertexIds::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VertexInfo::InitAsDefaultInstance() {
}
class VertexInfo::_Internal {
 public:
};

VertexInfo::VertexInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.VertexInfo)
}
VertexInfo::VertexInfo(const VertexInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  company_id_ = from.company_id_;
  // @@protoc_insertion_point(copy_constructor:serialization.VertexInfo)
}

void VertexInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VertexInfo_transport_5fcatalog_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_id_ = 0;
}

VertexInfo::~VertexInfo() {
  // @@protoc_insertion_point(destructor:serialization.VertexInfo)
  SharedDtor();
}

void VertexInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VertexInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VertexInfo& VertexInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VertexInfo_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void VertexInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.VertexInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_id_ = 0;
  _internal_metadata_.Clear();
}

const char* VertexInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.VertexInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 company_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          company_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VertexInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.VertexInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.VertexInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 company_id = 2;
  if (this->company_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_company_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.VertexInfo)
  return target;
}

size_t VertexInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.VertexInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 company_id = 2;
  if (this->company_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_company_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VertexInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.VertexInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VertexInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VertexInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.VertexInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.VertexInfo)
    MergeFrom(*source);
  }
}

void VertexInfo::MergeFrom(const VertexInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.VertexInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.company_id() != 0) {
    _internal_set_company_id(from._internal_company_id());
  }
}

void VertexInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.VertexInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VertexInfo::CopyFrom(const VertexInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.VertexInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexInfo::IsInitialized() const {
  return true;
}

void VertexInfo::InternalSwap(VertexInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(company_id_, other->company_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VertexInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EdgeInfo::InitAsDefaultInstance() {
}
class EdgeInfo::_Internal {
 public:
};

EdgeInfo::EdgeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.EdgeInfo)
}
EdgeInfo::EdgeInfo(const EdgeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bus_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bus_name().empty()) {
    bus_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bus_name_);
  }
  stop_from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stop_from().empty()) {
    stop_from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stop_from_);
  }
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_name().empty()) {
    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  company_display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_display_name().empty()) {
    company_display_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_display_name_);
  }
  ::memcpy(&bus_start_stop_idx_, &from.bus_start_stop_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&bus_finish_stop_idx_) -
    reinterpret_cast<char*>(&bus_start_stop_idx_)) + sizeof(bus_finish_stop_idx_));
  // @@protoc_insertion_point(copy_constructor:serialization.EdgeInfo)
}

void EdgeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EdgeInfo_transport_5fcatalog_2eproto.base);
  bus_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stop_from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bus_start_stop_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bus_finish_stop_idx_) -
      reinterpret_cast<char*>(&bus_start_stop_idx_)) + sizeof(bus_finish_stop_idx_));
}

EdgeInfo::~EdgeInfo() {
  // @@protoc_insertion_point(destructor:serialization.EdgeInfo)
  SharedDtor();
}

void EdgeInfo::SharedDtor() {
  bus_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stop_from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EdgeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EdgeInfo& EdgeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EdgeInfo_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void EdgeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.EdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bus_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stop_from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_display_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bus_start_stop_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bus_finish_stop_idx_) -
      reinterpret_cast<char*>(&bus_start_stop_idx_)) + sizeof(bus_finish_stop_idx_));
  _internal_metadata_.Clear();
}

const char* EdgeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .serialization.EdgeInfoType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::serialization::EdgeInfoType>(val));
        } else goto handle_unusual;
        continue;
      // string bus_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bus_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.EdgeInfo.bus_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bus_start_stop_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bus_start_stop_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bus_finish_stop_idx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bus_finish_stop_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stop_from = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_stop_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.EdgeInfo.stop_from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 company_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          company_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string company_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_company_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.EdgeInfo.company_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string company_display_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_company_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.EdgeInfo.company_display_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EdgeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.EdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serialization.EdgeInfoType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string bus_name = 2;
  if (this->bus_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bus_name().data(), static_cast<int>(this->_internal_bus_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.EdgeInfo.bus_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bus_name(), target);
  }

  // uint64 bus_start_stop_idx = 3;
  if (this->bus_start_stop_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_bus_start_stop_idx(), target);
  }

  // uint64 bus_finish_stop_idx = 4;
  if (this->bus_finish_stop_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_bus_finish_stop_idx(), target);
  }

  // string stop_from = 5;
  if (this->stop_from().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_from().data(), static_cast<int>(this->_internal_stop_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.EdgeInfo.stop_from");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stop_from(), target);
  }

  // int32 company_id = 6;
  if (this->company_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_company_id(), target);
  }

  // string company_name = 7;
  if (this->company_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_name().data(), static_cast<int>(this->_internal_company_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.EdgeInfo.company_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_company_name(), target);
  }

  // string company_display_name = 8;
  if (this->company_display_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_display_name().data(), static_cast<int>(this->_internal_company_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.EdgeInfo.company_display_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_company_display_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.EdgeInfo)
  return target;
}

size_t EdgeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.EdgeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bus_name = 2;
  if (this->bus_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bus_name());
  }

  // string stop_from = 5;
  if (this->stop_from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_from());
  }

  // string company_name = 7;
  if (this->company_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_name());
  }

  // string company_display_name = 8;
  if (this->company_display_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_display_name());
  }

  // uint64 bus_start_stop_idx = 3;
  if (this->bus_start_stop_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bus_start_stop_idx());
  }

  // .serialization.EdgeInfoType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 company_id = 6;
  if (this->company_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_company_id());
  }

  // uint64 bus_finish_stop_idx = 4;
  if (this->bus_finish_stop_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bus_finish_stop_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EdgeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.EdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EdgeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.EdgeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.EdgeInfo)
    MergeFrom(*source);
  }
}

void EdgeInfo::MergeFrom(const EdgeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.EdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bus_name().size() > 0) {

    bus_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bus_name_);
  }
  if (from.stop_from().size() > 0) {

    stop_from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stop_from_);
  }
  if (from.company_name().size() > 0) {

    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  if (from.company_display_name().size() > 0) {

    company_display_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_display_name_);
  }
  if (from.bus_start_stop_idx() != 0) {
    _internal_set_bus_start_stop_idx(from._internal_bus_start_stop_idx());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.company_id() != 0) {
    _internal_set_company_id(from._internal_company_id());
  }
  if (from.bus_finish_stop_idx() != 0) {
    _internal_set_bus_finish_stop_idx(from._internal_bus_finish_stop_idx());
  }
}

void EdgeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.EdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeInfo::CopyFrom(const EdgeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.EdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeInfo::IsInitialized() const {
  return true;
}

void EdgeInfo::InternalSwap(EdgeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bus_name_.Swap(&other->bus_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stop_from_.Swap(&other->stop_from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  company_name_.Swap(&other->company_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  company_display_name_.Swap(&other->company_display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bus_start_stop_idx_, other->bus_start_stop_idx_);
  swap(type_, other->type_);
  swap(company_id_, other->company_id_);
  swap(bus_finish_stop_idx_, other->bus_finish_stop_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteInternalData::InitAsDefaultInstance() {
}
class RouteInternalData::_Internal {
 public:
};

RouteInternalData::RouteInternalData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.RouteInternalData)
}
RouteInternalData::RouteInternalData(const RouteInternalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&weight_, &from.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_prev_edge_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(has_prev_edge_));
  // @@protoc_insertion_point(copy_constructor:serialization.RouteInternalData)
}

void RouteInternalData::SharedCtor() {
  ::memset(&weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_prev_edge_) -
      reinterpret_cast<char*>(&weight_)) + sizeof(has_prev_edge_));
}

RouteInternalData::~RouteInternalData() {
  // @@protoc_insertion_point(destructor:serialization.RouteInternalData)
  SharedDtor();
}

void RouteInternalData::SharedDtor() {
}

void RouteInternalData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteInternalData& RouteInternalData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteInternalData_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void RouteInternalData::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.RouteInternalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_prev_edge_) -
      reinterpret_cast<char*>(&weight_)) + sizeof(has_prev_edge_));
  _internal_metadata_.Clear();
}

const char* RouteInternalData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool has_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          has_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool has_prev_edge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          has_prev_edge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 prev_edge_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          prev_edge_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteInternalData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.RouteInternalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_value = 1;
  if (this->has_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_value(), target);
  }

  // double weight = 2;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight(), target);
  }

  // bool has_prev_edge = 3;
  if (this->has_prev_edge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_has_prev_edge(), target);
  }

  // uint64 prev_edge_id = 4;
  if (this->prev_edge_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_prev_edge_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.RouteInternalData)
  return target;
}

size_t RouteInternalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.RouteInternalData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double weight = 2;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 prev_edge_id = 4;
  if (this->prev_edge_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_prev_edge_id());
  }

  // bool has_value = 1;
  if (this->has_value() != 0) {
    total_size += 1 + 1;
  }

  // bool has_prev_edge = 3;
  if (this->has_prev_edge() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteInternalData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.RouteInternalData)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteInternalData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteInternalData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.RouteInternalData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.RouteInternalData)
    MergeFrom(*source);
  }
}

void RouteInternalData::MergeFrom(const RouteInternalData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.RouteInternalData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.weight() <= 0 && from.weight() >= 0)) {
    _internal_set_weight(from._internal_weight());
  }
  if (from.prev_edge_id() != 0) {
    _internal_set_prev_edge_id(from._internal_prev_edge_id());
  }
  if (from.has_value() != 0) {
    _internal_set_has_value(from._internal_has_value());
  }
  if (from.has_prev_edge() != 0) {
    _internal_set_has_prev_edge(from._internal_has_prev_edge());
  }
}

void RouteInternalData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.RouteInternalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteInternalData::CopyFrom(const RouteInternalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.RouteInternalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteInternalData::IsInitialized() const {
  return true;
}

void RouteInternalData::InternalSwap(RouteInternalData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(weight_, other->weight_);
  swap(prev_edge_id_, other->prev_edge_id_);
  swap(has_value_, other->has_value_);
  swap(has_prev_edge_, other->has_prev_edge_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteInternalData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteInternalDataVector::InitAsDefaultInstance() {
}
class RouteInternalDataVector::_Internal {
 public:
};

RouteInternalDataVector::RouteInternalDataVector()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.RouteInternalDataVector)
}
RouteInternalDataVector::RouteInternalDataVector(const RouteInternalDataVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vector_data_(from.vector_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:serialization.RouteInternalDataVector)
}

void RouteInternalDataVector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteInternalDataVector_transport_5fcatalog_2eproto.base);
}

RouteInternalDataVector::~RouteInternalDataVector() {
  // @@protoc_insertion_point(destructor:serialization.RouteInternalDataVector)
  SharedDtor();
}

void RouteInternalDataVector::SharedDtor() {
}

void RouteInternalDataVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteInternalDataVector& RouteInternalDataVector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteInternalDataVector_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void RouteInternalDataVector::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.RouteInternalDataVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vector_data_.Clear();
  _internal_metadata_.Clear();
}

const char* RouteInternalDataVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .serialization.RouteInternalData vector_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vector_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteInternalDataVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.RouteInternalDataVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .serialization.RouteInternalData vector_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vector_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vector_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.RouteInternalDataVector)
  return target;
}

size_t RouteInternalDataVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.RouteInternalDataVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serialization.RouteInternalData vector_data = 1;
  total_size += 1UL * this->_internal_vector_data_size();
  for (const auto& msg : this->vector_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteInternalDataVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.RouteInternalDataVector)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteInternalDataVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteInternalDataVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.RouteInternalDataVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.RouteInternalDataVector)
    MergeFrom(*source);
  }
}

void RouteInternalDataVector::MergeFrom(const RouteInternalDataVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.RouteInternalDataVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vector_data_.MergeFrom(from.vector_data_);
}

void RouteInternalDataVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.RouteInternalDataVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteInternalDataVector::CopyFrom(const RouteInternalDataVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.RouteInternalDataVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteInternalDataVector::IsInitialized() const {
  return true;
}

void RouteInternalDataVector::InternalSwap(RouteInternalDataVector* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vector_data_.InternalSwap(&other->vector_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteInternalDataVector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouterImpl::InitAsDefaultInstance() {
}
class RouterImpl::_Internal {
 public:
};

RouterImpl::RouterImpl()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.RouterImpl)
}
RouterImpl::RouterImpl(const RouterImpl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vectors_(from.vectors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:serialization.RouterImpl)
}

void RouterImpl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouterImpl_transport_5fcatalog_2eproto.base);
}

RouterImpl::~RouterImpl() {
  // @@protoc_insertion_point(destructor:serialization.RouterImpl)
  SharedDtor();
}

void RouterImpl::SharedDtor() {
}

void RouterImpl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouterImpl& RouterImpl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouterImpl_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void RouterImpl::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.RouterImpl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vectors_.Clear();
  _internal_metadata_.Clear();
}

const char* RouterImpl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .serialization.RouteInternalDataVector vectors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouterImpl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.RouterImpl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .serialization.RouteInternalDataVector vectors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vectors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vectors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.RouterImpl)
  return target;
}

size_t RouterImpl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.RouterImpl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serialization.RouteInternalDataVector vectors = 1;
  total_size += 1UL * this->_internal_vectors_size();
  for (const auto& msg : this->vectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouterImpl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.RouterImpl)
  GOOGLE_DCHECK_NE(&from, this);
  const RouterImpl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouterImpl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.RouterImpl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.RouterImpl)
    MergeFrom(*source);
  }
}

void RouterImpl::MergeFrom(const RouterImpl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.RouterImpl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vectors_.MergeFrom(from.vectors_);
}

void RouterImpl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.RouterImpl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouterImpl::CopyFrom(const RouterImpl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.RouterImpl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterImpl::IsInitialized() const {
  return true;
}

void RouterImpl::InternalSwap(RouterImpl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vectors_.InternalSwap(&other->vectors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouterImpl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Router_CompaniesVerticiesEntry_DoNotUse::Router_CompaniesVerticiesEntry_DoNotUse() {}
Router_CompaniesVerticiesEntry_DoNotUse::Router_CompaniesVerticiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Router_CompaniesVerticiesEntry_DoNotUse::MergeFrom(const Router_CompaniesVerticiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Router_CompaniesVerticiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Router_CompaniesVerticiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Router::InitAsDefaultInstance() {
  ::serialization::_Router_default_instance_._instance.get_mutable()->graph_ = const_cast< ::serialization::Graph*>(
      ::serialization::Graph::internal_default_instance());
  ::serialization::_Router_default_instance_._instance.get_mutable()->route_impl_ = const_cast< ::serialization::RouterImpl*>(
      ::serialization::RouterImpl::internal_default_instance());
}
class Router::_Internal {
 public:
  static const ::serialization::Graph& graph(const Router* msg);
  static const ::serialization::RouterImpl& route_impl(const Router* msg);
};

const ::serialization::Graph&
Router::_Internal::graph(const Router* msg) {
  return *msg->graph_;
}
const ::serialization::RouterImpl&
Router::_Internal::route_impl(const Router* msg) {
  return *msg->route_impl_;
}
Router::Router()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.Router)
}
Router::Router(const Router& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stop_vertex_ids_(from.stop_vertex_ids_),
      vertex_infos_(from.vertex_infos_),
      edge_infos_(from.edge_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  companies_verticies_.MergeFrom(from.companies_verticies_);
  if (from._internal_has_graph()) {
    graph_ = new ::serialization::Graph(*from.graph_);
  } else {
    graph_ = nullptr;
  }
  if (from._internal_has_route_impl()) {
    route_impl_ = new ::serialization::RouterImpl(*from.route_impl_);
  } else {
    route_impl_ = nullptr;
  }
  ::memcpy(&bus_velocity_, &from.bus_velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&bus_wait_time_) -
    reinterpret_cast<char*>(&bus_velocity_)) + sizeof(bus_wait_time_));
  // @@protoc_insertion_point(copy_constructor:serialization.Router)
}

void Router::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Router_transport_5fcatalog_2eproto.base);
  ::memset(&graph_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bus_wait_time_) -
      reinterpret_cast<char*>(&graph_)) + sizeof(bus_wait_time_));
}

Router::~Router() {
  // @@protoc_insertion_point(destructor:serialization.Router)
  SharedDtor();
}

void Router::SharedDtor() {
  if (this != internal_default_instance()) delete graph_;
  if (this != internal_default_instance()) delete route_impl_;
}

void Router::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Router& Router::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Router_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Router::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.Router)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_vertex_ids_.Clear();
  vertex_infos_.Clear();
  edge_infos_.Clear();
  companies_verticies_.Clear();
  if (GetArenaNoVirtual() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && route_impl_ != nullptr) {
    delete route_impl_;
  }
  route_impl_ = nullptr;
  ::memset(&bus_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bus_wait_time_) -
      reinterpret_cast<char*>(&bus_velocity_)) + sizeof(bus_wait_time_));
  _internal_metadata_.Clear();
}

const char* Router::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bus_wait_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bus_wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double bus_velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          bus_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .serialization.Graph graph = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .serialization.RouterImpl route_impl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_impl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .serialization.StopVertexIds stop_vertex_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_vertex_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .serialization.VertexInfo vertex_infos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertex_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .serialization.EdgeInfo edge_infos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edge_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // double pedestrian_velocity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          pedestrian_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // map<int32, uint64> companies_verticies = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&companies_verticies_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Router::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.Router)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bus_wait_time = 1;
  if (this->bus_wait_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bus_wait_time(), target);
  }

  // double bus_velocity = 2;
  if (!(this->bus_velocity() <= 0 && this->bus_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_bus_velocity(), target);
  }

  // .serialization.Graph graph = 3;
  if (this->has_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::graph(this), target, stream);
  }

  // .serialization.RouterImpl route_impl = 4;
  if (this->has_route_impl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::route_impl(this), target, stream);
  }

  // repeated .serialization.StopVertexIds stop_vertex_ids = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stop_vertex_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_stop_vertex_ids(i), target, stream);
  }

  // repeated .serialization.VertexInfo vertex_infos = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertex_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_vertex_infos(i), target, stream);
  }

  // repeated .serialization.EdgeInfo edge_infos = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edge_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_edge_infos(i), target, stream);
  }

  // double pedestrian_velocity = 8;
  if (!(this->pedestrian_velocity() <= 0 && this->pedestrian_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_pedestrian_velocity(), target);
  }

  // map<int32, uint64> companies_verticies = 9;
  if (!this->_internal_companies_verticies().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_companies_verticies().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_companies_verticies().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->_internal_companies_verticies().begin();
          it != this->_internal_companies_verticies().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Router_CompaniesVerticiesEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->_internal_companies_verticies().begin();
          it != this->_internal_companies_verticies().end(); ++it) {
        target = Router_CompaniesVerticiesEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.Router)
  return target;
}

size_t Router::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.Router)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serialization.StopVertexIds stop_vertex_ids = 5;
  total_size += 1UL * this->_internal_stop_vertex_ids_size();
  for (const auto& msg : this->stop_vertex_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .serialization.VertexInfo vertex_infos = 6;
  total_size += 1UL * this->_internal_vertex_infos_size();
  for (const auto& msg : this->vertex_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .serialization.EdgeInfo edge_infos = 7;
  total_size += 1UL * this->_internal_edge_infos_size();
  for (const auto& msg : this->edge_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int32, uint64> companies_verticies = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_companies_verticies_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
      it = this->_internal_companies_verticies().begin();
      it != this->_internal_companies_verticies().end(); ++it) {
    total_size += Router_CompaniesVerticiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .serialization.Graph graph = 3;
  if (this->has_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_);
  }

  // .serialization.RouterImpl route_impl = 4;
  if (this->has_route_impl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_impl_);
  }

  // double bus_velocity = 2;
  if (!(this->bus_velocity() <= 0 && this->bus_velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // double pedestrian_velocity = 8;
  if (!(this->pedestrian_velocity() <= 0 && this->pedestrian_velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 bus_wait_time = 1;
  if (this->bus_wait_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bus_wait_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Router::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.Router)
  GOOGLE_DCHECK_NE(&from, this);
  const Router* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Router>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.Router)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.Router)
    MergeFrom(*source);
  }
}

void Router::MergeFrom(const Router& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.Router)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stop_vertex_ids_.MergeFrom(from.stop_vertex_ids_);
  vertex_infos_.MergeFrom(from.vertex_infos_);
  edge_infos_.MergeFrom(from.edge_infos_);
  companies_verticies_.MergeFrom(from.companies_verticies_);
  if (from.has_graph()) {
    _internal_mutable_graph()->::serialization::Graph::MergeFrom(from._internal_graph());
  }
  if (from.has_route_impl()) {
    _internal_mutable_route_impl()->::serialization::RouterImpl::MergeFrom(from._internal_route_impl());
  }
  if (!(from.bus_velocity() <= 0 && from.bus_velocity() >= 0)) {
    _internal_set_bus_velocity(from._internal_bus_velocity());
  }
  if (!(from.pedestrian_velocity() <= 0 && from.pedestrian_velocity() >= 0)) {
    _internal_set_pedestrian_velocity(from._internal_pedestrian_velocity());
  }
  if (from.bus_wait_time() != 0) {
    _internal_set_bus_wait_time(from._internal_bus_wait_time());
  }
}

void Router::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.Router)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Router::CopyFrom(const Router& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.Router)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Router::IsInitialized() const {
  return true;
}

void Router::InternalSwap(Router* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stop_vertex_ids_.InternalSwap(&other->stop_vertex_ids_);
  vertex_infos_.InternalSwap(&other->vertex_infos_);
  edge_infos_.InternalSwap(&other->edge_infos_);
  companies_verticies_.Swap(&other->companies_verticies_);
  swap(graph_, other->graph_);
  swap(route_impl_, other->route_impl_);
  swap(bus_velocity_, other->bus_velocity_);
  swap(pedestrian_velocity_, other->pedestrian_velocity_);
  swap(bus_wait_time_, other->bus_wait_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Router::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Color::InitAsDefaultInstance() {
}
class Color::_Internal {
 public:
};

Color::Color()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  color_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_color_string().empty()) {
    color_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.color_string_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&opacity_) -
    reinterpret_cast<char*>(&type_)) + sizeof(opacity_));
  // @@protoc_insertion_point(copy_constructor:serialization.Color)
}

void Color::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Color_transport_5fcatalog_2eproto.base);
  color_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opacity_) -
      reinterpret_cast<char*>(&type_)) + sizeof(opacity_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:serialization.Color)
  SharedDtor();
}

void Color::SharedDtor() {
  color_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Color& Color::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Color_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opacity_) -
      reinterpret_cast<char*>(&type_)) + sizeof(opacity_));
  _internal_metadata_.Clear();
}

const char* Color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .serialization.ColorType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::serialization::ColorType>(val));
        } else goto handle_unusual;
        continue;
      // string color_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_color_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.Color.color_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 red = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 green = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          green_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 blue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double opacity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Color::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serialization.ColorType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string color_string = 2;
  if (this->color_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color_string().data(), static_cast<int>(this->_internal_color_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.Color.color_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_color_string(), target);
  }

  // uint32 red = 3;
  if (this->red() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_red(), target);
  }

  // uint32 green = 4;
  if (this->green() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_green(), target);
  }

  // uint32 blue = 5;
  if (this->blue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_blue(), target);
  }

  // double opacity = 6;
  if (!(this->opacity() <= 0 && this->opacity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_opacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.Color)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string color_string = 2;
  if (this->color_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color_string());
  }

  // .serialization.ColorType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 red = 3;
  if (this->red() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_red());
  }

  // uint32 green = 4;
  if (this->green() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_green());
  }

  // uint32 blue = 5;
  if (this->blue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blue());
  }

  // double opacity = 6;
  if (!(this->opacity() <= 0 && this->opacity() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Color>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.Color)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.color_string().size() > 0) {

    color_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.color_string_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.red() != 0) {
    _internal_set_red(from._internal_red());
  }
  if (from.green() != 0) {
    _internal_set_green(from._internal_green());
  }
  if (from.blue() != 0) {
    _internal_set_blue(from._internal_blue());
  }
  if (!(from.opacity() <= 0 && from.opacity() >= 0)) {
    _internal_set_opacity(from._internal_opacity());
  }
}

void Color::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  color_string_.Swap(&other->color_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(red_, other->red_);
  swap(green_, other->green_);
  swap(blue_, other->blue_);
  swap(opacity_, other->opacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point::InitAsDefaultInstance() {
}
class Point::_Internal {
 public:
};

Point::Point()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:serialization.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:serialization.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RenderSettings::InitAsDefaultInstance() {
  ::serialization::_RenderSettings_default_instance_._instance.get_mutable()->underlayer_color_ = const_cast< ::serialization::Color*>(
      ::serialization::Color::internal_default_instance());
  ::serialization::_RenderSettings_default_instance_._instance.get_mutable()->bus_label_offset_ = const_cast< ::serialization::Point*>(
      ::serialization::Point::internal_default_instance());
  ::serialization::_RenderSettings_default_instance_._instance.get_mutable()->stop_label_offset_ = const_cast< ::serialization::Point*>(
      ::serialization::Point::internal_default_instance());
}
class RenderSettings::_Internal {
 public:
  static const ::serialization::Color& underlayer_color(const RenderSettings* msg);
  static const ::serialization::Point& bus_label_offset(const RenderSettings* msg);
  static const ::serialization::Point& stop_label_offset(const RenderSettings* msg);
};

const ::serialization::Color&
RenderSettings::_Internal::underlayer_color(const RenderSettings* msg) {
  return *msg->underlayer_color_;
}
const ::serialization::Point&
RenderSettings::_Internal::bus_label_offset(const RenderSettings* msg) {
  return *msg->bus_label_offset_;
}
const ::serialization::Point&
RenderSettings::_Internal::stop_label_offset(const RenderSettings* msg) {
  return *msg->stop_label_offset_;
}
RenderSettings::RenderSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.RenderSettings)
}
RenderSettings::RenderSettings(const RenderSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      palette_(from.palette_),
      layers_(from.layers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_underlayer_color()) {
    underlayer_color_ = new ::serialization::Color(*from.underlayer_color_);
  } else {
    underlayer_color_ = nullptr;
  }
  if (from._internal_has_bus_label_offset()) {
    bus_label_offset_ = new ::serialization::Point(*from.bus_label_offset_);
  } else {
    bus_label_offset_ = nullptr;
  }
  if (from._internal_has_stop_label_offset()) {
    stop_label_offset_ = new ::serialization::Point(*from.stop_label_offset_);
  } else {
    stop_label_offset_ = nullptr;
  }
  ::memcpy(&max_width_, &from.max_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&company_line_width_) -
    reinterpret_cast<char*>(&max_width_)) + sizeof(company_line_width_));
  // @@protoc_insertion_point(copy_constructor:serialization.RenderSettings)
}

void RenderSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RenderSettings_transport_5fcatalog_2eproto.base);
  ::memset(&underlayer_color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&company_line_width_) -
      reinterpret_cast<char*>(&underlayer_color_)) + sizeof(company_line_width_));
}

RenderSettings::~RenderSettings() {
  // @@protoc_insertion_point(destructor:serialization.RenderSettings)
  SharedDtor();
}

void RenderSettings::SharedDtor() {
  if (this != internal_default_instance()) delete underlayer_color_;
  if (this != internal_default_instance()) delete bus_label_offset_;
  if (this != internal_default_instance()) delete stop_label_offset_;
}

void RenderSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenderSettings& RenderSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RenderSettings_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void RenderSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.RenderSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  palette_.Clear();
  layers_.Clear();
  if (GetArenaNoVirtual() == nullptr && underlayer_color_ != nullptr) {
    delete underlayer_color_;
  }
  underlayer_color_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bus_label_offset_ != nullptr) {
    delete bus_label_offset_;
  }
  bus_label_offset_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stop_label_offset_ != nullptr) {
    delete stop_label_offset_;
  }
  stop_label_offset_ = nullptr;
  ::memset(&max_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&company_line_width_) -
      reinterpret_cast<char*>(&max_width_)) + sizeof(company_line_width_));
  _internal_metadata_.Clear();
}

const char* RenderSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double max_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          max_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          max_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double padding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double outer_margin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          outer_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .serialization.Color palette = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_palette(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // double line_width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          line_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .serialization.Color underlayer_color = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_underlayer_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double underlayer_width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          underlayer_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stop_radius = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          stop_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .serialization.Point bus_label_offset = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_bus_label_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bus_label_font_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          bus_label_font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .serialization.Point stop_label_offset = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_label_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stop_label_font_size = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          stop_label_font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string layers = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_layers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.RenderSettings.layers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // double company_radius = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          company_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double company_line_width = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          company_line_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenderSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.RenderSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_width = 1;
  if (!(this->max_width() <= 0 && this->max_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_width(), target);
  }

  // double max_height = 2;
  if (!(this->max_height() <= 0 && this->max_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_height(), target);
  }

  // double padding = 3;
  if (!(this->padding() <= 0 && this->padding() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_padding(), target);
  }

  // double outer_margin = 4;
  if (!(this->outer_margin() <= 0 && this->outer_margin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_outer_margin(), target);
  }

  // repeated .serialization.Color palette = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_palette_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_palette(i), target, stream);
  }

  // double line_width = 6;
  if (!(this->line_width() <= 0 && this->line_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_line_width(), target);
  }

  // .serialization.Color underlayer_color = 7;
  if (this->has_underlayer_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::underlayer_color(this), target, stream);
  }

  // double underlayer_width = 8;
  if (!(this->underlayer_width() <= 0 && this->underlayer_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_underlayer_width(), target);
  }

  // double stop_radius = 9;
  if (!(this->stop_radius() <= 0 && this->stop_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_stop_radius(), target);
  }

  // .serialization.Point bus_label_offset = 10;
  if (this->has_bus_label_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::bus_label_offset(this), target, stream);
  }

  // int32 bus_label_font_size = 11;
  if (this->bus_label_font_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_bus_label_font_size(), target);
  }

  // .serialization.Point stop_label_offset = 12;
  if (this->has_stop_label_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::stop_label_offset(this), target, stream);
  }

  // int32 stop_label_font_size = 13;
  if (this->stop_label_font_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_stop_label_font_size(), target);
  }

  // repeated string layers = 14;
  for (int i = 0, n = this->_internal_layers_size(); i < n; i++) {
    const auto& s = this->_internal_layers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.RenderSettings.layers");
    target = stream->WriteString(14, s, target);
  }

  // double company_radius = 15;
  if (!(this->company_radius() <= 0 && this->company_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_company_radius(), target);
  }

  // double company_line_width = 16;
  if (!(this->company_line_width() <= 0 && this->company_line_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_company_line_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.RenderSettings)
  return target;
}

size_t RenderSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.RenderSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serialization.Color palette = 5;
  total_size += 1UL * this->_internal_palette_size();
  for (const auto& msg : this->palette_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string layers = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(layers_.size());
  for (int i = 0, n = layers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      layers_.Get(i));
  }

  // .serialization.Color underlayer_color = 7;
  if (this->has_underlayer_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *underlayer_color_);
  }

  // .serialization.Point bus_label_offset = 10;
  if (this->has_bus_label_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bus_label_offset_);
  }

  // .serialization.Point stop_label_offset = 12;
  if (this->has_stop_label_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stop_label_offset_);
  }

  // double max_width = 1;
  if (!(this->max_width() <= 0 && this->max_width() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_height = 2;
  if (!(this->max_height() <= 0 && this->max_height() >= 0)) {
    total_size += 1 + 8;
  }

  // double padding = 3;
  if (!(this->padding() <= 0 && this->padding() >= 0)) {
    total_size += 1 + 8;
  }

  // double outer_margin = 4;
  if (!(this->outer_margin() <= 0 && this->outer_margin() >= 0)) {
    total_size += 1 + 8;
  }

  // double line_width = 6;
  if (!(this->line_width() <= 0 && this->line_width() >= 0)) {
    total_size += 1 + 8;
  }

  // double underlayer_width = 8;
  if (!(this->underlayer_width() <= 0 && this->underlayer_width() >= 0)) {
    total_size += 1 + 8;
  }

  // double stop_radius = 9;
  if (!(this->stop_radius() <= 0 && this->stop_radius() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 bus_label_font_size = 11;
  if (this->bus_label_font_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bus_label_font_size());
  }

  // int32 stop_label_font_size = 13;
  if (this->stop_label_font_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stop_label_font_size());
  }

  // double company_radius = 15;
  if (!(this->company_radius() <= 0 && this->company_radius() >= 0)) {
    total_size += 1 + 8;
  }

  // double company_line_width = 16;
  if (!(this->company_line_width() <= 0 && this->company_line_width() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenderSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.RenderSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const RenderSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenderSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.RenderSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.RenderSettings)
    MergeFrom(*source);
  }
}

void RenderSettings::MergeFrom(const RenderSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.RenderSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  palette_.MergeFrom(from.palette_);
  layers_.MergeFrom(from.layers_);
  if (from.has_underlayer_color()) {
    _internal_mutable_underlayer_color()->::serialization::Color::MergeFrom(from._internal_underlayer_color());
  }
  if (from.has_bus_label_offset()) {
    _internal_mutable_bus_label_offset()->::serialization::Point::MergeFrom(from._internal_bus_label_offset());
  }
  if (from.has_stop_label_offset()) {
    _internal_mutable_stop_label_offset()->::serialization::Point::MergeFrom(from._internal_stop_label_offset());
  }
  if (!(from.max_width() <= 0 && from.max_width() >= 0)) {
    _internal_set_max_width(from._internal_max_width());
  }
  if (!(from.max_height() <= 0 && from.max_height() >= 0)) {
    _internal_set_max_height(from._internal_max_height());
  }
  if (!(from.padding() <= 0 && from.padding() >= 0)) {
    _internal_set_padding(from._internal_padding());
  }
  if (!(from.outer_margin() <= 0 && from.outer_margin() >= 0)) {
    _internal_set_outer_margin(from._internal_outer_margin());
  }
  if (!(from.line_width() <= 0 && from.line_width() >= 0)) {
    _internal_set_line_width(from._internal_line_width());
  }
  if (!(from.underlayer_width() <= 0 && from.underlayer_width() >= 0)) {
    _internal_set_underlayer_width(from._internal_underlayer_width());
  }
  if (!(from.stop_radius() <= 0 && from.stop_radius() >= 0)) {
    _internal_set_stop_radius(from._internal_stop_radius());
  }
  if (from.bus_label_font_size() != 0) {
    _internal_set_bus_label_font_size(from._internal_bus_label_font_size());
  }
  if (from.stop_label_font_size() != 0) {
    _internal_set_stop_label_font_size(from._internal_stop_label_font_size());
  }
  if (!(from.company_radius() <= 0 && from.company_radius() >= 0)) {
    _internal_set_company_radius(from._internal_company_radius());
  }
  if (!(from.company_line_width() <= 0 && from.company_line_width() >= 0)) {
    _internal_set_company_line_width(from._internal_company_line_width());
  }
}

void RenderSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.RenderSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenderSettings::CopyFrom(const RenderSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.RenderSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderSettings::IsInitialized() const {
  return true;
}

void RenderSettings::InternalSwap(RenderSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  palette_.InternalSwap(&other->palette_);
  layers_.InternalSwap(&other->layers_);
  swap(underlayer_color_, other->underlayer_color_);
  swap(bus_label_offset_, other->bus_label_offset_);
  swap(stop_label_offset_, other->stop_label_offset_);
  swap(max_width_, other->max_width_);
  swap(max_height_, other->max_height_);
  swap(padding_, other->padding_);
  swap(outer_margin_, other->outer_margin_);
  swap(line_width_, other->line_width_);
  swap(underlayer_width_, other->underlayer_width_);
  swap(stop_radius_, other->stop_radius_);
  swap(bus_label_font_size_, other->bus_label_font_size_);
  swap(stop_label_font_size_, other->stop_label_font_size_);
  swap(company_radius_, other->company_radius_);
  swap(company_line_width_, other->company_line_width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenderSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Bus::InitAsDefaultInstance() {
}
class Bus::_Internal {
 public:
};

Bus::Bus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.Bus)
}
Bus::Bus(const Bus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stops_(from.stops_),
      endpoints_(from.endpoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:serialization.Bus)
}

void Bus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Bus_transport_5fcatalog_2eproto.base);
}

Bus::~Bus() {
  // @@protoc_insertion_point(destructor:serialization.Bus)
  SharedDtor();
}

void Bus::SharedDtor() {
}

void Bus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bus& Bus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Bus_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Bus::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.Bus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_.Clear();
  endpoints_.Clear();
  _internal_metadata_.Clear();
}

const char* Bus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string stops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stops();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.Bus.stops"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string endpoints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.Bus.endpoints"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.Bus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string stops = 1;
  for (int i = 0, n = this->_internal_stops_size(); i < n; i++) {
    const auto& s = this->_internal_stops(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.Bus.stops");
    target = stream->WriteString(1, s, target);
  }

  // repeated string endpoints = 2;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.Bus.endpoints");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.Bus)
  return target;
}

size_t Bus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.Bus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stops = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stops_.size());
  for (int i = 0, n = stops_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stops_.Get(i));
  }

  // repeated string endpoints = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(endpoints_.size());
  for (int i = 0, n = endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      endpoints_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.Bus)
  GOOGLE_DCHECK_NE(&from, this);
  const Bus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.Bus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.Bus)
    MergeFrom(*source);
  }
}

void Bus::MergeFrom(const Bus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.Bus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stops_.MergeFrom(from.stops_);
  endpoints_.MergeFrom(from.endpoints_);
}

void Bus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.Bus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bus::CopyFrom(const Bus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.Bus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bus::IsInitialized() const {
  return true;
}

void Bus::InternalSwap(Bus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stops_.InternalSwap(&other->stops_);
  endpoints_.InternalSwap(&other->endpoints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Renderer_StopsCoordsEntry_DoNotUse::Renderer_StopsCoordsEntry_DoNotUse() {}
Renderer_StopsCoordsEntry_DoNotUse::Renderer_StopsCoordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Renderer_StopsCoordsEntry_DoNotUse::MergeFrom(const Renderer_StopsCoordsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Renderer_StopsCoordsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Renderer_StopsCoordsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Renderer_BusColorsEntry_DoNotUse::Renderer_BusColorsEntry_DoNotUse() {}
Renderer_BusColorsEntry_DoNotUse::Renderer_BusColorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Renderer_BusColorsEntry_DoNotUse::MergeFrom(const Renderer_BusColorsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Renderer_BusColorsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Renderer_BusColorsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Renderer_BusesEntry_DoNotUse::Renderer_BusesEntry_DoNotUse() {}
Renderer_BusesEntry_DoNotUse::Renderer_BusesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Renderer_BusesEntry_DoNotUse::MergeFrom(const Renderer_BusesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Renderer_BusesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Renderer_BusesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Renderer_CompanyCoordsEntry_DoNotUse::Renderer_CompanyCoordsEntry_DoNotUse() {}
Renderer_CompanyCoordsEntry_DoNotUse::Renderer_CompanyCoordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Renderer_CompanyCoordsEntry_DoNotUse::MergeFrom(const Renderer_CompanyCoordsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Renderer_CompanyCoordsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Renderer_CompanyCoordsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Renderer::InitAsDefaultInstance() {
  ::serialization::_Renderer_default_instance_._instance.get_mutable()->settings_ = const_cast< ::serialization::RenderSettings*>(
      ::serialization::RenderSettings::internal_default_instance());
}
class Renderer::_Internal {
 public:
  static const ::serialization::RenderSettings& settings(const Renderer* msg);
};

const ::serialization::RenderSettings&
Renderer::_Internal::settings(const Renderer* msg) {
  return *msg->settings_;
}
Renderer::Renderer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.Renderer)
}
Renderer::Renderer(const Renderer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stops_coords_.MergeFrom(from.stops_coords_);
  bus_colors_.MergeFrom(from.bus_colors_);
  buses_.MergeFrom(from.buses_);
  company_coords_.MergeFrom(from.company_coords_);
  if (from._internal_has_settings()) {
    settings_ = new ::serialization::RenderSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:serialization.Renderer)
}

void Renderer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Renderer_transport_5fcatalog_2eproto.base);
  settings_ = nullptr;
}

Renderer::~Renderer() {
  // @@protoc_insertion_point(destructor:serialization.Renderer)
  SharedDtor();
}

void Renderer::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
}

void Renderer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Renderer& Renderer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Renderer_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Renderer::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.Renderer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_coords_.Clear();
  bus_colors_.Clear();
  buses_.Clear();
  company_coords_.Clear();
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Renderer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .serialization.RenderSettings settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .serialization.Point> stops_coords = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&stops_coords_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .serialization.Color> bus_colors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&bus_colors_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .serialization.Bus> buses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&buses_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .serialization.Point> company_coords = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&company_coords_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Renderer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.Renderer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serialization.RenderSettings settings = 1;
  if (this->has_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::settings(this), target, stream);
  }

  // map<string, .serialization.Point> stops_coords = 2;
  if (!this->_internal_stops_coords().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Point >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "serialization.Renderer.StopsCoordsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_stops_coords().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_stops_coords().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Point >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Point >::const_iterator
          it = this->_internal_stops_coords().begin();
          it != this->_internal_stops_coords().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Renderer_StopsCoordsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Point >::const_iterator
          it = this->_internal_stops_coords().begin();
          it != this->_internal_stops_coords().end(); ++it) {
        target = Renderer_StopsCoordsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .serialization.Color> bus_colors = 3;
  if (!this->_internal_bus_colors().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Color >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "serialization.Renderer.BusColorsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_bus_colors().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_bus_colors().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Color >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Color >::const_iterator
          it = this->_internal_bus_colors().begin();
          it != this->_internal_bus_colors().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Renderer_BusColorsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Color >::const_iterator
          it = this->_internal_bus_colors().begin();
          it != this->_internal_bus_colors().end(); ++it) {
        target = Renderer_BusColorsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .serialization.Bus> buses = 4;
  if (!this->_internal_buses().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Bus >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "serialization.Renderer.BusesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_buses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_buses().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Bus >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Bus >::const_iterator
          it = this->_internal_buses().begin();
          it != this->_internal_buses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Renderer_BusesEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Bus >::const_iterator
          it = this->_internal_buses().begin();
          it != this->_internal_buses().end(); ++it) {
        target = Renderer_BusesEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int32, .serialization.Point> company_coords = 5;
  if (!this->_internal_company_coords().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::serialization::Point >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_company_coords().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_company_coords().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::serialization::Point >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::serialization::Point >::const_iterator
          it = this->_internal_company_coords().begin();
          it != this->_internal_company_coords().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Renderer_CompanyCoordsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::serialization::Point >::const_iterator
          it = this->_internal_company_coords().begin();
          it != this->_internal_company_coords().end(); ++it) {
        target = Renderer_CompanyCoordsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.Renderer)
  return target;
}

size_t Renderer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.Renderer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .serialization.Point> stops_coords = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stops_coords_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Point >::const_iterator
      it = this->_internal_stops_coords().begin();
      it != this->_internal_stops_coords().end(); ++it) {
    total_size += Renderer_StopsCoordsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .serialization.Color> bus_colors = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bus_colors_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Color >::const_iterator
      it = this->_internal_bus_colors().begin();
      it != this->_internal_bus_colors().end(); ++it) {
    total_size += Renderer_BusColorsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .serialization.Bus> buses = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_buses_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::serialization::Bus >::const_iterator
      it = this->_internal_buses().begin();
      it != this->_internal_buses().end(); ++it) {
    total_size += Renderer_BusesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .serialization.Point> company_coords = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_company_coords_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::serialization::Point >::const_iterator
      it = this->_internal_company_coords().begin();
      it != this->_internal_company_coords().end(); ++it) {
    total_size += Renderer_CompanyCoordsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .serialization.RenderSettings settings = 1;
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Renderer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.Renderer)
  GOOGLE_DCHECK_NE(&from, this);
  const Renderer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Renderer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.Renderer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.Renderer)
    MergeFrom(*source);
  }
}

void Renderer::MergeFrom(const Renderer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.Renderer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stops_coords_.MergeFrom(from.stops_coords_);
  bus_colors_.MergeFrom(from.bus_colors_);
  buses_.MergeFrom(from.buses_);
  company_coords_.MergeFrom(from.company_coords_);
  if (from.has_settings()) {
    _internal_mutable_settings()->::serialization::RenderSettings::MergeFrom(from._internal_settings());
  }
}

void Renderer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.Renderer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Renderer::CopyFrom(const Renderer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.Renderer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Renderer::IsInitialized() const {
  return true;
}

void Renderer::InternalSwap(Renderer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stops_coords_.Swap(&other->stops_coords_);
  bus_colors_.Swap(&other->bus_colors_);
  buses_.Swap(&other->buses_);
  company_coords_.Swap(&other->company_coords_);
  swap(settings_, other->settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Renderer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NearbyStop::InitAsDefaultInstance() {
}
class NearbyStop::_Internal {
 public:
};

NearbyStop::NearbyStop()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.NearbyStop)
}
NearbyStop::NearbyStop(const NearbyStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  meters_ = from.meters_;
  // @@protoc_insertion_point(copy_constructor:serialization.NearbyStop)
}

void NearbyStop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NearbyStop_transport_5fcatalog_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  meters_ = 0u;
}

NearbyStop::~NearbyStop() {
  // @@protoc_insertion_point(destructor:serialization.NearbyStop)
  SharedDtor();
}

void NearbyStop::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NearbyStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NearbyStop& NearbyStop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NearbyStop_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void NearbyStop::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.NearbyStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  meters_ = 0u;
  _internal_metadata_.Clear();
}

const char* NearbyStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.NearbyStop.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 meters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          meters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NearbyStop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.NearbyStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.NearbyStop.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 meters = 2;
  if (this->meters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_meters(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.NearbyStop)
  return target;
}

size_t NearbyStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.NearbyStop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 meters = 2;
  if (this->meters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_meters());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NearbyStop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.NearbyStop)
  GOOGLE_DCHECK_NE(&from, this);
  const NearbyStop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NearbyStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.NearbyStop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.NearbyStop)
    MergeFrom(*source);
  }
}

void NearbyStop::MergeFrom(const NearbyStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.NearbyStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.meters() != 0) {
    _internal_set_meters(from._internal_meters());
  }
}

void NearbyStop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.NearbyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearbyStop::CopyFrom(const NearbyStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.NearbyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearbyStop::IsInitialized() const {
  return true;
}

void NearbyStop::InternalSwap(NearbyStop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(meters_, other->meters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NearbyStop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Coords::InitAsDefaultInstance() {
}
class Coords::_Internal {
 public:
};

Coords::Coords()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.Coords)
}
Coords::Coords(const Coords& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lon_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  // @@protoc_insertion_point(copy_constructor:serialization.Coords)
}

void Coords::SharedCtor() {
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
}

Coords::~Coords() {
  // @@protoc_insertion_point(destructor:serialization.Coords)
  SharedDtor();
}

void Coords::SharedDtor() {
}

void Coords::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Coords& Coords::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Coords_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Coords::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.Coords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  _internal_metadata_.Clear();
}

const char* Coords::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Coords::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.Coords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat(), target);
  }

  // double lon = 2;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.Coords)
  return target;
}

size_t Coords::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.Coords)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double lon = 2;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Coords::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.Coords)
  GOOGLE_DCHECK_NE(&from, this);
  const Coords* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Coords>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.Coords)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.Coords)
    MergeFrom(*source);
  }
}

void Coords::MergeFrom(const Coords& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.Coords)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from.lon() <= 0 && from.lon() >= 0)) {
    _internal_set_lon(from._internal_lon());
  }
}

void Coords::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.Coords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coords::CopyFrom(const Coords& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.Coords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coords::IsInitialized() const {
  return true;
}

void Coords::InternalSwap(Coords* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Coords::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddressComponent::InitAsDefaultInstance() {
}
class AddressComponent::_Internal {
 public:
};

AddressComponent::AddressComponent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.AddressComponent)
}
AddressComponent::AddressComponent(const AddressComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:serialization.AddressComponent)
}

void AddressComponent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddressComponent_transport_5fcatalog_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddressComponent::~AddressComponent() {
  // @@protoc_insertion_point(destructor:serialization.AddressComponent)
  SharedDtor();
}

void AddressComponent::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddressComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddressComponent& AddressComponent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddressComponent_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void AddressComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.AddressComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AddressComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.AddressComponent.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressComponent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.AddressComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.AddressComponent.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.AddressComponent)
  return target;
}

size_t AddressComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.AddressComponent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddressComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.AddressComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const AddressComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddressComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.AddressComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.AddressComponent)
    MergeFrom(*source);
  }
}

void AddressComponent::MergeFrom(const AddressComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.AddressComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void AddressComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.AddressComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressComponent::CopyFrom(const AddressComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.AddressComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressComponent::IsInitialized() const {
  return true;
}

void AddressComponent::InternalSwap(AddressComponent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressComponent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Address::InitAsDefaultInstance() {
  ::serialization::_Address_default_instance_._instance.get_mutable()->coords_ = const_cast< ::serialization::Coords*>(
      ::serialization::Coords::internal_default_instance());
}
class Address::_Internal {
 public:
  static const ::serialization::Coords& coords(const Address* msg);
};

const ::serialization::Coords&
Address::_Internal::coords(const Address* msg) {
  return *msg->coords_;
}
Address::Address()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.Address)
}
Address::Address(const Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      components_(from.components_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  formatted_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_formatted().empty()) {
    formatted_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.formatted_);
  }
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_comment().empty()) {
    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from._internal_has_coords()) {
    coords_ = new ::serialization::Coords(*from.coords_);
  } else {
    coords_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:serialization.Address)
}

void Address::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Address_transport_5fcatalog_2eproto.base);
  formatted_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coords_ = nullptr;
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:serialization.Address)
  SharedDtor();
}

void Address::SharedDtor() {
  formatted_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coords_;
}

void Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Address& Address::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Address_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  components_.Clear();
  formatted_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && coords_ != nullptr) {
    delete coords_;
  }
  coords_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string formatted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_formatted();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.Address.formatted"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .serialization.AddressComponent components = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .serialization.Coords coords = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_coords(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.Address.comment"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Address::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string formatted = 1;
  if (this->formatted().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_formatted().data(), static_cast<int>(this->_internal_formatted().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.Address.formatted");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_formatted(), target);
  }

  // repeated .serialization.AddressComponent components = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_components_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_components(i), target, stream);
  }

  // .serialization.Coords coords = 3;
  if (this->has_coords()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::coords(this), target, stream);
  }

  // string comment = 4;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.Address.comment");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.Address)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serialization.AddressComponent components = 2;
  total_size += 1UL * this->_internal_components_size();
  for (const auto& msg : this->components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string formatted = 1;
  if (this->formatted().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_formatted());
  }

  // string comment = 4;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // .serialization.Coords coords = 3;
  if (this->has_coords()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coords_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Address::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.Address)
  GOOGLE_DCHECK_NE(&from, this);
  const Address* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Address>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.Address)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  components_.MergeFrom(from.components_);
  if (from.formatted().size() > 0) {

    formatted_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.formatted_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_coords()) {
    _internal_mutable_coords()->::serialization::Coords::MergeFrom(from._internal_coords());
  }
}

void Address::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::InternalSwap(Address* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  components_.InternalSwap(&other->components_);
  formatted_.Swap(&other->formatted_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(coords_, other->coords_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Address::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Name::InitAsDefaultInstance() {
}
class Name::_Internal {
 public:
};

Name::Name()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.Name)
}
Name::Name(const Name& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:serialization.Name)
}

void Name::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Name_transport_5fcatalog_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

Name::~Name() {
  // @@protoc_insertion_point(destructor:serialization.Name)
  SharedDtor();
}

void Name::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Name::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Name& Name::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Name_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Name::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.Name)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* Name::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.Name.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .serialization.Name.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::serialization::Name_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Name::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.Name)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.Name.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // .serialization.Name.Type type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.Name)
  return target;
}

size_t Name::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.Name)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .serialization.Name.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Name::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.Name)
  GOOGLE_DCHECK_NE(&from, this);
  const Name* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Name>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.Name)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.Name)
    MergeFrom(*source);
  }
}

void Name::MergeFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.Name)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Name::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Name::CopyFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Name::IsInitialized() const {
  return true;
}

void Name::InternalSwap(Name* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Name::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Phone::InitAsDefaultInstance() {
}
class Phone::_Internal {
 public:
};

Phone::Phone()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.Phone)
}
Phone::Phone(const Phone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  formatted_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_formatted().empty()) {
    formatted_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.formatted_);
  }
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country_code().empty()) {
    country_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  local_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_code().empty()) {
    local_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_code_);
  }
  number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_number().empty()) {
    number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  extension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extension().empty()) {
    extension_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:serialization.Phone)
}

void Phone::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Phone_transport_5fcatalog_2eproto.base);
  formatted_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

Phone::~Phone() {
  // @@protoc_insertion_point(destructor:serialization.Phone)
  SharedDtor();
}

void Phone::SharedDtor() {
  formatted_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Phone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Phone& Phone::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Phone_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Phone::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.Phone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  formatted_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* Phone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string formatted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_formatted();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.Phone.formatted"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .serialization.Phone.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::serialization::Phone_Type>(val));
        } else goto handle_unusual;
        continue;
      // string country_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.Phone.country_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string local_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_local_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.Phone.local_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.Phone.number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string extension = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_extension();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.Phone.extension"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.Phone.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Phone::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.Phone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string formatted = 1;
  if (this->formatted().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_formatted().data(), static_cast<int>(this->_internal_formatted().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.Phone.formatted");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_formatted(), target);
  }

  // .serialization.Phone.Type type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string country_code = 3;
  if (this->country_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.Phone.country_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_country_code(), target);
  }

  // string local_code = 4;
  if (this->local_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_code().data(), static_cast<int>(this->_internal_local_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.Phone.local_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_local_code(), target);
  }

  // string number = 5;
  if (this->number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_number().data(), static_cast<int>(this->_internal_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.Phone.number");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_number(), target);
  }

  // string extension = 6;
  if (this->extension().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extension().data(), static_cast<int>(this->_internal_extension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.Phone.extension");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_extension(), target);
  }

  // string description = 7;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.Phone.description");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.Phone)
  return target;
}

size_t Phone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.Phone)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string formatted = 1;
  if (this->formatted().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_formatted());
  }

  // string country_code = 3;
  if (this->country_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_code());
  }

  // string local_code = 4;
  if (this->local_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_code());
  }

  // string number = 5;
  if (this->number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_number());
  }

  // string extension = 6;
  if (this->extension().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extension());
  }

  // string description = 7;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .serialization.Phone.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Phone::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.Phone)
  GOOGLE_DCHECK_NE(&from, this);
  const Phone* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Phone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.Phone)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.Phone)
    MergeFrom(*source);
  }
}

void Phone::MergeFrom(const Phone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.Phone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.formatted().size() > 0) {

    formatted_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.formatted_);
  }
  if (from.country_code().size() > 0) {

    country_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  if (from.local_code().size() > 0) {

    local_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_code_);
  }
  if (from.number().size() > 0) {

    number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  if (from.extension().size() > 0) {

    extension_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Phone::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.Phone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Phone::CopyFrom(const Phone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.Phone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phone::IsInitialized() const {
  return true;
}

void Phone::InternalSwap(Phone* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  formatted_.Swap(&other->formatted_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_code_.Swap(&other->local_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  number_.Swap(&other->number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extension_.Swap(&other->extension_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Phone::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkingTimeInterval::InitAsDefaultInstance() {
}
class WorkingTimeInterval::_Internal {
 public:
};

WorkingTimeInterval::WorkingTimeInterval()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.WorkingTimeInterval)
}
WorkingTimeInterval::WorkingTimeInterval(const WorkingTimeInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&day_, &from.day_,
    static_cast<size_t>(reinterpret_cast<char*>(&minutes_to_) -
    reinterpret_cast<char*>(&day_)) + sizeof(minutes_to_));
  // @@protoc_insertion_point(copy_constructor:serialization.WorkingTimeInterval)
}

void WorkingTimeInterval::SharedCtor() {
  ::memset(&day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minutes_to_) -
      reinterpret_cast<char*>(&day_)) + sizeof(minutes_to_));
}

WorkingTimeInterval::~WorkingTimeInterval() {
  // @@protoc_insertion_point(destructor:serialization.WorkingTimeInterval)
  SharedDtor();
}

void WorkingTimeInterval::SharedDtor() {
}

void WorkingTimeInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkingTimeInterval& WorkingTimeInterval::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkingTimeInterval_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void WorkingTimeInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.WorkingTimeInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minutes_to_) -
      reinterpret_cast<char*>(&day_)) + sizeof(minutes_to_));
  _internal_metadata_.Clear();
}

const char* WorkingTimeInterval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .serialization.WorkingTimeInterval.Day day = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_day(static_cast<::serialization::WorkingTimeInterval_Day>(val));
        } else goto handle_unusual;
        continue;
      // int32 minutes_from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          minutes_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minutes_to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          minutes_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkingTimeInterval::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.WorkingTimeInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serialization.WorkingTimeInterval.Day day = 1;
  if (this->day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_day(), target);
  }

  // int32 minutes_from = 2;
  if (this->minutes_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_minutes_from(), target);
  }

  // int32 minutes_to = 3;
  if (this->minutes_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_minutes_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.WorkingTimeInterval)
  return target;
}

size_t WorkingTimeInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.WorkingTimeInterval)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .serialization.WorkingTimeInterval.Day day = 1;
  if (this->day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_day());
  }

  // int32 minutes_from = 2;
  if (this->minutes_from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minutes_from());
  }

  // int32 minutes_to = 3;
  if (this->minutes_to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minutes_to());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkingTimeInterval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.WorkingTimeInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkingTimeInterval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkingTimeInterval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.WorkingTimeInterval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.WorkingTimeInterval)
    MergeFrom(*source);
  }
}

void WorkingTimeInterval::MergeFrom(const WorkingTimeInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.WorkingTimeInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.day() != 0) {
    _internal_set_day(from._internal_day());
  }
  if (from.minutes_from() != 0) {
    _internal_set_minutes_from(from._internal_minutes_from());
  }
  if (from.minutes_to() != 0) {
    _internal_set_minutes_to(from._internal_minutes_to());
  }
}

void WorkingTimeInterval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.WorkingTimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkingTimeInterval::CopyFrom(const WorkingTimeInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.WorkingTimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkingTimeInterval::IsInitialized() const {
  return true;
}

void WorkingTimeInterval::InternalSwap(WorkingTimeInterval* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(day_, other->day_);
  swap(minutes_from_, other->minutes_from_);
  swap(minutes_to_, other->minutes_to_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkingTimeInterval::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkingTime::InitAsDefaultInstance() {
}
class WorkingTime::_Internal {
 public:
};

WorkingTime::WorkingTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.WorkingTime)
}
WorkingTime::WorkingTime(const WorkingTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      intervals_(from.intervals_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  formatted_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_formatted().empty()) {
    formatted_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.formatted_);
  }
  // @@protoc_insertion_point(copy_constructor:serialization.WorkingTime)
}

void WorkingTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkingTime_transport_5fcatalog_2eproto.base);
  formatted_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WorkingTime::~WorkingTime() {
  // @@protoc_insertion_point(destructor:serialization.WorkingTime)
  SharedDtor();
}

void WorkingTime::SharedDtor() {
  formatted_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkingTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkingTime& WorkingTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkingTime_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void WorkingTime::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.WorkingTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intervals_.Clear();
  formatted_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* WorkingTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string formatted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_formatted();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.WorkingTime.formatted"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .serialization.WorkingTimeInterval intervals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_intervals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkingTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.WorkingTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string formatted = 1;
  if (this->formatted().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_formatted().data(), static_cast<int>(this->_internal_formatted().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.WorkingTime.formatted");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_formatted(), target);
  }

  // repeated .serialization.WorkingTimeInterval intervals = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_intervals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_intervals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.WorkingTime)
  return target;
}

size_t WorkingTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.WorkingTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serialization.WorkingTimeInterval intervals = 2;
  total_size += 1UL * this->_internal_intervals_size();
  for (const auto& msg : this->intervals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string formatted = 1;
  if (this->formatted().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_formatted());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkingTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.WorkingTime)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkingTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkingTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.WorkingTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.WorkingTime)
    MergeFrom(*source);
  }
}

void WorkingTime::MergeFrom(const WorkingTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.WorkingTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intervals_.MergeFrom(from.intervals_);
  if (from.formatted().size() > 0) {

    formatted_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.formatted_);
  }
}

void WorkingTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.WorkingTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkingTime::CopyFrom(const WorkingTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.WorkingTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkingTime::IsInitialized() const {
  return true;
}

void WorkingTime::InternalSwap(WorkingTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  intervals_.InternalSwap(&other->intervals_);
  formatted_.Swap(&other->formatted_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkingTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Url::InitAsDefaultInstance() {
}
class Url::_Internal {
 public:
};

Url::Url()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.Url)
}
Url::Url(const Url& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:serialization.Url)
}

void Url::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Url_transport_5fcatalog_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Url::~Url() {
  // @@protoc_insertion_point(destructor:serialization.Url)
  SharedDtor();
}

void Url::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Url::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Url& Url::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Url_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Url::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.Url)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Url::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.Url.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Url::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.Url)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.Url.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.Url)
  return target;
}

size_t Url::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.Url)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Url::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.Url)
  GOOGLE_DCHECK_NE(&from, this);
  const Url* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Url>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.Url)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.Url)
    MergeFrom(*source);
  }
}

void Url::MergeFrom(const Url& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.Url)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Url::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.Url)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Url::CopyFrom(const Url& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.Url)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Url::IsInitialized() const {
  return true;
}

void Url::InternalSwap(Url* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Url::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Company::InitAsDefaultInstance() {
  ::serialization::_Company_default_instance_._instance.get_mutable()->address_ = const_cast< ::serialization::Address*>(
      ::serialization::Address::internal_default_instance());
  ::serialization::_Company_default_instance_._instance.get_mutable()->working_time_ = const_cast< ::serialization::WorkingTime*>(
      ::serialization::WorkingTime::internal_default_instance());
}
class Company::_Internal {
 public:
  static const ::serialization::Address& address(const Company* msg);
  static const ::serialization::WorkingTime& working_time(const Company* msg);
};

const ::serialization::Address&
Company::_Internal::address(const Company* msg) {
  return *msg->address_;
}
const ::serialization::WorkingTime&
Company::_Internal::working_time(const Company* msg) {
  return *msg->working_time_;
}
Company::Company()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.Company)
}
Company::Company(const Company& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      names_(from.names_),
      phones_(from.phones_),
      urls_(from.urls_),
      rubrics_(from.rubrics_),
      nearby_stops_(from.nearby_stops_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_address()) {
    address_ = new ::serialization::Address(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from._internal_has_working_time()) {
    working_time_ = new ::serialization::WorkingTime(*from.working_time_);
  } else {
    working_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:serialization.Company)
}

void Company::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Company_transport_5fcatalog_2eproto.base);
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&working_time_) -
      reinterpret_cast<char*>(&address_)) + sizeof(working_time_));
}

Company::~Company() {
  // @@protoc_insertion_point(destructor:serialization.Company)
  SharedDtor();
}

void Company::SharedDtor() {
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete working_time_;
}

void Company::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Company& Company::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Company_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Company::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.Company)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  phones_.Clear();
  urls_.Clear();
  rubrics_.Clear();
  nearby_stops_.Clear();
  if (GetArenaNoVirtual() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && working_time_ != nullptr) {
    delete working_time_;
  }
  working_time_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Company::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .serialization.Address address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .serialization.Name names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .serialization.Phone phones = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .serialization.Url urls = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_urls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint64 rubrics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_rubrics(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_rubrics(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .serialization.WorkingTime working_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_working_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .serialization.NearbyStop nearby_stops = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nearby_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Company::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.Company)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serialization.Address address = 1;
  if (this->has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::address(this), target, stream);
  }

  // repeated .serialization.Name names = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_names_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_names(i), target, stream);
  }

  // repeated .serialization.Phone phones = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_phones_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_phones(i), target, stream);
  }

  // repeated .serialization.Url urls = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_urls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_urls(i), target, stream);
  }

  // repeated uint64 rubrics = 5;
  {
    int byte_size = _rubrics_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          5, _internal_rubrics(), byte_size, target);
    }
  }

  // .serialization.WorkingTime working_time = 6;
  if (this->has_working_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::working_time(this), target, stream);
  }

  // repeated .serialization.NearbyStop nearby_stops = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nearby_stops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_nearby_stops(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.Company)
  return target;
}

size_t Company::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.Company)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serialization.Name names = 2;
  total_size += 1UL * this->_internal_names_size();
  for (const auto& msg : this->names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .serialization.Phone phones = 3;
  total_size += 1UL * this->_internal_phones_size();
  for (const auto& msg : this->phones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .serialization.Url urls = 4;
  total_size += 1UL * this->_internal_urls_size();
  for (const auto& msg : this->urls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 rubrics = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->rubrics_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rubrics_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .serialization.NearbyStop nearby_stops = 7;
  total_size += 1UL * this->_internal_nearby_stops_size();
  for (const auto& msg : this->nearby_stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .serialization.Address address = 1;
  if (this->has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // .serialization.WorkingTime working_time = 6;
  if (this->has_working_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *working_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Company::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.Company)
  GOOGLE_DCHECK_NE(&from, this);
  const Company* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Company>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.Company)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.Company)
    MergeFrom(*source);
  }
}

void Company::MergeFrom(const Company& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.Company)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  phones_.MergeFrom(from.phones_);
  urls_.MergeFrom(from.urls_);
  rubrics_.MergeFrom(from.rubrics_);
  nearby_stops_.MergeFrom(from.nearby_stops_);
  if (from.has_address()) {
    _internal_mutable_address()->::serialization::Address::MergeFrom(from._internal_address());
  }
  if (from.has_working_time()) {
    _internal_mutable_working_time()->::serialization::WorkingTime::MergeFrom(from._internal_working_time());
  }
}

void Company::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.Company)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Company::CopyFrom(const Company& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.Company)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Company::IsInitialized() const {
  return true;
}

void Company::InternalSwap(Company* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
  phones_.InternalSwap(&other->phones_);
  urls_.InternalSwap(&other->urls_);
  rubrics_.InternalSwap(&other->rubrics_);
  nearby_stops_.InternalSwap(&other->nearby_stops_);
  swap(address_, other->address_);
  swap(working_time_, other->working_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Company::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rubric::InitAsDefaultInstance() {
}
class Rubric::_Internal {
 public:
};

Rubric::Rubric()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.Rubric)
}
Rubric::Rubric(const Rubric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      keywords_(from.keywords_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:serialization.Rubric)
}

void Rubric::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rubric_transport_5fcatalog_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Rubric::~Rubric() {
  // @@protoc_insertion_point(destructor:serialization.Rubric)
  SharedDtor();
}

void Rubric::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Rubric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rubric& Rubric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rubric_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Rubric::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.Rubric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keywords_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Rubric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.Rubric.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string keywords = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keywords();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serialization.Rubric.keywords"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rubric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.Rubric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.Rubric.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string keywords = 2;
  for (int i = 0, n = this->_internal_keywords_size(); i < n; i++) {
    const auto& s = this->_internal_keywords(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialization.Rubric.keywords");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.Rubric)
  return target;
}

size_t Rubric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.Rubric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keywords = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keywords_.size());
  for (int i = 0, n = keywords_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      keywords_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rubric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.Rubric)
  GOOGLE_DCHECK_NE(&from, this);
  const Rubric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rubric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.Rubric)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.Rubric)
    MergeFrom(*source);
  }
}

void Rubric::MergeFrom(const Rubric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.Rubric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keywords_.MergeFrom(from.keywords_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Rubric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.Rubric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rubric::CopyFrom(const Rubric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.Rubric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rubric::IsInitialized() const {
  return true;
}

void Rubric::InternalSwap(Rubric* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keywords_.InternalSwap(&other->keywords_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Rubric::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Database_RubricsEntry_DoNotUse::Database_RubricsEntry_DoNotUse() {}
Database_RubricsEntry_DoNotUse::Database_RubricsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Database_RubricsEntry_DoNotUse::MergeFrom(const Database_RubricsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Database_RubricsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Database_RubricsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Database::InitAsDefaultInstance() {
}
class Database::_Internal {
 public:
};

Database::Database()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.Database)
}
Database::Database(const Database& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      companies_(from.companies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rubrics_.MergeFrom(from.rubrics_);
  // @@protoc_insertion_point(copy_constructor:serialization.Database)
}

void Database::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Database_transport_5fcatalog_2eproto.base);
}

Database::~Database() {
  // @@protoc_insertion_point(destructor:serialization.Database)
  SharedDtor();
}

void Database::SharedDtor() {
}

void Database::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Database& Database::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Database_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Database::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.Database)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  companies_.Clear();
  rubrics_.Clear();
  _internal_metadata_.Clear();
}

const char* Database::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .serialization.Company companies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_companies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint64, .serialization.Rubric> rubrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&rubrics_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Database::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.Database)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .serialization.Company companies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_companies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_companies(i), target, stream);
  }

  // map<uint64, .serialization.Rubric> rubrics = 2;
  if (!this->_internal_rubrics().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::serialization::Rubric >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_rubrics().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_rubrics().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::serialization::Rubric >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::serialization::Rubric >::const_iterator
          it = this->_internal_rubrics().begin();
          it != this->_internal_rubrics().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Database_RubricsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::serialization::Rubric >::const_iterator
          it = this->_internal_rubrics().begin();
          it != this->_internal_rubrics().end(); ++it) {
        target = Database_RubricsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.Database)
  return target;
}

size_t Database::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.Database)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serialization.Company companies = 1;
  total_size += 1UL * this->_internal_companies_size();
  for (const auto& msg : this->companies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<uint64, .serialization.Rubric> rubrics = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rubrics_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::serialization::Rubric >::const_iterator
      it = this->_internal_rubrics().begin();
      it != this->_internal_rubrics().end(); ++it) {
    total_size += Database_RubricsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Database::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.Database)
  GOOGLE_DCHECK_NE(&from, this);
  const Database* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Database>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.Database)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.Database)
    MergeFrom(*source);
  }
}

void Database::MergeFrom(const Database& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.Database)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  companies_.MergeFrom(from.companies_);
  rubrics_.MergeFrom(from.rubrics_);
}

void Database::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.Database)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Database::CopyFrom(const Database& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.Database)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Database::IsInitialized() const {
  return true;
}

void Database::InternalSwap(Database* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  companies_.InternalSwap(&other->companies_);
  rubrics_.Swap(&other->rubrics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Database::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransportCatalog::InitAsDefaultInstance() {
  ::serialization::_TransportCatalog_default_instance_._instance.get_mutable()->router_ = const_cast< ::serialization::Router*>(
      ::serialization::Router::internal_default_instance());
  ::serialization::_TransportCatalog_default_instance_._instance.get_mutable()->renderer_ = const_cast< ::serialization::Renderer*>(
      ::serialization::Renderer::internal_default_instance());
  ::serialization::_TransportCatalog_default_instance_._instance.get_mutable()->database_ = const_cast< ::serialization::Database*>(
      ::serialization::Database::internal_default_instance());
}
class TransportCatalog::_Internal {
 public:
  static const ::serialization::Router& router(const TransportCatalog* msg);
  static const ::serialization::Renderer& renderer(const TransportCatalog* msg);
  static const ::serialization::Database& database(const TransportCatalog* msg);
};

const ::serialization::Router&
TransportCatalog::_Internal::router(const TransportCatalog* msg) {
  return *msg->router_;
}
const ::serialization::Renderer&
TransportCatalog::_Internal::renderer(const TransportCatalog* msg) {
  return *msg->renderer_;
}
const ::serialization::Database&
TransportCatalog::_Internal::database(const TransportCatalog* msg) {
  return *msg->database_;
}
TransportCatalog::TransportCatalog()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serialization.TransportCatalog)
}
TransportCatalog::TransportCatalog(const TransportCatalog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      buses_(from.buses_),
      stops_(from.stops_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_router()) {
    router_ = new ::serialization::Router(*from.router_);
  } else {
    router_ = nullptr;
  }
  if (from._internal_has_renderer()) {
    renderer_ = new ::serialization::Renderer(*from.renderer_);
  } else {
    renderer_ = nullptr;
  }
  if (from._internal_has_database()) {
    database_ = new ::serialization::Database(*from.database_);
  } else {
    database_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:serialization.TransportCatalog)
}

void TransportCatalog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransportCatalog_transport_5fcatalog_2eproto.base);
  ::memset(&router_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&database_) -
      reinterpret_cast<char*>(&router_)) + sizeof(database_));
}

TransportCatalog::~TransportCatalog() {
  // @@protoc_insertion_point(destructor:serialization.TransportCatalog)
  SharedDtor();
}

void TransportCatalog::SharedDtor() {
  if (this != internal_default_instance()) delete router_;
  if (this != internal_default_instance()) delete renderer_;
  if (this != internal_default_instance()) delete database_;
}

void TransportCatalog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransportCatalog& TransportCatalog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransportCatalog_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void TransportCatalog::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.TransportCatalog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buses_.Clear();
  stops_.Clear();
  if (GetArenaNoVirtual() == nullptr && router_ != nullptr) {
    delete router_;
  }
  router_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && renderer_ != nullptr) {
    delete renderer_;
  }
  renderer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && database_ != nullptr) {
    delete database_;
  }
  database_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TransportCatalog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .serialization.BusInfo buses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .serialization.StopInfo stops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .serialization.Router router = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_router(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .serialization.Renderer renderer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_renderer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .serialization.Database database = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_database(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransportCatalog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.TransportCatalog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .serialization.BusInfo buses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_buses(i), target, stream);
  }

  // repeated .serialization.StopInfo stops = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stops(i), target, stream);
  }

  // .serialization.Router router = 3;
  if (this->has_router()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::router(this), target, stream);
  }

  // .serialization.Renderer renderer = 4;
  if (this->has_renderer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::renderer(this), target, stream);
  }

  // .serialization.Database database = 5;
  if (this->has_database()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::database(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.TransportCatalog)
  return target;
}

size_t TransportCatalog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.TransportCatalog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serialization.BusInfo buses = 1;
  total_size += 1UL * this->_internal_buses_size();
  for (const auto& msg : this->buses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .serialization.StopInfo stops = 2;
  total_size += 1UL * this->_internal_stops_size();
  for (const auto& msg : this->stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .serialization.Router router = 3;
  if (this->has_router()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *router_);
  }

  // .serialization.Renderer renderer = 4;
  if (this->has_renderer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *renderer_);
  }

  // .serialization.Database database = 5;
  if (this->has_database()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *database_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransportCatalog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serialization.TransportCatalog)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportCatalog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransportCatalog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serialization.TransportCatalog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serialization.TransportCatalog)
    MergeFrom(*source);
  }
}

void TransportCatalog::MergeFrom(const TransportCatalog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.TransportCatalog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buses_.MergeFrom(from.buses_);
  stops_.MergeFrom(from.stops_);
  if (from.has_router()) {
    _internal_mutable_router()->::serialization::Router::MergeFrom(from._internal_router());
  }
  if (from.has_renderer()) {
    _internal_mutable_renderer()->::serialization::Renderer::MergeFrom(from._internal_renderer());
  }
  if (from.has_database()) {
    _internal_mutable_database()->::serialization::Database::MergeFrom(from._internal_database());
  }
}

void TransportCatalog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serialization.TransportCatalog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportCatalog::CopyFrom(const TransportCatalog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.TransportCatalog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportCatalog::IsInitialized() const {
  return true;
}

void TransportCatalog::InternalSwap(TransportCatalog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  buses_.InternalSwap(&other->buses_);
  stops_.InternalSwap(&other->stops_);
  swap(router_, other->router_);
  swap(renderer_, other->renderer_);
  swap(database_, other->database_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportCatalog::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serialization
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::serialization::StopInfo* Arena::CreateMaybeMessage< ::serialization::StopInfo >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::StopInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::BusInfo* Arena::CreateMaybeMessage< ::serialization::BusInfo >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::BusInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Edge* Arena::CreateMaybeMessage< ::serialization::Edge >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Edge >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Graph* Arena::CreateMaybeMessage< ::serialization::Graph >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Graph >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::StopVertexIds* Arena::CreateMaybeMessage< ::serialization::StopVertexIds >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::StopVertexIds >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::VertexInfo* Arena::CreateMaybeMessage< ::serialization::VertexInfo >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::VertexInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::EdgeInfo* Arena::CreateMaybeMessage< ::serialization::EdgeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::EdgeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::RouteInternalData* Arena::CreateMaybeMessage< ::serialization::RouteInternalData >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::RouteInternalData >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::RouteInternalDataVector* Arena::CreateMaybeMessage< ::serialization::RouteInternalDataVector >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::RouteInternalDataVector >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::RouterImpl* Arena::CreateMaybeMessage< ::serialization::RouterImpl >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::RouterImpl >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Router_CompaniesVerticiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::serialization::Router_CompaniesVerticiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Router_CompaniesVerticiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Router* Arena::CreateMaybeMessage< ::serialization::Router >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Router >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Color* Arena::CreateMaybeMessage< ::serialization::Color >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Point* Arena::CreateMaybeMessage< ::serialization::Point >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::RenderSettings* Arena::CreateMaybeMessage< ::serialization::RenderSettings >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::RenderSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Bus* Arena::CreateMaybeMessage< ::serialization::Bus >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Bus >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Renderer_StopsCoordsEntry_DoNotUse* Arena::CreateMaybeMessage< ::serialization::Renderer_StopsCoordsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Renderer_StopsCoordsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Renderer_BusColorsEntry_DoNotUse* Arena::CreateMaybeMessage< ::serialization::Renderer_BusColorsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Renderer_BusColorsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Renderer_BusesEntry_DoNotUse* Arena::CreateMaybeMessage< ::serialization::Renderer_BusesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Renderer_BusesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Renderer_CompanyCoordsEntry_DoNotUse* Arena::CreateMaybeMessage< ::serialization::Renderer_CompanyCoordsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Renderer_CompanyCoordsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Renderer* Arena::CreateMaybeMessage< ::serialization::Renderer >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Renderer >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::NearbyStop* Arena::CreateMaybeMessage< ::serialization::NearbyStop >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::NearbyStop >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Coords* Arena::CreateMaybeMessage< ::serialization::Coords >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Coords >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::AddressComponent* Arena::CreateMaybeMessage< ::serialization::AddressComponent >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::AddressComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Address* Arena::CreateMaybeMessage< ::serialization::Address >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Address >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Name* Arena::CreateMaybeMessage< ::serialization::Name >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Name >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Phone* Arena::CreateMaybeMessage< ::serialization::Phone >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Phone >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::WorkingTimeInterval* Arena::CreateMaybeMessage< ::serialization::WorkingTimeInterval >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::WorkingTimeInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::WorkingTime* Arena::CreateMaybeMessage< ::serialization::WorkingTime >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::WorkingTime >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Url* Arena::CreateMaybeMessage< ::serialization::Url >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Url >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Company* Arena::CreateMaybeMessage< ::serialization::Company >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Company >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Rubric* Arena::CreateMaybeMessage< ::serialization::Rubric >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Rubric >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Database_RubricsEntry_DoNotUse* Arena::CreateMaybeMessage< ::serialization::Database_RubricsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Database_RubricsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Database* Arena::CreateMaybeMessage< ::serialization::Database >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::Database >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::TransportCatalog* Arena::CreateMaybeMessage< ::serialization::TransportCatalog >(Arena* arena) {
  return Arena::CreateInternal< ::serialization::TransportCatalog >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
