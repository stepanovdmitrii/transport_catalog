syntax="proto3";

package serialization;

message StopInfo {
  string name = 1;
  repeated string buses = 2;
}

message BusInfo {
    string name = 1;
    uint64 stop_count = 2;
    uint64 unique_stop_count = 3;
    int32 road_route_length = 4;
    double geo_route_length = 5;
}

message Edge {
    uint64 from = 1;
    uint64 to = 2;
    double weight = 3;
}

message Graph {
    repeated Edge edges = 1;
    uint64 vertex_count = 2;
}

message StopVertexIds {
    string name = 1;
    uint64 in = 2;
    uint64 out = 3;
}

message VertexInfo {
    string name = 1;
    int32 company_id = 2;
}

enum EdgeInfoType{
    WAIT = 0;
    BUS = 1;
    WALK = 2;
}

message EdgeInfo {
    EdgeInfoType type = 1;
    string bus_name = 2;
    uint64 bus_start_stop_idx = 3;
    uint64 bus_finish_stop_idx = 4;
    string stop_from = 5;
    int32 company_id = 6;
    string company_name = 7;
    string company_display_name = 8;
}

message RouteInternalData {
    bool has_value = 1;
    double weight = 2;
    bool has_prev_edge = 3;
    uint64 prev_edge_id = 4;
}

message RouteInternalDataVector {
    repeated RouteInternalData vector_data = 1;
}

message RouterImpl {
    repeated RouteInternalDataVector vectors = 1;
}

message Router {
    int32 bus_wait_time = 1;
    double bus_velocity= 2;
    Graph graph = 3;
    RouterImpl route_impl = 4;
    repeated StopVertexIds stop_vertex_ids = 5;
    repeated VertexInfo vertex_infos = 6;
    repeated EdgeInfo edge_infos = 7;
    double pedestrian_velocity = 8;
    map<int32, uint64> companies_verticies = 9;
}

enum ColorType {
    NOT_DEFINED = 0;
    STRING = 1;
    RGB = 2;
    RGBA = 3;
}

message Color {
    ColorType type = 1;
    string color_string = 2;
    uint32 red = 3;
    uint32 green = 4;
    uint32 blue = 5;
    double opacity = 6;
}

message Point {
    double x = 1;
    double y = 2;
}

message RenderSettings {
    double max_width = 1;
    double max_height = 2;
    double padding = 3;
    double outer_margin = 4;
    repeated Color palette = 5;
    double line_width = 6;
    Color underlayer_color = 7;
    double underlayer_width = 8;
    double stop_radius = 9;
    Point bus_label_offset = 10;
    int32 bus_label_font_size = 11;
    Point stop_label_offset = 12;
    int32 stop_label_font_size = 13;
    repeated string layers = 14;
    double company_radius = 15;
    double company_line_width = 16;
}

message Bus {
    repeated string stops = 1;
    repeated string endpoints = 2;
}

message Renderer {
    RenderSettings settings = 1;
    map<string, Point> stops_coords = 2;
    map<string, Color> bus_colors = 3;
    map<string, Bus> buses = 4;
    map<int32, Point> company_coords = 5;
}

message NearbyStop {
  string name = 1;
  uint32 meters = 2;
}


message Coords {
  double lat = 1;
  double lon = 2;
}

message AddressComponent {
  string value = 1;
  enum Type {
    COUNTRY = 0;
    REGION = 1;
    CITY = 2;
    STREET = 3;
    HOUSE = 4;
  }
}

message Address {
  string formatted = 1;
  repeated AddressComponent components = 2;
  Coords coords = 3;
  string comment = 4;
}

message Name {
  string value = 1;
  enum Type {
    MAIN = 0;
    SYNONYM = 1;
    SHORT = 2;
  }
  Type type = 2;
}

message Phone {
  string formatted = 1;
  enum Type {
    PHONE = 0;
    FAX = 1;
  }
  Type type = 2;
  string country_code = 3;
  string local_code = 4;
  string number = 5;
  string extension = 6;
  string description = 7;
}

message WorkingTimeInterval {
  enum Day {
    EVERYDAY = 0;
    MONDAY = 1;
    TUESDAY = 2;
    WEDNESDAY = 3;
    THURSDAY = 4;
    FRIDAY = 5;
    SATURDAY = 6;
    SUNDAY = 7;
  }

  Day day = 1;
  int32 minutes_from = 2;
  int32 minutes_to = 3;
}

message WorkingTime {
  string formatted = 1;
  repeated WorkingTimeInterval intervals = 2;
}

message Url {
  string value = 1;
}

message Company {
  Address address = 1;
  repeated Name names = 2;
  repeated Phone phones = 3;
  repeated Url urls = 4;
  repeated uint64 rubrics = 5;
  WorkingTime working_time = 6;
  repeated NearbyStop nearby_stops = 7;
}

message Rubric {
  string name = 1;
  repeated string keywords = 2;
}

message Database {
  repeated Company companies = 1;
  map<uint64, Rubric> rubrics = 2;
}

message TransportCatalog {
    repeated BusInfo buses = 1;
    repeated StopInfo stops = 2;
    Router router = 3;
    Renderer renderer = 4;
    Database database = 5;
}